name: Build and Test

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'electron/**'
      - 'tests/**'
      - 'scripts/**'
      - 'package.json'
      - 'package-lock.json'
      - 'tsconfig*.json'
      - 'vite.config.ts'
      - '.github/workflows/build-and-test.yml'
      - '.github/actions/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'electron/**'
      - 'tests/**'
      - 'scripts/**'
      - 'package.json'
      - 'package-lock.json'
      - 'tsconfig*.json'
      - 'vite.config.ts'
      - '.github/workflows/build-and-test.yml'
      - '.github/actions/**'

env:
  NODE_VERSION: '20.x'
  COVERAGE_THRESHOLD: 90

permissions:
  contents: read
  actions: read

# ==================== 并发控制 ====================
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ==================== 核心构建测试 ====================
  build-and-test:
    name: Build and Test
    runs-on: windows-latest
    timeout-minutes: 15
    # P0修复：job级别环境变量确保devDependencies正确安装
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'

    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 安装依赖（加固版）
        uses: ./.github/actions/npm-install

      - name: 🔍 验证工具链设置（Windows专注）
        shell: bash
        run: |
          echo "🔍 Windows环境信息诊断："
          node -v && npm -v
          echo "验证ESLint可用性（避免误判安装问题）："
          export PATH="$(npm bin):$PATH"
          ./node_modules/.bin/eslint -v || npx --yes eslint -v
          echo "✅ 工具链设置验证完成"

      # 仅对改动文件执行 0 warning 门禁（禁止新增告警）
      - name: 📁 获取改动文件
        id: changed
        uses: tj-actions/changed-files@v45
        with:
          separator: ' '

      - name: 🚫 改动文件门禁 (0 warnings)
        if: ${{ steps.changed.outputs.any_changed == 'true' }}
        shell: bash
        run: |
          set -euo pipefail
          # 过滤出受影响的源码/脚本文件
          echo "${{ steps.changed.outputs.all_changed_files }}" | tr ' ' '\n' \
            | grep -E '\.(ts|tsx|js|jsx)$' > changed.txt || true
          if [ ! -s changed.txt ]; then
            echo "No relevant changed files for lint gate."
            exit 0
          fi
          export PATH="$(npm bin):$PATH"
          echo "Lint on changed files:"
          cat changed.txt
          # 0 warning 严格门禁（只针对改动文件）
          npx eslint "$(cat changed.txt)" --max-warnings 0
          # 同时做 Prettier 严格检查（不写入）
          npx prettier --check "$(cat changed.txt)"

      - name: 🎨 Prettier 格式检查
        shell: bash
        run: |
          echo "检查代码格式..."
          npx prettier . --check || (echo "❌ 代码格式不符合要求，请运行 'npm run format' 修复"; exit 1)
          echo "✅ 代码格式检查通过"

      - name: 🔍 ESLint 检查
        run: npm run lint

      - name: 🚨 ESLint 基线门禁
        run: npm run lint:baseline
        env:
          ESLINT_MAX_WARNINGS: 50

      - name: 🏗️ TypeScript 编译检查
        run: npx tsc --noEmit

      - name: 🧪 运行单元测试
        uses: ./.github/actions/run-tests
        with:
          test-type: unit
        env:
          NODE_ENV: test

      - name: 🏗️ 构建应用
        run: npm run build

      - name: 🔍 验证构建产物（Windows原生）
        shell: bash
        run: |
          echo "验证Windows构建产物结构："
          ls -la dist/
          if [ ! -f "dist/index.html" ]; then echo "❌ 缺少 index.html"; exit 1; fi
          if [ ! -d "dist/assets" ]; then echo "❌ 缺少 assets 目录"; exit 1; fi
          echo "✅ 构建产物验证通过"

      # 性能门禁（Windows）
      - name: 🧪 性能基准（User Timing）
        run: npm run guard:performance
        env: { NODE_ENV: test }

      - name: 🧪 性能门禁（帧率稳定）
        run: npm run guard:framerate
        env: { NODE_ENV: test }

      - name: 🧪 性能门禁（场景切换）
        run: npm run guard:scene-transition
        env: { NODE_ENV: test }

      - name: 🧪 性能门禁（WebVitals 混合）
        run: node scripts/perf/web-vitals-hybrid-gate.mjs
        env: { NODE_ENV: test }

      - name: 📈 Performance Gate Summary
        if: always()
        shell: bash
        run: |
          echo "## 📈 Performance Gates (Windows)" >> $GITHUB_STEP_SUMMARY
          echo "- User Timing: 已执行并门禁化" >> $GITHUB_STEP_SUMMARY
          echo "- 帧率稳定/场景切换: 已执行并门禁化" >> $GITHUB_STEP_SUMMARY
          echo "- WebVitals（如配置）: 已执行并门禁化" >> $GITHUB_STEP_SUMMARY

      - name: 📋 Quality Gate Summary
        if: always()
        shell: bash
        run: |
          echo "## ✅ Quality Gates (Windows)" >> $GITHUB_STEP_SUMMARY
          echo "- Lint/Typecheck: 已执行（含改动文件 0 warning 门禁）" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage Gate: 全局 ≥ 90%（若低于已阻断）" >> $GITHUB_STEP_SUMMARY
          echo "- Bundle/体量阈值: 已校验" >> $GITHUB_STEP_SUMMARY

  # ==================== Electron安全测试 ====================
  electron-security-tests:
    name: Electron Security Tests
    runs-on: windows-latest
    needs: build-and-test
    timeout-minutes: 20
    # P0修复：job级别环境变量确保devDependencies正确安装
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'

    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 安装依赖（加固版）
        uses: ./.github/actions/npm-install

      - name: 🛡️ 运行Electron安全冒烟测试（Windows）
        uses: ./.github/actions/run-tests
        with:
          test-type: security
        env:
          CI: true
          # Windows下无需xvfb，Electron可直接运行

      - name: 📋 上传安全测试报告
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: electron-security-report-${{ github.run_number }}
          path: |
            test-results/
            playwright-report/
          # P2标准化：测试报告常规保留期7天，PR构建5天
          retention-days: ${{ github.event_name == 'pull_request' && 7 || 14 }}
