name: Security Checks

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  security-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install security tools
        run: |
          npm install -g @doyensec/electronegativity@1.10.3
          npm install -g snyk
          npm install -g audit-ci

      - name: Run Electronegativity scan
        run: |
          echo "🔍 运行Electronegativity安全扫描..."
          electronegativity --input . --output security-scan.csv --verbose false --electron-version 30.0.0 || echo "⚠️  扫描完成但有警告"
          echo "✅ Electronegativity扫描完成"
          
          if [ -f security-scan.csv ]; then
            echo "📊 CSV文件生成成功，大小: $(wc -l < security-scan.csv) 行"
            head -3 security-scan.csv | head -1
          else
            echo "❌ 错误：CSV文件未生成"
            exit 1
          fi

      - name: Run npm audit
        run: |
          npm audit --audit-level high --json > npm-audit-results.json || true
          audit-ci --config .audit-ci.json

      - name: Run Snyk security scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          snyk test --json > snyk-results.json || true
          snyk monitor

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            security-scan.csv
            npm-audit-results.json
            snyk-results.json

      - name: P0安全门禁检查 - 任一失败直接拒绝
        run: |
          #!/bin/bash
          set -e

          echo "🔒 开始P0级安全门禁检查..."

          # 初始化错误计数
          CRITICAL_ERRORS=0
          HIGH_ERRORS=0
          TOTAL_ERRORS=0

          # 1. Electronegativity扫描结果检查
          if [ -f security-scan.csv ]; then
            echo "📊 检查Electronegativity扫描结果..."
            # CSV格式解析：跳过头行，统计Critical和High级别问题
            ELECTRO_CRITICAL=$(awk -F',' 'NR>1 && tolower($3) == "critical" {count++} END {print count+0}' security-scan.csv)
            ELECTRO_HIGH=$(awk -F',' 'NR>1 && tolower($3) == "high" {count++} END {print count+0}' security-scan.csv)
            
            echo "  - Critical: $ELECTRO_CRITICAL"
            echo "  - High: $ELECTRO_HIGH"
            
            CRITICAL_ERRORS=$((CRITICAL_ERRORS + ELECTRO_CRITICAL))
            HIGH_ERRORS=$((HIGH_ERRORS + ELECTRO_HIGH))
          else
            echo "❌ Electronegativity扫描结果文件不存在！"
            CRITICAL_ERRORS=$((CRITICAL_ERRORS + 1))
          fi

          # 2. npm audit结果检查
          if [ -f npm-audit-results.json ]; then
            echo "📊 检查npm audit结果..."
            NPM_CRITICAL=$(jq '.metadata.vulnerabilities.critical // 0' npm-audit-results.json 2>/dev/null || echo "0")
            NPM_HIGH=$(jq '.metadata.vulnerabilities.high // 0' npm-audit-results.json 2>/dev/null || echo "0")
            
            echo "  - Critical: $NPM_CRITICAL"
            echo "  - High: $NPM_HIGH"
            
            CRITICAL_ERRORS=$((CRITICAL_ERRORS + NPM_CRITICAL))
            HIGH_ERRORS=$((HIGH_ERRORS + NPM_HIGH))
          else
            echo "❌ npm audit结果文件不存在！"
            CRITICAL_ERRORS=$((CRITICAL_ERRORS + 1))
          fi

          # 3. Snyk扫描结果检查
          if [ -f snyk-results.json ]; then
            echo "📊 检查Snyk扫描结果..."
            SNYK_CRITICAL=$(jq '[.vulnerabilities[] | select(.severity == "critical")] | length' snyk-results.json 2>/dev/null || echo "0")
            SNYK_HIGH=$(jq '[.vulnerabilities[] | select(.severity == "high")] | length' snyk-results.json 2>/dev/null || echo "0")
            
            echo "  - Critical: $SNYK_CRITICAL"
            echo "  - High: $SNYK_HIGH"
            
            CRITICAL_ERRORS=$((CRITICAL_ERRORS + SNYK_CRITICAL))
            HIGH_ERRORS=$((HIGH_ERRORS + SNYK_HIGH))
          fi

          # 4. 计算总错误数
          TOTAL_ERRORS=$((CRITICAL_ERRORS + HIGH_ERRORS))

          # 5. P0门禁决策
          echo ""
          echo "🔍 P0安全门禁结果汇总:"
          echo "  - Critical级别问题: $CRITICAL_ERRORS"
          echo "  - High级别问题: $HIGH_ERRORS"
          echo "  - 总计问题数: $TOTAL_ERRORS"
          echo ""

          # P0决策：任何Critical级别的问题都直接拒绝
          if [ $CRITICAL_ERRORS -gt 0 ]; then
            echo "🚨 P0安全门禁失败：发现 $CRITICAL_ERRORS 个Critical级别安全问题"
            echo "   ❌ 构建被阻止，禁止部署到任何环境"
            echo "   🔧 请立即修复所有Critical级别安全问题后重新提交"
            exit 1
          fi

          # 警告：High级别问题数量检查
          if [ $HIGH_ERRORS -gt 5 ]; then
            echo "⚠️  警告：发现 $HIGH_ERRORS 个High级别安全问题"
            echo "   📝 建议在下次迭代中优先修复"
            echo "   🚀 当前构建允许继续，但请关注安全债务"
          fi

          # 成功通过P0门禁
          if [ $TOTAL_ERRORS -eq 0 ]; then
            echo "✅ P0安全门禁检查通过：未发现安全问题"
          else
            echo "✅ P0安全门禁检查通过：无Critical级别问题"
          fi

          echo "🎯 安全门禁检查完成，构建可以继续"

      - name: 生成安全门禁报告
        if: always()
        run: |
          echo "📊 生成统一的安全门禁报告..."

          # 创建HTML格式的安全报告
          cat > security-gate-report.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>P0安全门禁报告</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 20px; }
                  .critical { color: #dc3545; font-weight: bold; }
                  .high { color: #fd7e14; }
                  .medium { color: #ffc107; }
                  .low { color: #28a745; }
                  .pass { color: #28a745; font-weight: bold; }
                  .fail { color: #dc3545; font-weight: bold; }
                  table { border-collapse: collapse; width: 100%; }
                  th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                  th { background-color: #f2f2f2; }
              </style>
          </head>
          <body>
              <h1>🔒 P0安全门禁报告</h1>
              <p><strong>构建时间:</strong> $(date)</p>
              <p><strong>Git Commit:</strong> $GITHUB_SHA</p>
              <p><strong>分支:</strong> $GITHUB_REF_NAME</p>
              
              <h2>📊 安全扫描结果汇总</h2>
              <table>
                  <tr><th>扫描工具</th><th>Critical</th><th>High</th><th>Medium</th><th>Low</th><th>状态</th></tr>
          EOF

          # 添加扫描结果到HTML报告（这里可以根据实际的JSON结果动态生成）
          echo "            </table>" >> security-gate-report.html
          echo "        </body></html>" >> security-gate-report.html

      - name: 上传安全门禁报告
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-gate-report
          path: |
            security-scan.csv
            npm-audit-results.json
            snyk-results.json
            security-gate-report.html
