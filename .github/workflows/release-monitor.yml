name: Release Monitor - 鍙戝竷鐩戞帶

# Minimal permissions
  contents: read
  actions: write

defaults:
  run:
    shell: pwsh

on:
  schedule:
    # Monitor release health every 15 minutes
    - cron: '*/15 * * * *'
  workflow_dispatch:
    inputs:
      version:
        description: '鐩戞帶鐨勫簲鐢ㄧ増鏈紙鐣欑┖浣跨敤鐜鍙橀噺锛?
        required: false
        type: string
      force_check:
        description: '寮哄埗妫€鏌ワ紙蹇界暐鏃堕棿闄愬埗锛?
        required: false
        type: boolean
        default: false

env:
  SENTRY_ORG: ${{ vars.SENTRY_ORG || 'your-org' }}
  SENTRY_PROJECT: ${{ vars.SENTRY_PROJECT || 'vitegame' }}
  APP_VERSION: ${{ inputs.version || vars.APP_VERSION || github.ref_name }}
  PREV_GA_VERSION: ${{ vars.PREV_GA_VERSION || '0.0.9' }}
  THRESHOLD_CF_USERS: ${{ vars.THRESHOLD_CF_USERS || '0.995' }}
  THRESHOLD_CF_SESSIONS: ${{ vars.THRESHOLD_CF_SESSIONS || '0.995' }}
  WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}

# ==================== 骞跺彂鎺у埗 ====================
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  monitor:
    runs-on: windows-latest
    # P0淇锛歫ob绾у埆鐜鍙橀噺纭繚devDependencies姝ｇ‘瀹夎
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'
    timeout-minutes: 10
    permissions:
      contents: write
      actions: write

    steps:
      - name: Step
        uses: actions/checkout@v4

      - name: Step
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Step
        uses: ./.github/actions/npm-install
        env:
          NPM_CONFIG_PRODUCTION: 'true'

      - name: Step
        shell: pwsh
        run: |
          # P0淇锛歐indows runner浣跨敤PowerShell鍖呯鐞嗘浛浠inux apt-get
          if (-not (Get-Command jq -ErrorAction SilentlyContinue)) {
            Write-Host "Installing jq tool..."
            if (Get-Command choco -ErrorAction SilentlyContinue) {
              choco install jq -y --no-progress
            } else {
              Write-Host "Chocolatey not available, trying winget..."
              winget install stedolan.jq --accept-source-agreements --accept-package-agreements
            }
          } else {
            Write-Host "jq already available"
          }

      - name: Step
        id: conditions
        shell: bash
        run: |
          # 妫€鏌ユ槸鍚﹀湪宸ヤ綔鏃堕棿锛圲TC 6:00 - 22:00锛屽ぇ鑷村搴斿悇鏃跺尯鐨勫伐浣滄椂闂达級
          current_hour=$(date -u +%H)
          if [ "$current_hour" -lt 6 ] || [ "$current_hour" -gt 22 ]; then
            if [ "${{ inputs.force_check }}" != "true" ]; then
              echo "?force_check=true"
              echo "should_monitor=false" >> "$GITHUB_OUTPUT"
              exit 0
            fi
          fi

          # 妫€鏌ユ槸鍚︽湁娲昏穬鐨勬笎杩涘彂甯?          if [ ! -f "dist/latest.yml" ]; then
            echo "Feed"
            echo "should_monitor=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # 妫€鏌?stagingPercentage
          staging_pct=$(grep -E '^stagingPercentage:' dist/latest.yml | sed 's/stagingPercentage: *//' || echo "0")
          if [ "$staging_pct" = "0" ] || [ "$staging_pct" = "100" ]; then
            echo "馃搳 褰撳墠鍒嗛樁娈靛彂甯冧负 ${staging_pct}%锛岃烦杩囩洃鎺?
            echo "should_monitor=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "鉁?婊¤冻鐩戞帶鏉′欢锛屽紑濮嬪仴搴锋鏌?
          echo "should_monitor=true" >> "$GITHUB_OUTPUT"
          echo "staging_percentage=$staging_pct" >> "$GITHUB_OUTPUT"

      - name: Step
        id: health_monitor
        if: steps.conditions.outputs.should_monitor == 'true'
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        shell: bash
        run: |
          if [ -z "$SENTRY_AUTH_TOKEN" ]; then
            echo "SENTRY_AUTH_TOKEN"
            echo "monitor_status=skipped" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "$APP_VERSION?.."
          echo "?${{ steps.conditions.outputs.staging_percentage }}%"

          # 鎵ц鍋ュ悍搴︽鏌?          set +e
          health_result=$(DRY_RUN=true node scripts/release/auto-rollback.mjs)
          health_exit_code=$?
          set -e

          echo "health_result=$health_result" >> "$GITHUB_OUTPUT"
          echo "health_exit_code=$health_exit_code" >> "$GITHUB_OUTPUT"

          echo ":"
          echo "$health_result" | jq '.'

          case $health_exit_code in
            0)
              echo "鉁?鎸佺画鍋ュ悍鐩戞帶锛氭寚鏍囨甯?
              echo "monitor_status=healthy" >> "$GITHUB_OUTPUT"
              ;;
            42)
              echo ""
              echo "monitor_status=unhealthy" >> "$GITHUB_OUTPUT"
              
              # 瑙﹀彂绱ф€ュ洖婊氬伐浣滄祦
              echo "?.."
              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/${{ github.repository }}/actions/workflows/release-emergency-rollback.yml/dispatches" \
                -d "{
                  \"ref\": \"${{ github.ref }}\",
                  \"inputs\": {
                    \"reason\": \"Continuous monitoring detected health degradation\",
                    \"triggered_by\": \"monitor\"
                  }
                }"
              ;;
            *)
              echo "(:$health_exit_code)"
              echo "monitor_status=error" >> "$GITHUB_OUTPUT"
              ;;
          esac

      - name: Step
        if: steps.conditions.outputs.should_monitor == 'true'
        shell: bash
        run: |
          # 鍒涘缓鎴栨洿鏂扮洃鎺х姸鎬佹枃浠?          mkdir -p .github/monitoring

          cat > .github/monitoring/latest-status.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)",
            "version": "$APP_VERSION",
            "staging_percentage": ${{ steps.conditions.outputs.staging_percentage }},
            "health_status": "${{ steps.health_monitor.outputs.monitor_status }}",
            "health_data": ${{ steps.health_monitor.outputs.health_result || 'null' }},
            "workflow_run": "${{ github.run_number }}",
            "next_check": "$(date -u -d '+15 minutes' +%Y-%m-%dT%H:%M:%S.000Z)"
          }
          EOF

          echo ""

      - name: Step
        if: steps.health_monitor.outputs.monitor_status == 'unhealthy'
        env:
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
        shell: bash
        run: |
          if [ -z "$WEBHOOK_URL" ]; then
            echo "WEBHOOK_URL"
            exit 0
          fi

          echo "..."

          curl -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d "{
              \"text\": \"馃毃 Release Health Alert\",
              \"attachments\": [{
                \"color\": \"danger\",
                \"fields\": [
                  {\"title\": \"App Version\", \"value\": \"$APP_VERSION\", \"short\": true},
                  {\"title\": \"Staging %\", \"value\": \"${{ steps.conditions.outputs.staging_percentage }}%\", \"short\": true},
                  {\"title\": \"Status\", \"value\": \"Health degradation detected\", \"short\": false},
                  {\"title\": \"Action\", \"value\": \"Emergency rollback triggered\", \"short\": false}
                ],
                \"text\": \"Continuous monitoring detected health issues. Emergency rollback has been initiated.\"
              }]
            }" || echo "Webhook notification failed (non-critical)"

      - name: Step
        if: steps.conditions.outputs.should_monitor == 'true'
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          if [ -f ".github/monitoring/latest-status.json" ]; then
            git add .github/monitoring/latest-status.json
            git commit -m "馃搳 Release monitoring update: $APP_VERSION" \
              -m "Status: ${{ steps.health_monitor.outputs.monitor_status }}" \
              -m "Staging: ${{ steps.conditions.outputs.staging_percentage }}%" \
              -m "" \
              -m "Automated monitoring data" || echo "No changes to commit"
            
            git push origin ${{ github.ref }} || echo "Push failed (non-critical)"
          fi

      - name: Step
        if: always()
        shell: bash
        run: |
          # 纭繚UTF-8缂栫爜杈撳嚭
          export LANG=C.UTF-8
          export LC_ALL=C.UTF-8
          {
            echo "##"
            echo ""
            echo "****:$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"
            echo "****: \`$APP_VERSION\`"
          } >> "$GITHUB_STEP_SUMMARY"

          if [ "${{ steps.conditions.outputs.should_monitor }}" = "true" ]; then
            echo "**?*:${{ steps.conditions.outputs.staging_percentage }}%" >> "$GITHUB_STEP_SUMMARY"
            
            status="${{ steps.health_monitor.outputs.monitor_status }}"
            case "$status" in
              "healthy") status_icon="鉁?; status_text="鍋ュ悍" ;;
              "unhealthy") status_icon="馃毃"; status_text="涓嶅仴搴?- 宸茶Е鍙戝洖婊? ;;
              "error") status_icon="鈿狅笍"; status_text="鐩戞帶閿欒" ;;
              "skipped") status_icon="鈴笍"; status_text="璺宠繃" ;;
              *) status_icon="鉂?; status_text="鏈煡" ;;
            esac
            
            echo "**?*:$status_icon$status_text" >> "$GITHUB_STEP_SUMMARY"
            
            if [ -n "${{ steps.health_monitor.outputs.health_result }}" ]; then
              {
                echo ""
                echo "###"
                echo "\`\`\`json"
                echo '${{ steps.health_monitor.outputs.health_result }}' | jq '.'
                echo "\`\`\`"
              } >> "$GITHUB_STEP_SUMMARY"
            fi
          else
            echo "**?*: (?" >> "$GITHUB_STEP_SUMMARY"
          fi

          {
            echo ""
            echo "**?*:$(date -u -d '+15 minutes' +%Y-%m-%dT%H:%M:%S.000Z)"
          } >> "$GITHUB_STEP_SUMMARY"

