name: Release Ramp - 娓愯繘鍙戝竷涓庤嚜鍔ㄥ洖婊?
# Minimal permissions
  contents: write
  actions: write

defaults:
  run:
    shell: pwsh

on:
  workflow_dispatch:
    inputs:
      stage:
        description: '鍒嗛樁娈靛彂甯冪櫨鍒嗘瘮'
        required: true
        type: choice
        options: ['5', '25', '50', '100']
        default: '5'
      feed_file:
        description: 'Feed 鏂囦欢璺緞'
        required: false
        type: choice
        options:
          - 'dist/latest.yml'
          - 'dist/latest-mac.yml'
          - 'dist/latest-linux.yml'
        default: 'dist/latest.yml'
      skip_health_check:
        description: '璺宠繃鍋ュ悍搴︽鏌?(浠呯敤浜庢祴璇?'
        required: false
        type: boolean
        default: false

env:
  # Sentry 閰嶇疆
  SENTRY_ORG: ${{ vars.SENTRY_ORG || 'your-org' }}
  SENTRY_PROJECT: ${{ vars.SENTRY_PROJECT || 'vitegame' }}
  APP_VERSION: ${{ vars.APP_VERSION || github.ref_name }}
  PREV_GA_VERSION: ${{ vars.PREV_GA_VERSION || '0.0.9' }}

  # 鍋ュ悍搴﹂槇鍊?  THRESHOLD_CF_USERS: ${{ vars.THRESHOLD_CF_USERS || '0.995' }}
  THRESHOLD_CF_SESSIONS: ${{ vars.THRESHOLD_CF_SESSIONS || '0.995' }}

  # 閫氱煡閰嶇疆
  WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}

# ==================== 骞跺彂鎺у埗 ====================
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false # 鍒嗛樁娈靛彂甯冧笉鍙腑鏂?
jobs:
  ramp:
    runs-on: windows-latest
    # P0淇锛歫ob绾у埆鐜鍙橀噺纭繚devDependencies姝ｇ‘瀹夎
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'
    timeout-minutes: 15
    permissions:
      contents: write
      actions: read

    outputs:
      stage: ${{ inputs.stage }}
      health_passed: ${{ steps.health_check.outcome == 'success' }}
      rollback_executed: ${{ steps.rollback.outcome == 'success' }}

    steps:
      - name: Step
        uses: actions/checkout@v4
        with:
          # 鑾峰彇瀹屾暣鍘嗗彶浠ヤ究鎻愪氦
          fetch-depth: 0

      - name: Step
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Step
        uses: ./.github/actions/npm-install
        env:
          NPM_CONFIG_PRODUCTION: 'true'

      - name: Step
        shell: pwsh
        run: |
          # Windows runner 宸查瑁?jq锛屾鏌ュ彲鐢ㄦ€?          if (Get-Command jq -ErrorAction SilentlyContinue) {
            Write-Host "鉁?jq 宸插彲鐢?
            jq --version
          } else {
            Write-Host "jq chocolatey"
            choco install jq -y
          }

      - name: Step
        shell: bash
        run: |
          echo "..."

          # 妫€鏌?feed 鏂囦欢
          if [ ! -f "${{ inputs.feed_file }}" ]; then
            echo "?Feed ?${{ inputs.feed_file }}"
            exit 1
          fi

          # 妫€鏌ョ増鏈竻鍗曟枃浠?          if [ ! -f "artifacts/manifest.json" ]; then
            echo "?? artifacts/manifest.json"
            echo "npm run release:manifest:add"
            exit 1
          fi

          # 楠岃瘉娓呭崟鏍煎紡
          echo "..."
          node scripts/release/manage-manifest.mjs validate

          echo "?"

      - name: Step
        run: |
          echo ":"
          echo "- :${{ inputs.stage }}%"
          echo "- Feed :${{ inputs.feed_file }}"
          echo "- :$APP_VERSION"
          echo "- :$PREV_GA_VERSION"
          echo "- Sentry :$SENTRY_ORG/$SENTRY_PROJECT"
          echo "- ?${{ inputs.skip_health_check }}"

          echo ""
          echo "?"
          echo "  - Crash-Free Users: $THRESHOLD_CF_USERS (99.5%)"
          echo "  - Crash-Free Sessions: $THRESHOLD_CF_SESSIONS (99.5%)"

          echo ""
          echo ":"
          node scripts/release/manage-manifest.mjs list

      - name: Step
        id: staging
        run: |
          echo "?${{ inputs.stage }}%..."

          result=$(node scripts/release/patch-staging-percentage.mjs "${{ inputs.feed_file }}" "${{ inputs.stage }}")
          echo "staging_result=$result" >> "$GITHUB_OUTPUT"

          echo "?"
          echo "$result" | jq '.'

      - name: Step
        if: ${{ inputs.stage != '5' && !inputs.skip_health_check }}
        run: |
          echo "? Sentry ..."
          echo "鍒嗛樁娈靛彂甯冮渶瑕佹椂闂磋鏂扮増鏈鐢ㄦ埛鎺ユ敹骞朵骇鐢熼仴娴嬫暟鎹?

          # 鏍规嵁鍙戝竷鐧惧垎姣旇皟鏁寸瓑寰呮椂闂?          case "${{ inputs.stage }}" in
            "25") wait_minutes=5 ;;
            "50") wait_minutes=8 ;;
            "100") wait_minutes=10 ;;
            *) wait_minutes=3 ;;
          esac

          echo "?${wait_minutes}..."
          sleep $((wait_minutes * 60))

      - name: Step
        id: health_check
        if: ${{ inputs.stage != '5' && !inputs.skip_health_check }}
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        shell: bash
        run: |
          echo "?$APP_VERSION?Release Health..."

          if [ -z "$SENTRY_AUTH_TOKEN" ]; then
            echo "鈿狅笍  SENTRY_AUTH_TOKEN 鏈厤缃紝璺宠繃鍋ュ悍妫€鏌?
            echo "health_status=skipped" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # 鎵ц鍋ュ悍搴︽鏌?          set +e  # 鍏佽鍛戒护澶辫触浠ヤ究鎹曡幏閫€鍑虹爜
          health_result=$(node scripts/release/auto-rollback.mjs)
          health_exit_code=$?
          set -e

          echo "health_result=$health_result" >> "$GITHUB_OUTPUT"
          echo "health_exit_code=$health_exit_code" >> "$GITHUB_OUTPUT"

          echo "?"
          echo "$health_result" | jq '.'

          case $health_exit_code in
            0)
              echo "? -"
              echo "health_status=passed" >> "$GITHUB_OUTPUT"
              ;;
            42)
              echo "??-"
              echo "health_status=failed" >> "$GITHUB_OUTPUT"
              exit 42  # 浼犳挱鐗规畩閫€鍑虹爜浠ヨЕ鍙戝洖婊?              ;;
            *)
              echo "?(:$health_exit_code)"
              echo "health_status=error" >> "$GITHUB_OUTPUT"
              exit $health_exit_code
              ;;
          esac

      - name: Step
        id: rollback
        if: failure() && steps.health_check.outputs.health_exit_code == '42'
        env:
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
        run: |
          echo "..."

          rollback_reason="Automated rollback: Release health below threshold (stage: ${{ inputs.stage }}%)"

          # 鎵ц瀹屾暣鍥炴粴娴佺▼锛堢揣鎬ュ仠姝?+ 鐗堟湰鍥為€€锛?          rollback_result=$(node scripts/release/execute-rollback.mjs \
            --feed="${{ inputs.feed_file }}" \
            --previous-version="$PREV_GA_VERSION" \
            --manifest="artifacts/manifest.json" \
            --reason="$rollback_reason" \
            $([ -n "$WEBHOOK_URL" ] && echo "--notify"))

          echo "rollback_result=$rollback_result" >> "$GITHUB_OUTPUT"

          echo ":"
          echo "$rollback_result" | jq '.'

          echo "?"

          # 璁剧疆鍥炴粴鐘舵€佺敤浜庡悗缁楠?          echo "rollback_executed=true" >> "$GITHUB_OUTPUT"

      - name: Step
        id: commit
        shell: bash
        run: |
          # 閰嶇疆 Git
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # 妫€鏌ユ槸鍚︽湁鍙樻洿
          if git diff --quiet "${{ inputs.feed_file }}"; then
            echo "Feed"
            echo "committed=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # 鍒涘缓鎻愪氦娑堟伅
          if [ "${{ steps.rollback.outputs.rollback_executed }}" = "true" ]; then
            commit_msg="馃毃 Auto rollback: ${{ inputs.feed_file }} 鈫?$PREV_GA_VERSION (health check failed at ${{ inputs.stage }}%)"
            commit_type="rollback"
          else
            commit_msg="馃搱 Release ramp: ${{ inputs.feed_file }} 鈫?${{ inputs.stage }}% staging"
            commit_type="ramp"
          fi

          # 鎵ц鎻愪氦
          git add "${{ inputs.feed_file }}"
          git commit -m "$commit_msg" \
            -m "Stage: ${{ inputs.stage }}%" \
            -m "App Version: $APP_VERSION" \
            -m "Feed: ${{ inputs.feed_file }}" \
            -m "" \
            -m "Generated by GitHub Actions workflow" \
            -m "Workflow: ${{ github.workflow }}" \
            -m "Run: ${{ github.run_number }}"

          echo "?$commit_msg"
          # 浣跨敤鍗曚竴閲嶅畾鍚戜紭鍖栨€ц兘锛堜慨澶?SC2129锛?          {
            echo "committed=true"
            echo "commit_type=$commit_type"
            echo "commit_sha=$(git rev-parse HEAD)"
          } >> "$GITHUB_OUTPUT"

      - name: Step
        if: steps.commit.outputs.committed == 'true'
        run: |
          echo "..."
          git push origin ${{ github.ref }}
          echo "鍙樻洿宸叉帹閫?

      - name: Ramp summary
        shell: bash
        run: |
          summary_file="${GITHUB_STEP_SUMMARY}"
          {
            echo "## 鍒嗛樁娈靛彂甯冪粨鏋?
            echo ""
            echo "- ****:${{ inputs.stage }}%"
            echo "- **?*:${{ github.actor }}"
          } >> "${summary_file}"

          # 娣诲姞鍋ュ悍妫€鏌ヨ鎯咃紙濡傛灉鏈夛級
          if [ -n "${{ steps.health_check.outputs.health_result }}" ]; then
            {
              echo ''
              echo '### 馃彞 鍋ュ悍妫€鏌ヨ鎯?
              echo '```json'
            } >> "$GITHUB_STEP_SUMMARY"
            {
              echo '${{ steps.health_check.outputs.health_result }}' | jq '.'
              echo '```'
            } >> "$GITHUB_STEP_SUMMARY"
          fi

          # 涓嬩竴姝ュ缓璁?          {
            echo ""
            echo "### 馃幆 涓嬩竴姝ュ缓璁?
          } >> "$GITHUB_STEP_SUMMARY"

          if [ "$health_status" = "passed" ] && [ "${{ inputs.stage }}" != "100" ]; then
            case "${{ inputs.stage }}" in
              "5") next_stage="25" ;;
              "25") next_stage="50" ;;
              "50") next_stage="100" ;;
            esac
            echo "- ??**${next_stage}%**" >> "$GITHUB_STEP_SUMMARY"
            echo "- 10-15" >> "$GITHUB_STEP_SUMMARY"
          elif [ "$health_status" = "failed" ]; then
            {
              echo "- **?*"
              echo "-"
              echo "- 鑰冭檻闄嶇骇鍙戝竷绛栫暐鎴栧鍔犳洿澶氭祴璇曡鐩?
            } >> "$GITHUB_STEP_SUMMARY"
          elif [ "${{ inputs.stage }}" = "100" ] && [ "$health_status" = "passed" ]; then
            {
              echo "- **娓愯繘鍙戝竷瀹屾垚锛?* 搴旂敤宸插叏閲忓彂甯?
              echo "- Release Health"
              echo "- 鍙€冭檻鏇存柊 \`PREV_GA_VERSION\` 鐜鍙橀噺涓哄綋鍓嶇増鏈?
            } >> "$GITHUB_STEP_SUMMARY"
          fi

  # 鍚庣画宸ヤ綔娴侊細閫氱煡銆佺洃鎺х瓑
  post_actions:
    needs: ramp
    if: always()
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    # P0淇锛歫ob绾у埆鐜鍙橀噺纭繚devDependencies姝ｇ‘瀹夎
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'
    steps:
      - name: Step
        if: env.WEBHOOK_URL != ''
        env:
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
        shell: bash
        run: |
          # 鏍规嵁缁撴灉鏋勫缓閫氱煡娑堟伅
          if [ "${{ needs.ramp.outputs.rollback_executed }}" = "true" ]; then
            status="馃毃 Rollback Executed"
            color="danger"
            message="Release ramp failed health check at ${{ needs.ramp.outputs.stage }}% and was automatically rolled back"
          elif [ "${{ needs.ramp.outputs.health_passed }}" = "true" ]; then
            status="鉁?Stage ${{ needs.ramp.outputs.stage }}% Complete"
            color="good"
            message="Release ramp to ${{ needs.ramp.outputs.stage }}% completed successfully with healthy metrics"
          else
            status="鈿狅笍  Stage ${{ needs.ramp.outputs.stage }}% - No Health Check"
            color="warning" 
            message="Release ramp to ${{ needs.ramp.outputs.stage }}% completed (health check skipped)"
          fi

          # 鍙戦€侀€氱煡锛堢畝鍖栫殑 webhook 璋冪敤锛?          curl -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d "{
              \"text\": \"$status\",
              \"attachments\": [{
                \"color\": \"$color\",
                \"fields\": [
                  {\"title\": \"App Version\", \"value\": \"${{ env.APP_VERSION }}\", \"short\": true},
                  {\"title\": \"Stage\", \"value\": \"${{ needs.ramp.outputs.stage }}%\", \"short\": true},
                  {\"title\": \"Repository\", \"value\": \"${{ github.repository }}\", \"short\": true},
                  {\"title\": \"Workflow\", \"value\": \"${{ github.workflow }}\", \"short\": true}
                ],
                \"text\": \"$message\"
              }]
            }" || echo "Webhook notification failed (non-critical)"

