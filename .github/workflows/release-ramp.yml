name: Release Ramp - 渐进发布与自动回滚

# 最小权限原则
permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      stage:
        description: '分阶段发布百分比'
        required: true
        type: choice
        options: ['5', '25', '50', '100']
        default: '5'
      feed_file:
        description: 'Feed 文件路径'
        required: false
        type: choice
        options:
          - 'dist/latest.yml'
          - 'dist/latest-mac.yml'
          - 'dist/latest-linux.yml'
        default: 'dist/latest.yml'
      skip_health_check:
        description: '跳过健康度检查 (仅用于测试)'
        required: false
        type: boolean
        default: false

env:
  # Sentry 配置
  SENTRY_ORG: ${{ vars.SENTRY_ORG || 'your-org' }}
  SENTRY_PROJECT: ${{ vars.SENTRY_PROJECT || 'vitegame' }}
  APP_VERSION: ${{ vars.APP_VERSION || github.ref_name }}
  PREV_GA_VERSION: ${{ vars.PREV_GA_VERSION || '0.0.9' }}

  # 健康度阈值
  THRESHOLD_CF_USERS: ${{ vars.THRESHOLD_CF_USERS || '0.995' }}
  THRESHOLD_CF_SESSIONS: ${{ vars.THRESHOLD_CF_SESSIONS || '0.995' }}

  # 通知配置
  WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}

# ==================== 并发控制 ====================
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false # 分阶段发布不可中断

jobs:
  ramp:
    runs-on: windows-latest
    # P0修复：job级别环境变量确保devDependencies正确安装
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'
    timeout-minutes: 15
    permissions:
      contents: write
      actions: read

    outputs:
      stage: ${{ inputs.stage }}
      health_passed: ${{ steps.health_check.outcome == 'success' }}
      rollback_executed: ${{ steps.rollback.outcome == 'success' }}

    steps:
      - name: '🚀 Checkout repository'
        uses: actions/checkout@v4
        with:
          # 获取完整历史以便提交
          fetch-depth: 0

      - name: '📦 Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: '🔧 Install dependencies'
        uses: ./.github/actions/npm-install
        env:
          NPM_CONFIG_PRODUCTION: 'true'

      - name: '🛠️ Install system tools'
        shell: pwsh
        run: |
          # Windows runner 已预装 jq，检查可用性
          if (Get-Command jq -ErrorAction SilentlyContinue) {
            Write-Host "✅ jq 已可用"
            jq --version
          } else {
            Write-Host "⚠️ jq 不可用，使用 chocolatey 安装"
            choco install jq -y
          }

      - name: '📋 Validate prerequisites'
        run: |
          echo "🔍 验证必要文件存在..."

          # 检查 feed 文件
          if [ ! -f "${{ inputs.feed_file }}" ]; then
            echo "❌ Feed 文件不存在: ${{ inputs.feed_file }}"
            exit 1
          fi

          # 检查版本清单文件
          if [ ! -f "artifacts/manifest.json" ]; then
            echo "❌ 版本清单文件不存在: artifacts/manifest.json"
            echo "请先运行 npm run release:manifest:add 添加版本"
            exit 1
          fi

          # 验证清单格式
          echo "📋 验证版本清单格式..."
          node scripts/release/manage-manifest.mjs validate

          echo "✅ 前置条件验证通过"

      - name: '📊 Display current status'
        run: |
          echo "🎯 渐进发布配置:"
          echo "  - 目标阶段: ${{ inputs.stage }}%"
          echo "  - Feed 文件: ${{ inputs.feed_file }}"
          echo "  - 应用版本: $APP_VERSION"
          echo "  - 上一稳定版本: $PREV_GA_VERSION"
          echo "  - Sentry 项目: $SENTRY_ORG/$SENTRY_PROJECT"
          echo "  - 跳过健康检查: ${{ inputs.skip_health_check }}"

          echo ""
          echo "🔧 健康度阈值:"
          echo "  - Crash-Free Users: $THRESHOLD_CF_USERS (99.5%)"
          echo "  - Crash-Free Sessions: $THRESHOLD_CF_SESSIONS (99.5%)"

          echo ""
          echo "📋 可用版本列表:"
          node scripts/release/manage-manifest.mjs list

      - name: '📈 Set staging percentage'
        id: staging
        run: |
          echo "🎯 设置分阶段发布百分比为 ${{ inputs.stage }}%..."

          result=$(node scripts/release/patch-staging-percentage.mjs "${{ inputs.feed_file }}" "${{ inputs.stage }}")
          echo "staging_result=$result" >> $GITHUB_OUTPUT

          echo "✅ 分阶段发布百分比设置成功"
          echo "$result" | jq '.'

      - name: '⏱️ Wait for metrics collection'
        if: ${{ inputs.stage != '5' && !inputs.skip_health_check }}
        run: |
          echo "⏳ 等待 Sentry 收集指标数据..."
          echo "分阶段发布需要时间让新版本被用户接收并产生遥测数据"

          # 根据发布百分比调整等待时间
          case "${{ inputs.stage }}" in
            "25") wait_minutes=5 ;;
            "50") wait_minutes=8 ;;
            "100") wait_minutes=10 ;;
            *) wait_minutes=3 ;;
          esac

          echo "⏰ 等待 ${wait_minutes} 分钟收集数据..."
          sleep $((wait_minutes * 60))

      - name: '🏥 Health check via Sentry Release Health'
        id: health_check
        if: ${{ inputs.stage != '5' && !inputs.skip_health_check }}
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: |
          echo "🔍 检查版本 $APP_VERSION 的 Release Health..."

          if [ -z "$SENTRY_AUTH_TOKEN" ]; then
            echo "⚠️  SENTRY_AUTH_TOKEN 未配置，跳过健康检查"
            echo "health_status=skipped" >> $GITHUB_OUTPUT
            exit 0
          fi

          # 执行健康度检查
          set +e  # 允许命令失败以便捕获退出码
          health_result=$(node scripts/release/auto-rollback.mjs)
          health_exit_code=$?
          set -e

          echo "health_result=$health_result" >> $GITHUB_OUTPUT
          echo "health_exit_code=$health_exit_code" >> $GITHUB_OUTPUT

          echo "📊 健康检查结果:"
          echo "$health_result" | jq '.'

          case $health_exit_code in
            0)
              echo "✅ 健康检查通过 - 可以继续发布"
              echo "health_status=passed" >> $GITHUB_OUTPUT
              ;;
            42)
              echo "❌ 健康检查失败 - 触发自动回滚"
              echo "health_status=failed" >> $GITHUB_OUTPUT
              exit 42  # 传播特殊退出码以触发回滚
              ;;
            *)
              echo "⚠️  健康检查遇到错误 (退出码: $health_exit_code)"
              echo "health_status=error" >> $GITHUB_OUTPUT
              exit $health_exit_code
              ;;
          esac

      - name: '🚨 Execute automatic rollback'
        id: rollback
        if: failure() && steps.health_check.outputs.health_exit_code == '42'
        env:
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
        run: |
          echo "🚨 健康检查失败，执行自动回滚..."

          rollback_reason="Automated rollback: Release health below threshold (stage: ${{ inputs.stage }}%)"

          # 执行完整回滚流程（紧急停止 + 版本回退）
          rollback_result=$(node scripts/release/execute-rollback.mjs \
            --feed="${{ inputs.feed_file }}" \
            --previous-version="$PREV_GA_VERSION" \
            --manifest="artifacts/manifest.json" \
            --reason="$rollback_reason" \
            $([ -n "$WEBHOOK_URL" ] && echo "--notify"))

          echo "rollback_result=$rollback_result" >> $GITHUB_OUTPUT

          echo "📋 回滚执行结果:"
          echo "$rollback_result" | jq '.'

          echo "✅ 自动回滚完成"

          # 设置回滚状态用于后续步骤
          echo "rollback_executed=true" >> $GITHUB_OUTPUT

      - name: '💾 Commit feed changes'
        id: commit
        run: |
          # 配置 Git
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # 检查是否有变更
          if git diff --quiet "${{ inputs.feed_file }}"; then
            echo "📝 Feed 文件无变更，跳过提交"
            echo "committed=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # 创建提交消息
          if [ "${{ steps.rollback.outputs.rollback_executed }}" = "true" ]; then
            commit_msg="🚨 Auto rollback: ${{ inputs.feed_file }} → $PREV_GA_VERSION (health check failed at ${{ inputs.stage }}%)"
            commit_type="rollback"
          else
            commit_msg="📈 Release ramp: ${{ inputs.feed_file }} → ${{ inputs.stage }}% staging"
            commit_type="ramp"
          fi

          # 执行提交
          git add "${{ inputs.feed_file }}"
          git commit -m "$commit_msg" \
            -m "Stage: ${{ inputs.stage }}%" \
            -m "App Version: $APP_VERSION" \
            -m "Feed: ${{ inputs.feed_file }}" \
            -m "" \
            -m "Generated by GitHub Actions workflow" \
            -m "Workflow: ${{ github.workflow }}" \
            -m "Run: ${{ github.run_number }}"

          echo "变更已提交: $commit_msg"
          echo "committed=true" >> "$GITHUB_OUTPUT"
          echo "commit_type=$commit_type" >> "$GITHUB_OUTPUT"
          echo "commit_sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

      - name: '🚀 Push changes'
        if: steps.commit.outputs.committed == 'true'
        run: |
          echo "推送变更到远程仓库..."
          git push origin ${{ github.ref }}
          echo "变更已推送"

      - name: Ramp summary
        shell: bash
        run: |
          summary_file="${GITHUB_STEP_SUMMARY}"
          {
            echo "## 分阶段发布结果"
            echo ""
            echo "- **目标阶段**: ${{ inputs.stage }}%"
            echo "- **触发人**: ${{ github.actor }}"
          } >> "${summary_file}"

          # 添加健康检查详情（如果有）
          if [ -n "${{ steps.health_check.outputs.health_result }}" ]; then
            {
              echo ''
              echo '### 🏥 健康检查详情'
              echo '```json'
            } >> "$GITHUB_STEP_SUMMARY"
            {
              echo '${{ steps.health_check.outputs.health_result }}' | jq '.'
              echo '```'
            } >> "$GITHUB_STEP_SUMMARY"
          fi

          # 下一步建议
          {
            echo ""
            echo "### 🎯 下一步建议"
          } >> "$GITHUB_STEP_SUMMARY"

          if [ "$health_status" = "passed" ] && [ "${{ inputs.stage }}" != "100" ]; then
            case "${{ inputs.stage }}" in
              "5") next_stage="25" ;;
              "25") next_stage="50" ;;
              "50") next_stage="100" ;;
            esac
            echo "- ✅ 当前阶段健康度良好，可考虑继续到 **${next_stage}%** 阶段" >> "$GITHUB_STEP_SUMMARY"
            echo "- 建议等待 10-15 分钟观察指标稳定后再进行下一阶段" >> "$GITHUB_STEP_SUMMARY"
          elif [ "$health_status" = "failed" ]; then
            {
              echo "- **健康检查失败，已执行自动回滚**"
              echo "- 请检查应用日志和错误报告，修复问题后重新发布"
              echo "- 考虑降级发布策略或增加更多测试覆盖"
            } >> "$GITHUB_STEP_SUMMARY"
          elif [ "${{ inputs.stage }}" = "100" ] && [ "$health_status" = "passed" ]; then
            {
              echo "- **渐进发布完成！** 应用已全量发布"
              echo "- 继续监控 Release Health 指标"
              echo "- 可考虑更新 \`PREV_GA_VERSION\` 环境变量为当前版本"
            } >> "$GITHUB_STEP_SUMMARY"
          fi

  # 后续工作流：通知、监控等
  post_actions:
    needs: ramp
    if: always()
    runs-on: windows-latest
    # P0修复：job级别环境变量确保devDependencies正确安装
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'
    steps:
      - name: '📢 Send notification (optional)'
        if: env.WEBHOOK_URL != ''
        env:
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
        run: |
          # 根据结果构建通知消息
          if [ "${{ needs.ramp.outputs.rollback_executed }}" = "true" ]; then
            status="🚨 Rollback Executed"
            color="danger"
            message="Release ramp failed health check at ${{ needs.ramp.outputs.stage }}% and was automatically rolled back"
          elif [ "${{ needs.ramp.outputs.health_passed }}" = "true" ]; then
            status="✅ Stage ${{ needs.ramp.outputs.stage }}% Complete"
            color="good"
            message="Release ramp to ${{ needs.ramp.outputs.stage }}% completed successfully with healthy metrics"
          else
            status="⚠️  Stage ${{ needs.ramp.outputs.stage }}% - No Health Check"
            color="warning" 
            message="Release ramp to ${{ needs.ramp.outputs.stage }}% completed (health check skipped)"
          fi

          # 发送通知（简化的 webhook 调用）
          curl -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d "{
              \"text\": \"$status\",
              \"attachments\": [{
                \"color\": \"$color\",
                \"fields\": [
                  {\"title\": \"App Version\", \"value\": \"${{ env.APP_VERSION }}\", \"short\": true},
                  {\"title\": \"Stage\", \"value\": \"${{ needs.ramp.outputs.stage }}%\", \"short\": true},
                  {\"title\": \"Repository\", \"value\": \"${{ github.repository }}\", \"short\": true},
                  {\"title\": \"Workflow\", \"value\": \"${{ github.workflow }}\", \"short\": true}
                ],
                \"text\": \"$message\"
              }]
            }" || echo "Webhook notification failed (non-critical)"
