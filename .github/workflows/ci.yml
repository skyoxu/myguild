name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'electron/**'
      - 'tests/**'
      - 'scripts/**'
      - 'package.json'
      - 'package-lock.json'
      - 'tsconfig.json'
      - 'vite.config.ts'
      - 'vitest.config.ts'
      - 'playwright.config.ts'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'electron/**'
      - 'tests/**'
      - 'scripts/**'
      - 'package.json'
      - 'package-lock.json'
      - 'tsconfig.json'
      - 'vite.config.ts'
      - 'vitest.config.ts'
      - 'playwright.config.ts'
      - '.github/workflows/ci.yml'
  schedule:
    # Daily check - UTC 02:00 (Beijing 10:00)
    - cron: '0 2 * * *'

env:
  NODE_VERSION_MATRIX: '18.x, 20.x, 22.x'
  COVERAGE_THRESHOLD: 90
  # Disable Sentry ingestion in CI/PR by default (free SaaS safe defaults)
  SENTRY_DSN: ''
  SENTRY_TRACES_SAMPLE_RATE: '0'

permissions:
  contents: read
  actions: read

defaults:
  run:
    shell: pwsh

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ==================== Guardian Self-Check ====================
  workflow-guardian:
    name: Workflow Guardian Check
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    timeout-minutes: 5
    # P0: ensure devDependencies installed for job
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Step
        uses: raven-actions/actionlint@v2
        with:
          actionlint_flags: "-color"

      - name: Setup Node.js
        uses: actions/setup-node@v5.0.0
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        uses: ./.github/actions/npm-install

      - name: Step
        run: node scripts/ci/workflow-guardian.mjs

      - name: Step
        run: node scripts/ci/branch-protection-guardian.mjs
        continue-on-error: true # Branch protection check is non-blocking; issues are logged

  # ==================== Quality Gates ====================
  quality-gates:
    name: Quality Gates Check
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    timeout-minutes: 10
    needs: [workflow-guardian]
    # P0: ensure devDependencies installed for job
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v5.0.0
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        uses: ./.github/actions/npm-install

      - name: Step
        run: npm run lint
        continue-on-error: true

      - name: Step
        run: npm run typecheck

      - name: Step
        run: npm run ci:gate:sentry-up
        timeout-minutes: 2
        continue-on-error: true
      - name: Renderer import guard
        run: node scripts/ci/check-renderer-imports.mjs

  # ==================== Security Scan Stage ====================
  # Note: Security scans moved to unified gate (security-unified.yml)
# Workflow

  # ==================== Stable Core Jobs (Required) ====================
  unit-tests-core:
    name: Unit Tests (windows-latest, Node 20)
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    needs: [workflow-guardian]
    timeout-minutes: 15
     # P0: ensure devDependencies installed for job
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v5.0.0
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        uses: ./.github/actions/npm-install

      - name: Step
        uses: ./.github/actions/run-tests
        with:
          test-type: coverage
        env:
          NODE_ENV: test
      - name: Step
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-summary
          path: coverage/coverage-summary.json
          retention-days: 14

  coverage-gate:
    name: Coverage Gate
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    needs: [unit-tests-core]
    timeout-minutes: 5
     # P0: ensure devDependencies installed for job
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v5.0.0
        with:
          node-version: '20.x'
          cache: 'npm'
      - name: Install dependencies
        uses: ./.github/actions/npm-install
      - name: Validate (coverage config)
        run: node scripts/ci/coverage-config.cjs --verify-only
      - name: Step
        uses: actions/download-artifact@v4
        with:
          name: coverage-summary
          path: coverage/
      - name: Step
        run: node scripts/ci/coverage-gate.cjs
        env:
          COVERAGE_MODE: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
          NODE_ENV: ${{ github.ref == 'refs/heads/main' && 'production' || 'test' }}

  sonarcloud-analysis:
    name: SonarCloud Analysis (Windows, CLI)
    runs-on: windows-latest
    needs: [unit-tests-core]
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false }}
    permissions:
      contents: read
      pull-requests: read
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: https://sonarcloud.io
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v5.0.0
        with:
          node-version: '20'
          cache: 'npm'
      - name: Setup Java (for SonarScanner)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
      - name: Install dependencies
        run: npm ci
      - name: Run tests with coverage (lcov)
        run: npm run test:coverage
        env:
          NODE_ENV: test
      - name: Check SonarCloud project readiness
        id: sonar_ready
        if: ${{ env.SONAR_TOKEN != '' }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        run: |
          $ErrorActionPreference = 'Stop'
          $projectKey = "${{ secrets.SONAR_PROJECT_KEY }}"
          if ([string]::IsNullOrWhiteSpace($projectKey)) {
            "ready=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            "reason=missing_projectKey" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            exit 0
          }
          $pair = "$env:SONAR_TOKEN:"
          $b64 = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes($pair))
          $headers = @{ Authorization = "Basic $b64" }
          try {
            $resp = Invoke-RestMethod -Headers $headers -Uri "$env:SONAR_HOST_URL/api/project_branches/list?project=$projectKey" -Method GET -ErrorAction Stop
          } catch {
            "ready=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            "reason=api_error" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            exit 0
          }
          $branches = $resp.branches
          if (-not $branches -or $branches.Count -eq 0) {
            "ready=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            "reason=no_branches" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            exit 0
          }
          $main = $branches | Where-Object { $_.isMain -eq $true }
          if (-not $main) {
            "ready=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            "reason=no_main_branch" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            exit 0
          }
          "ready=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          "reason=ok" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
      - name: Prepare logs directory
        if: ${{ env.SONAR_TOKEN != '' && steps.sonar_ready.outputs.ready == 'true' }}
        run: |
          $date = Get-Date -Format yyyyMMdd
          $logDir = Join-Path -Path "logs" -ChildPath (Join-Path $date "sonarcloud")
          New-Item -ItemType Directory -Force -Path $logDir | Out-Null
          echo "LOG_DIR=$logDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - name: Download SonarScanner CLI (Windows)
        if: ${{ env.SONAR_TOKEN != '' && steps.sonar_ready.outputs.ready == 'true' }}
        run: |
          $ErrorActionPreference = 'Stop'
          $Version = '5.0.1.3006'
          $Zip = "sonar-scanner-cli-$Version-windows.zip"
          $Url = "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/$Zip"
          Invoke-WebRequest -Uri $Url -OutFile $Zip
          Expand-Archive -Path $Zip -DestinationPath . -Force
          Remove-Item $Zip -Force
          $ScannerRoot = Join-Path (Get-Location) "sonar-scanner-$Version-windows"
          $BinDir = Join-Path $ScannerRoot 'bin'
          # Add to PATH for subsequent steps
          "$BinDir" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          # Persist for later steps
          echo "SCANNER_BIN=$BinDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - name: SonarCloud Scan (CLI)
        if: ${{ env.SONAR_TOKEN != '' && steps.sonar_ready.outputs.ready == 'true' }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        run: |
          $ErrorActionPreference = 'Stop'
          $date = Get-Date -Format yyyyMMdd
          $logDir = "$env:LOG_DIR"
          if (-not (Test-Path $logDir)) { New-Item -ItemType Directory -Force -Path $logDir | Out-Null }
          $args = @(
            "-Dsonar.organization=${{ secrets.SONAR_ORG }}",
            "-Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}",
            "-Dsonar.host.url=$env:SONAR_HOST_URL",
            "-Dsonar.login=$env:SONAR_TOKEN",
            "-Dsonar.javascript.lcov.reportPaths=coverage/lcov.info",
            "-Dsonar.sources=src",
            "-Dsonar.tests=tests",
            "-Dsonar.test.inclusions=**/*.spec.ts,**/*.test.ts"
          )
          Write-Host "Running: sonar-scanner $($args -join ' ')"
          # Run and tee output to logs
          $p = Start-Process -FilePath "sonar-scanner.bat" -ArgumentList $args -RedirectStandardOutput "$logDir/scan.log" -RedirectStandardError "$logDir/scan.err.log" -NoNewWindow -PassThru -Wait
          if ($p.ExitCode -ne 0) { Get-Content "$logDir/scan.err.log"; throw "sonar-scanner failed with code $($p.ExitCode)" }
      - name: Wait for Quality Gate (Windows API Poll)
        if: ${{ env.SONAR_TOKEN != '' && steps.sonar_ready.outputs.ready == 'true' }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        run: |
          $ErrorActionPreference = 'Stop'
          $logDir = "$env:LOG_DIR"
          $reportPath = Join-Path (Get-Location) '.scannerwork\report-task.txt'
          if (-not (Test-Path $reportPath)) { throw ".scannerwork/report-task.txt not found; sonar-scanner may have failed." }
          $report = Get-Content $reportPath | ForEach-Object {
            $kv = $_ -split '=',2
            [PSCustomObject]@{ Key = $kv[0]; Value = $kv[1] }
          } | Group-Object -Property Key -AsHashTable -AsString
          $ceTaskId = $report['ceTaskId'].Value
          $projectKey = $report['projectKey'].Value
          if (-not $ceTaskId) { throw "ceTaskId missing in report-task.txt" }
          $pair = "$env:SONAR_TOKEN:"
          $b64 = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes($pair))
          $headers = @{ Authorization = "Basic $b64" }
          # Poll background task until completed
          $maxAttempts = 60
          for ($i=0; $i -lt $maxAttempts; $i++) {
            $task = Invoke-RestMethod -Headers $headers -Uri "$env:SONAR_HOST_URL/api/ce/task?id=$ceTaskId" -Method GET
            $task | ConvertTo-Json -Depth 5 | Out-File -FilePath (Join-Path $logDir 'ce-task.json') -Encoding utf8
            $status = $task.task.status
            Write-Host "Compute Engine Task Status: $status (attempt $($i+1)/$maxAttempts)"
            if ($status -in @('SUCCESS','FAILED','CANCELED')) { break }
            Start-Sleep -Seconds 3
          }
          if ($status -ne 'SUCCESS') { throw "SonarCloud compute task status=$status" }
          $qg = Invoke-RestMethod -Headers $headers -Uri "$env:SONAR_HOST_URL/api/qualitygates/project_status?projectKey=$projectKey" -Method GET
          $qg | ConvertTo-Json -Depth 5 | Out-File -FilePath (Join-Path $logDir 'quality-gate.json') -Encoding utf8
          $qStatus = $qg.projectStatus.status
          Write-Host "Quality Gate: $qStatus"
          if ($qStatus -ne 'OK') { throw "Quality Gate failed: $qStatus" }
      - name: Upload Sonar logs artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-sonarcloud-${{ github.run_id }}
          path: |
            logs/**
      - name: Sonar summary
        if: always()
        run: |
          {
            echo "## SonarCloud Summary";
            echo "- Status: ${{ job.status }}";
            echo "- Project: ${{ secrets.SONAR_PROJECT_KEY || 'not-set' }}";
            echo "- Organization: ${{ secrets.SONAR_ORG || 'not-set' }}";
            echo "- Runner: $env:RUNNER_OS";
            echo "- Ready: ${{ steps.sonar_ready.outputs.ready || 'n/a' }} (${{ steps.sonar_ready.outputs.reason || 'n/a' }})";
          } >> $env:GITHUB_STEP_SUMMARY

  build-verification-core:
    name: Build Verification (windows-latest)
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    needs: [unit-tests-core]
    timeout-minutes: 10
    # P0: ensure devDependencies installed for job
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v5.0.0
        with:
          node-version: '20.x'
          cache: 'npm'
      - name: Install dependencies
        uses: ./.github/actions/npm-install
      - name: Build application
        run: npm run build
      - name: Validate
        run: node scripts/ci/verify-dist-build.mjs
      - name: Upload dist-electron artifact
        if: ${{ success() && hashFiles('dist-electron/**') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: dist-electron
          path: dist-electron/**
          retention-days: 1

      - name: Upload web dist artifact
        if: ${{ success() && hashFiles('dist/**') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: dist-web
          path: dist/**
          retention-days: 1

  release-health-gate:
    name: Release Health Gate
    runs-on: windows-latest
    needs: [unit-tests-core, coverage-gate, electron-security-gate]
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v5.0.0
        with:
          node-version: '20.x'
          cache: 'npm'
      - name: Install dependencies
        uses: ./.github/actions/npm-install
      - name: Ensure sentry-cli available (Windows)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $date = Get-Date -Format yyyyMMdd
          $logDir = Join-Path -Path "logs" -ChildPath (Join-Path $date "sentry")
          New-Item -ItemType Directory -Force -Path $logDir | Out-Null
          echo "SENTRY_LOG_DIR=$logDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          # Add local node_modules/.bin to PATH for subsequent steps
          $bin = Join-Path (Get-Location) "node_modules/.bin"
          if (Test-Path $bin) { "$bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append }
          # Verify binary exists; if missing, install @sentry/cli explicitly
          $cliCmd = if ($env:RUNNER_OS -eq 'Windows') { 'sentry-cli.cmd' } else { 'sentry-cli' }
          $cliPath1 = Join-Path $bin $cliCmd
          if (-not (Test-Path $cliPath1)) {
            Write-Host "@sentry/cli not found in node_modules/.bin, installing devDependency..."
            npm install -D @sentry/cli
          }
          # Re-add bin path (covers fresh install)
          if (Test-Path $bin) { "$bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append }
          # Print version and info to logs
          try {
            & "sentry-cli" --version 2>&1 | Tee-Object -FilePath (Join-Path $logDir 'sentry-cli.version.log')
            & "sentry-cli" info 2>&1 | Tee-Object -FilePath (Join-Path $logDir 'sentry-cli.info.log')
          } catch {
            Write-Host "sentry-cli invocation failed: $($_.Exception.Message)"; Get-ChildItem $bin -Force | Format-List *; throw
          }
      - name: Check Sentry token
        id: sentry_check
        run: node scripts/ci/sentry-verify.mjs
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG || 'default-org' }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT || 'bc660-desktop' }}
      - name: Step
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG || 'default-org' }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT || 'bc660-desktop' }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SENTRY_ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'prod' || 'staging' }}
          SENTRY_RELEASE: ${{ github.sha }}
        if: steps.sentry_check.outputs.token_present == 'true'
        shell: pwsh
        run: node scripts/ci/release-health-gate.mjs
      - name: Upload Sentry logs artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-sentry-${{ github.run_id }}
          path: |
            logs/**

  # ==================== Extended Tests Matrix ====================
  extended-tests-matrix:
    name: Extended Tests Matrix
    runs-on: windows-latest
    permissions:
      contents: read
      pull-requests: read
    defaults:
      run:
        shell: pwsh
    needs: [quality-gates]
    timeout-minutes: 20
    if: |
      (
        (github.event_name == 'pull_request' && contains(github.event.pull_request.title, '[skip-extended]') == false) ||
        (github.event_name != 'pull_request' && contains(github.event.head_commit.message, '[skip-extended]') == false)
      ) && github.event_name != 'schedule'

    strategy:
      fail-fast: false
      matrix:
        node-version: ['18.x', '20.x', '22.x']
        # Windows-focused strategy: single OS, multiple Node versions

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Step
        uses: tj-actions/changed-files@v44
        id: changed-files
        continue-on-error: true
        with:
          files: |
            src/**
            tests/**
            *.js
            *.ts
            *.json
            package*.json
            vite.config.*
            tsconfig.json
            *.config.js
            *.config.ts
          files_ignore: |
            docs/**
            *.md
            **/*.md

      - name: Setup Node.js
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/setup-node@v5.0.0
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: ./.github/actions/npm-install
        with:
          node-version: ${{ matrix.node-version }}

      - name: Step
        if: steps.changed-files.outputs.any_changed == 'true'
        run: npm test
        env:
          NODE_ENV: test

  # ==================== Electron Security Gate ====================
  electron-security-gate:
    name: Electron Security Gate
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    needs: [quality-gates, build-verification-core]
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5.0.0
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        uses: ./.github/actions/npm-install

      - name: Download dist-electron artifact (if available)
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: dist-electron
          path: dist-electron

      - name: Pre-build Electron artifacts (timeout 8m)
        run: npm run build
        timeout-minutes: 8

      - name: Assert electron main entry exists
        run: |
          if (!(Test-Path 'dist-electron/electron/main.js')) {
          Write-Error 'Missing dist-electron/electron/main.js after build or artifact download.'
          exit 1
          }

      # Windows runner does not require xvfb for Electron
      - name: Validate
        run: |
          Write-Host "Windows runner detected ($env:RUNNER_OS); Electron smoke runs without xvfb"
          echo "Runner OS: $RUNNER_OS"

      - name: Step
        uses: ./.github/actions/run-tests
        with:
          test-type: security
        env:
          CI: true
          RUN_TESTS_BUILD_TIMEOUT_MS: '600000'
        timeout-minutes: 60
          # Windows runner does not require xvfb for Electron
      - name: Run Snyk scan (non-blocking)
        run: node scripts/ci/run-snyk-scan.mjs
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      - name: License summary
        run: node scripts/ci/run-license-summary.mjs

  # ==================== E2E Perf Smoke (merged from build-and-test) ====================
  e2e-perf-smoke:
    name: E2E Perf Smoke
    runs-on: windows-latest
    permissions:
      contents: read
      pull-requests: read
    needs: [build-verification-core, unit-tests-core]
    defaults:
      run:
        shell: pwsh
    env:
      CI: 'true'
      VITE_E2E_SMOKE: 'true'
      ELECTRON_ENABLE_LOGGING: '1'
      ELECTRON_DISABLE_GPU: '1'
      E2E_SECURITY_TIMEOUT_MS: 300000
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v5.0.0
        with:
          node-version: 20
          cache: 'npm'
      - name: Detect changes for E2E
        id: changes-e2e
        uses: tj-actions/changed-files@v44
        continue-on-error: true
        with:
          files: |
            src/**
            tests/e2e/**
            playwright.config.ts
      - name: Install deps (npm ci)
        if: steps.changes-e2e.outputs.any_changed == 'true'
        run: npm ci
      - name: Download dist-electron artifact
        if: steps.changes-e2e.outputs.any_changed == 'true'
        uses: actions/download-artifact@v4
        with:
          name: dist-electron
          path: _artifacts
      - name: Download web dist artifact
        if: steps.changes-e2e.outputs.any_changed == 'true'
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: dist-web
          path: .
      - name: Verify downloaded artifacts or build
        if: steps.changes-e2e.outputs.any_changed == 'true'
        working-directory: ${{ github.workspace }}
        run: |
          $missing = 0
          if (!(Test-Path -LiteralPath '_artifacts/dist-electron/electron/main.js')) { $missing = 1 }
          if (!(Test-Path -LiteralPath 'dist/index.html')) { $missing = 1 }
          if ($missing -eq 1) {
            Write-Host 'Artifacts incomplete, running npm run build to generate dist and dist-electron.'
            if (!(Test-Path -LiteralPath 'package.json')) { Write-Error 'package.json not found in workspace'; exit 1 }
            $pkg = Get-Content package.json -Raw | ConvertFrom-Json
            if (-not $pkg.scripts -or -not ($pkg.scripts.PSObject.Properties.Name -contains 'build')) { Write-Error 'No "build" script in package.json; cannot build fallback.'; exit 1 }
            # Ensure dependencies are installed before build (idempotent)
            if (-not (Test-Path -LiteralPath 'node_modules')) { npm ci }
            npm run build
          } else {
            Write-Host 'Artifacts present: dist/ and dist-electron/ found.'
          }
      - name: Install Playwright (Windows)
        if: steps.changes-e2e.outputs.any_changed == 'true'
        run: npx playwright install
      - name: Run E2E perf smoke
        if: steps.changes-e2e.outputs.any_changed == 'true'
        working-directory: ${{ github.workspace }}
        run: npm run test:e2e:perf-smoke
      - name: Collect Playwright traces to logs/
        if: always() && steps.changes-e2e.outputs.any_changed == 'true'
        working-directory: ${{ github.workspace }}
        run: node scripts/ci/collect-playwright-traces.mjs
      - name: Upload Playwright traces (logs/playwright-traces)
        if: always() && steps.changes-e2e.outputs.any_changed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: playwright-traces
          path: logs/playwright-traces/
          if-no-files-found: warn
          retention-days: 7
      - name: Upload perf logs
        if: always() && steps.changes-e2e.outputs.any_changed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: perf-logs
          path: |
            test-results/**
            logs/playwright-traces/
          if-no-files-found: warn
          retention-days: 7
      - name: Skip E2E Perf (no changes)
        if: steps.changes-e2e.outputs.any_changed != 'true'
        run: |
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "E2E perf smoke skipped: no relevant changes (src/**, tests/e2e/**, playwright.config.ts)."
  # ==================== Observability Verification ====================
  observability-verification:
    name: Observability Verification
    runs-on: windows-latest
    needs: [unit-tests-core]
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5.0.0
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        uses: ./.github/actions/npm-install

      - name: Validate
        id: observability
        uses: ./.github/actions/run-tests
        with:
          test-type: observability

      - name: Upload observability report
        if: ${{ always() && hashFiles('logs/observability-verification.json') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: observability-report
          path: logs/observability-verification.json
          retention-days: 14

  # ==================== Performance Benchmarks ====================
  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    needs: [build-verification-core]
    timeout-minutes: 15
    if: |
      (github.event_name == 'pull_request' && contains(github.event.pull_request.title, '[skip-perf]') == false) ||
      (github.event_name != 'pull_request' && contains(github.event.head_commit.message, '[skip-perf]') == false)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5.0.0
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        uses: ./.github/actions/npm-install

      - name: Event loop latency benchmark
        run: node scripts/ci/run-event-loop-benchmark.mjs
      - name: Collect performance metrics (placeholder)
        run: node scripts/ci/perf-metrics-placeholder.mjs

  # ==================== Deployment Readiness ====================
  deployment-readiness:
    name: Deployment Readiness Check
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    needs:
      [
        build-verification-core,
        electron-security-gate,
        observability-verification,
      ]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deployment summary
        run: echo "Deployment readiness checklist will be attached."

      - name: Generate deployment checklist
        run: node scripts/ci/generate-deployment-checklist.mjs

      - name: Step
        uses: actions/upload-artifact@v4
        with:
          name: deployment-checklist
          path: deployment-checklist.md
          retention-days: 30
