name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'electron/**'
      - 'tests/**'
      - 'scripts/**'
      - 'package.json'
      - 'package-lock.json'
      - 'tsconfig.json'
      - 'vite.config.ts'
      - 'vitest.config.ts'
      - 'playwright.config.ts'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'electron/**'
      - 'tests/**'
      - 'scripts/**'
      - 'package.json'
      - 'package-lock.json'
      - 'tsconfig.json'
      - 'vite.config.ts'
      - 'vitest.config.ts'
      - 'playwright.config.ts'
      - '.github/workflows/ci.yml'
  schedule:
    # 每日晨检 - 每天UTC 02:00 (北京时间10:00)
    - cron: '0 2 * * *'

env:
  NODE_VERSION_MATRIX: '18.x, 20.x, 22.x'
  COVERAGE_THRESHOLD: 90

permissions:
  contents: read
  actions: read

defaults:
  run:
    shell: pwsh

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ==================== 守护自检 ====================
  workflow-guardian:
    name: 🛡️ Workflow Guardian Check
    runs-on: windows-latest
    timeout-minutes: 5
    # P0修复：job级别环境变量确保devDependencies正确安装
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Step
        uses: raven-actions/actionlint@v2
        with:
          actionlint_flags: "-color"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        uses: ./.github/actions/npm-install

      - name: Step
        shell: bash
        run: |
          echo "needs ..."
          node scripts/ci/workflow-guardian.mjs

      - name: Step
        shell: bash
        run: |
          echo "jobs..."
          node scripts/ci/branch-protection-guardian.mjs
        continue-on-error: true # 分支保护检查失败不阻断开发流程，但会记录问题

  # ==================== 质量门禁阶段 ====================
  quality-gates:
    name: Quality Gates Check
    runs-on: windows-latest
    timeout-minutes: 10
    needs: workflow-guardian
    # P0修复：job级别环境变量确保devDependencies正确安装
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        uses: ./.github/actions/npm-install

      - name: Step
        run: npm run lint
        continue-on-error: true

      - name: Step
        run: npm run typecheck

      - name: Step
        run: npm run ci:gate:sentry-up
        timeout-minutes: 2
        continue-on-error: true

      - name: Step
        run: npm run ci:gate:workflow
        timeout-minutes: 2
        continue-on-error: true

  # ==================== 安全扫描阶段 ====================
  # 注意：安全扫描已完全迁移到统一门禁系统 (security-unified.yml)
# Workflow

  # ==================== 稳定名核心作业（必需检查）====================
  unit-tests-core:
    name: Unit Tests (windows-latest, Node 20)
    runs-on: windows-latest
    needs: workflow-guardian
    timeout-minutes: 15
    # P0修复：job级别环境变量确保devDependencies正确安装
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        uses: ./.github/actions/npm-install

      - name: Step
        uses: ./.github/actions/run-tests
        with:
          test-type: coverage
        env:
          NODE_ENV: test
      - name: Step
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-summary
          path: coverage/coverage-summary.json
          retention-days: 14

  coverage-gate:
    name: Coverage Gate
    runs-on: windows-latest
    needs: unit-tests-core
    timeout-minutes: 5
    # P0修复：job级别环境变量确保devDependencies正确安装
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      - name: Install dependencies
        uses: ./.github/actions/npm-install
      - name: Validate
        shell: bash
        run: |
          echo "coverage-config.cjs ..."
          node --check scripts/ci/coverage-config.cjs
          node -e "require('./scripts/ci/coverage-config.cjs'); console.log('✅ 脚本语法和编码验证通过')"
      - name: Step
        uses: actions/download-artifact@v4
        with:
          name: coverage-summary
          path: coverage/
      - name: Step
        run: node scripts/ci/coverage-gate.cjs
        env:
          COVERAGE_MODE: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
          NODE_ENV: ${{ github.ref == 'refs/heads/main' && 'production' || 'test' }}

  build-verification-core:
    name: Build Verification (windows-latest)
    runs-on: windows-latest
    needs: unit-tests-core
    timeout-minutes: 10
    # P0修复：job级别环境变量确保devDependencies正确安装
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      - name: Install dependencies
        uses: ./.github/actions/npm-install
      - name: Build application
        run: npm run build
      - name: Validate
        shell: bash
        run: |
          ls -la dist/
          test -f dist/index.html
          test -d dist/assets/

  release-health-gate:
    name: Release Health Gate
    runs-on: windows-latest
    needs: [unit-tests-core, coverage-gate, electron-security-gate]
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      - name: Install dependencies
        uses: ./.github/actions/npm-install
      - name: Step
        id: sentry_check
        shell: bash
        run: |
          # 检查token是否存在和非空
          if [ -n "${{ secrets.SENTRY_AUTH_TOKEN }}" ]; then
            echo "token_present=true" >> "$GITHUB_OUTPUT"
            echo "Sentry token is present and valid."
          else
            echo "token_present=false" >> "$GITHUB_OUTPUT"
            echo "Sentry token is NOT configured or empty. Sentry steps will be skipped."
          fi
      - name: Step
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG || 'default-org' }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT || 'bc660-desktop' }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SENTRY_ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'prod' || 'staging' }}
          SENTRY_RELEASE: ${{ github.sha }}
        if: steps.sentry_check.outputs.token_present == 'true'
        shell: pwsh
        run: |
          # 按照Sentry官方文档和citest/ciinfo.md要求修复PowerShell错误处理
          $ErrorActionPreference = "Stop"  # 确保外部命令错误被捕获
          
          Write-Host "Sentry..."
          
          # 检查关键环境变量是否存在（如果缺失则跳过而非失败）
          if (-not $env:SENTRY_AUTH_TOKEN) {
            Write-Host "SENTRY_AUTH_TOKENSentry CLI" -ForegroundColor Yellow
            exit 0
          }
          if (-not $env:SENTRY_ORG) {
            Write-Host "SENTRY_ORGSentry CLI" -ForegroundColor Yellow
            exit 0
          }
          if (-not $env:SENTRY_PROJECT) {
            Write-Host "SENTRY_PROJECTSentry CLI" -ForegroundColor Yellow
            exit 0
          }
          
          # 设置详细日志级别
          $env:SENTRY_LOG_LEVEL = "info"
          
          # 安全显示环境变量（隐藏敏感token）
          Write-Host "- ORG:$env:SENTRY_ORG, PROJECT:$env:SENTRY_PROJECT"
          Write-Host "AUTH_TOKEN:$(if($env:SENTRY_AUTH_TOKEN){'[]'}else{'[]'})"
          
          # 执行认证检查 - 使用PowerShell外部命令错误处理最佳实践
          Write-Host "sentry-cli info ..."
          try {
            sentry-cli info
            if ($LASTEXITCODE -ne 0) {
              throw "sentry-cli info 命令失败，退出代码: $LASTEXITCODE"
            }
            Write-Host "Sentry" -ForegroundColor Green
          }
          catch {
            Write-Host "Sentry:$($_.Exception.Message)" -ForegroundColor Red
            Write-Host ":" -ForegroundColor Yellow
            Write-Host "1. SENTRY_AUTH_TOKEN" -ForegroundColor Yellow
            Write-Host "2. SENTRY_ORGSENTRY_PROJECT" -ForegroundColor Yellow
            Write-Host "GitHub SecretsSentry" -ForegroundColor Yellow
            throw
          }
          
          Write-Host "..."
          node scripts/release-health-gate.mjs

      - name: Step
        if: steps.sentry_check.outputs.token_present == 'false'
        shell: bash
        run: |
          echo "SENTRY_AUTH_TOKEN"
          echo "Sentry"
          echo "status=skipped" >> "$GITHUB_OUTPUT"
      - name: Step
        if: ${{ github.event.pull_request.head.repo.fork && failure() }}
        run: 'echo "Fork PR: skipping hard gate due to missing secrets" && exit 0'

  # ==================== Windows单元测试扩展（非必需）====================
  unit-tests-extended:
    name: Unit Tests Extended - Windows Matrix
    runs-on: windows-latest
    needs: quality-gates
    timeout-minutes: 20
    # 仅在代码改动时触发，文档类变更跳过
    if: |
      contains(github.event.head_commit.message, '[skip-extended]') == false &&
      github.event_name != 'schedule'

    strategy:
      fail-fast: false
      matrix:
        node-version: ['18.x', '20.x', '22.x']
        # Windows-focused strategy: single OS, multiple Node versions

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Step
        uses: tj-actions/changed-files@v44
        id: changed-files
        with:
          files: |
            src/**
            tests/**
            *.js
            *.ts
            *.json
            package*.json
            vite.config.*
            tsconfig.json
            *.config.js
            *.config.ts
          files_ignore: |
            docs/**
            *.md
            **/*.md

      - name: Setup Node.js
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: ./.github/actions/npm-install
        with:
          node-version: ${{ matrix.node-version }}

      - name: Step
        if: steps.changed-files.outputs.any_changed == 'true'
        run: npm test
        env:
          NODE_ENV: test

  # ==================== Electron安全门禁（必需）====================
  electron-security-gate:
    name: Electron Security Gate
    runs-on: windows-latest
    needs: quality-gates
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        uses: ./.github/actions/npm-install

      # Windows下无需安装xvfb，Electron可以直接运行
      - name: Validate
        shell: bash
        run: |
          echo "WindowsElectron"
          echo "Runner OS: $RUNNER_OS"
          echo "WindowsxvfbElectron"

      - name: Step
        uses: ./.github/actions/run-tests
        with:
          test-type: security
        env:
          CI: true
          # Windows下无需xvfb，Electron可直接运行

      - name: Step
        shell: bash
        run: |
          echo "Electron..."

          # 预加载脚本安全校验
          if [ -f "scripts/validate-preload-security.mjs" ]; then
            node scripts/validate-preload-security.mjs
          else
            echo ""
          fi

          # CSP一致性校验  
          if [ -f "scripts/validate-csp-consistency.mjs" ]; then
            node scripts/validate-csp-consistency.mjs
          elif [ -f "scripts/scan_electron_safety.mjs" ]; then
            node scripts/scan_electron_safety.mjs
          else
            echo "CSP"
          fi

          echo "Electron"

      - name: Step
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-security-report
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  # ==================== Windows构建验证扩展（非必需）====================
  build-verification-extended:
    name: Build Verification Extended - Windows
    runs-on: windows-latest
    needs: unit-tests-extended
    timeout-minutes: 15
    # 仅在代码改动时触发，文档类变更跳过
    if: |
      contains(github.event.head_commit.message, '[skip-extended]') == false &&
      github.event_name != 'schedule'

    strategy:
      matrix:
        # Windows-focused strategy: simplified matrix
        dummy: [1] # Placeholder for matrix syntax

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Step
        uses: tj-actions/changed-files@v44
        id: changed-files
        with:
          files: |
            src/**
            tests/**
            *.js
            *.ts
            *.json
            package*.json
            vite.config.*
            tsconfig.json
            *.config.js
            *.config.ts
          files_ignore: |
            docs/**
            *.md
            **/*.md

      - name: Setup Node.js
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: ./.github/actions/npm-install
        with:
          node-version: '20.x'

      - name: Build application
        if: steps.changed-files.outputs.any_changed == 'true'
        run: npm run build

      - name: Validate
        if: steps.changed-files.outputs.any_changed == 'true'
        shell: bash
        run: |
          if [ "$RUNNER_OS" = "Windows" ]; then
            ls -la dist/
            test -f dist/index.html
            test -d dist/assets/
          else
            ls -la dist/
            test -f dist/index.html
            test -d dist/assets/
          fi

      - name: Step
        if: steps.changed-files.outputs.any_changed == 'true'
        shell: bash
        run: |
          # TODO: 配置Electron Builder后启用
          echo "Electron -"

  # ==================== 依赖安全审计 ====================
  dependency-audit:
    name: Dependency Security Audit
    runs-on: windows-latest
    needs: quality-gates
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        uses: ./.github/actions/npm-install

      - name: Step
        shell: bash
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          if [ -n "$SNYK_TOKEN" ]; then
            echo "Installing and running Snyk CLI..."
            npm install -g snyk
            snyk test --severity-threshold=high --json > snyk-results.json || true
            echo "Snyk scan completed"
          else
            echo "Skipping Snyk scan (no SNYK_TOKEN)"
          fi

      - name: Step
        shell: bash
        run: |
          npx license-checker --summary
          # TODO: 配置许可证白名单检查

  # ==================== 可观测性验证 ====================
  observability-verification:
    name: Observability Verification
    runs-on: windows-latest
    needs: unit-tests-core
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        uses: ./.github/actions/npm-install

      - name: Validate
        uses: ./.github/actions/run-tests
        with:
          test-type: observability

      - name: Step
        shell: pwsh
        run: |
          # P0修复：Windows runner使用PowerShell目录创建替代Linux mkdir -p
          New-Item -ItemType Directory -Path "reports" -Force
          npm run test:observability > reports/observability-verification.json

      - name: Step
        uses: actions/upload-artifact@v4
        with:
          name: observability-report
          path: reports/
          retention-days: 14

  # ==================== 性能基准测试 ====================
  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: windows-latest
    needs: build-verification-core
    timeout-minutes: 15
    # 仅在代码改动时触发
    if: |
      contains(github.event.head_commit.message, '[skip-perf]') == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        uses: ./.github/actions/npm-install

      - name: Step
        shell: bash
        run: |
          npx tsx scripts/benchmarks/event-loop-latency.ts
          # TODO: 配置性能回归阈值检查

      - name: Step
        shell: bash
        run: |
          # TODO: 集成性能监控指标收集
          echo "-"

  # ==================== 部署就绪检查 ====================
  deployment-readiness:
    name: Deployment Readiness Check
    runs-on: windows-latest
    needs:
      [
        build-verification-core,
        electron-security-gate,
        observability-verification,
      ]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Step
        shell: bash
        run: |
          echo ""
          echo ":"
          echo ":"
          echo ":"
          echo "E2E:"
          echo ":"
          echo ":"
          echo ""
          echo ""

      - name: Step
        shell: bash
        run: |
          {
            echo "-$(date)"
            echo "- [x]"
            echo "- [x]"
            echo "- [x]"
            echo "- [x]"
          } > deployment-checklist.md

      - name: Step
        uses: actions/upload-artifact@v4
        with:
          name: deployment-checklist
          path: deployment-checklist.md
          retention-days: 30
