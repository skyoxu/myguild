name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'electron/**'
      - 'tests/**'
      - 'scripts/**'
      - 'package.json'
      - 'package-lock.json'
      - 'tsconfig.json'
      - 'vite.config.ts'
      - 'vitest.config.ts'
      - 'playwright.config.ts'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'electron/**'
      - 'tests/**'
      - 'scripts/**'
      - 'package.json'
      - 'package-lock.json'
      - 'tsconfig.json'
      - 'vite.config.ts'
      - 'vitest.config.ts'
      - 'playwright.config.ts'
      - '.github/workflows/ci.yml'
  schedule:
    # 每日晨检 - 每天UTC 02:00 (北京时间10:00)
    - cron: '0 2 * * *'

env:
  NODE_VERSION_MATRIX: '18.x, 20.x, 22.x'
  COVERAGE_THRESHOLD: 90

permissions:
  contents: read
  actions: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ==================== 守护自检 ====================
  workflow-guardian:
    name: 🛡️ Workflow Guardian Check
    runs-on: windows-latest
    timeout-minutes: 5
    # P0修复：job级别环境变量确保devDependencies正确安装
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'

    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🔍 Actionlint 工作流语法检查
        uses: rhysd/actionlint-action@v1.7.7
        with:
          fail-on-error: true

      - name: 📦 设置 Node.js (守护脚本)
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 🔧 安装依赖（加固版）
        uses: ./.github/actions/npm-install

      - name: 🔗 Needs 依赖校验
        shell: bash
        run: |
          echo "🔍 校验所有工作流 needs 依赖完整性..."
          node scripts/ci/workflow-guardian.mjs

      - name: 🛡️ 分支保护规则同步检查
        shell: bash
        run: |
          echo "🔍 检查分支保护规则与关键jobs一致性..."
          node scripts/ci/branch-protection-guardian.mjs
        continue-on-error: true # 分支保护检查失败不阻断开发流程，但会记录问题

  # ==================== 质量门禁阶段 ====================
  quality-gates:
    name: Quality Gates Check
    runs-on: windows-latest
    timeout-minutes: 10
    needs: workflow-guardian
    # P0修复：job级别环境变量确保devDependencies正确安装
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'

    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 🔧 安装依赖（加固版）
        uses: ./.github/actions/npm-install

      - name: 🔍 ESLint 检查 (允许警告)
        run: npm run lint
        continue-on-error: true

      - name: 🏗️ TypeScript 编译检查
        run: npm run typecheck

      - name: 📊 可观测性门禁检查
        run: npm run ci:gate:sentry-up
        timeout-minutes: 2
        continue-on-error: true

      - name: 🔧 工作流一致性检查
        run: npm run ci:gate:workflow
        timeout-minutes: 2
        continue-on-error: true

  # ==================== 安全扫描阶段 ====================
  # 注意：安全扫描已完全迁移到统一门禁系统 (security-unified.yml)
  # CI工作流不再包含重复的安全检查jobs，避免状态检查冲突

  # ==================== 稳定名核心作业（必需检查）====================
  unit-tests-core:
    name: Unit Tests (windows-latest, Node 20)
    runs-on: windows-latest
    needs: workflow-guardian
    timeout-minutes: 15
    # P0修复：job级别环境变量确保devDependencies正确安装
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4
      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 🔧 安装依赖（加固版）
        uses: ./.github/actions/npm-install

      - name: 🧪 运行单元测试（覆盖率）
        uses: ./.github/actions/run-tests
        with:
          test-type: coverage
        env:
          NODE_ENV: test
      - name: 📤 上传覆盖率摘要
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-summary
          path: coverage/coverage-summary.json
          retention-days: 7

  coverage-gate:
    name: Coverage Gate
    runs-on: windows-latest
    needs: unit-tests-core
    timeout-minutes: 5
    # P0修复：job级别环境变量确保devDependencies正确安装
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4
      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      - name: 🔧 安装依赖（加固版）
        uses: ./.github/actions/npm-install
      - name: 🔍 Coverage 脚本语法检查 (UTF-8 编码验证)
        shell: bash
        run: |
          echo "🔍 验证 coverage-config.cjs 语法和编码..."
          node --check scripts/ci/coverage-config.cjs
          node -e "require('./scripts/ci/coverage-config.cjs'); console.log('✅ 脚本语法和编码验证通过')"
      - name: 📊 下载覆盖率报告
        uses: actions/download-artifact@v4
        with:
          name: coverage-summary
          path: coverage/
      - name: 🔒 覆盖率门禁检查 (90% 硬门)
        run: node scripts/ci/coverage-gate.cjs
        env:
          COVERAGE_MODE: production
          NODE_ENV: production

  build-verification-core:
    name: Build Verification (windows-latest)
    runs-on: windows-latest
    needs: unit-tests-core
    timeout-minutes: 10
    # P0修复：job级别环境变量确保devDependencies正确安装
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4
      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      - name: 🔧 安装依赖（加固版）
        uses: ./.github/actions/npm-install
      - name: 🏗️ 构建应用
        run: npm run build
      - name: 🔍 验证构建产物
        shell: bash
        run: |
          ls -la dist/
          test -f dist/index.html
          test -d dist/assets/

  release-health-gate:
    name: Release Health Gate
    runs-on: windows-latest
    needs: [unit-tests-core, coverage-gate, electron-security-gate]
    timeout-minutes: 5
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4
      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      - name: 🔧 安装依赖（加固版）
        uses: ./.github/actions/npm-install
      - name: 🔍 验证发布健康度
        if: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: node scripts/release-health-gate.mjs
        env:
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT || 'bc660-desktop' }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'prod' || 'staging' }}
          SENTRY_RELEASE: ${{ github.sha }}

      - name: ⚠️ Release Health Gate跳过（缺少secrets）
        if: ${{ !secrets.SENTRY_AUTH_TOKEN }}
        shell: bash
        run: |
          echo "⚠️ SENTRY_AUTH_TOKEN未配置，跳过发布健康度检查"
          echo "💡 在生产环境中请配置Sentry认证令牌以启用完整的发布健康度验证"
          echo "status=skipped" >> $GITHUB_OUTPUT
      - name: ⚠️ Fork PR降级为警告
        if: ${{ github.event.pull_request.head.repo.fork && failure() }}
        run: 'echo "Fork PR: skipping hard gate due to missing secrets" && exit 0'

  # ==================== Windows单元测试扩展（非必需）====================
  unit-tests-extended:
    name: Unit Tests Extended - Windows Matrix
    runs-on: windows-latest
    needs: quality-gates
    timeout-minutes: 20
    # 仅在代码改动时触发，文档类变更跳过
    if: |
      contains(github.event.head_commit.message, '[skip-extended]') == false &&
      github.event_name != 'schedule'

    strategy:
      fail-fast: false
      matrix:
        node-version: ['18.x', '20.x', '22.x']
        # Windows-focused strategy: single OS, multiple Node versions

    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 检查代码文件变更
        uses: tj-actions/changed-files@v44
        id: changed-files
        with:
          files: |
            src/**
            tests/**
            *.js
            *.ts
            *.json
            package*.json
            vite.config.*
            tsconfig.json
            *.config.js
            *.config.ts
          files_ignore: |
            docs/**
            *.md
            **/*.md

      - name: 📦 设置 Node.js ${{ matrix.node-version }}
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 🔧 安装依赖（加固版）
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: ./.github/actions/npm-install
        with:
          node-version: ${{ matrix.node-version }}

      - name: 🧪 运行单元测试
        if: steps.changed-files.outputs.any_changed == 'true'
        run: npm test
        env:
          NODE_ENV: test

  # ==================== Electron安全门禁（必需）====================
  electron-security-gate:
    name: Electron Security Gate
    runs-on: windows-latest
    needs: quality-gates
    timeout-minutes: 30

    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 🔧 安装依赖（加固版）
        uses: ./.github/actions/npm-install

      # Windows下无需安装xvfb，Electron可以直接运行
      - name: 🖥️ 验证Windows环境支持
        shell: bash
        run: |
          echo "✅ Windows环境下的Electron原生支持"
          echo "Runner OS: $RUNNER_OS"
          echo "Windows下无需xvfb，Electron可直接运行"

      - name: 🛡️ 运行安全冒烟测试 (Windows原生)
        uses: ./.github/actions/run-tests
        with:
          test-type: security
        env:
          CI: true
          # Windows下无需xvfb，Electron可直接运行

      - name: 🔍 Electron安全基线校验
        shell: bash
        run: |
          echo "🔍 执行Electron安全基线静态校验..."

          # 预加载脚本安全校验
          if [ -f "scripts/validate-preload-security.mjs" ]; then
            node scripts/validate-preload-security.mjs
          else
            echo "⚠️ 预加载安全校验脚本不存在，跳过检查"
          fi

          # CSP一致性校验  
          if [ -f "scripts/validate-csp-consistency.mjs" ]; then
            node scripts/validate-csp-consistency.mjs
          elif [ -f "scripts/scan_electron_safety.mjs" ]; then
            node scripts/scan_electron_safety.mjs
          else
            echo "⚠️ CSP校验脚本不存在，跳过检查"
          fi

          echo "✅ Electron安全基线校验完成"

      - name: 📋 上传E2E测试报告
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-security-report
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  # ==================== Windows构建验证扩展（非必需）====================
  build-verification-extended:
    name: Build Verification Extended - Windows
    runs-on: windows-latest
    needs: unit-tests-extended
    timeout-minutes: 15
    # 仅在代码改动时触发，文档类变更跳过
    if: |
      contains(github.event.head_commit.message, '[skip-extended]') == false &&
      github.event_name != 'schedule'

    strategy:
      matrix:
        # Windows-focused strategy: simplified matrix
        dummy: [1] # Placeholder for matrix syntax

    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 检查代码文件变更
        uses: tj-actions/changed-files@v44
        id: changed-files
        with:
          files: |
            src/**
            tests/**
            *.js
            *.ts
            *.json
            package*.json
            vite.config.*
            tsconfig.json
            *.config.js
            *.config.ts
          files_ignore: |
            docs/**
            *.md
            **/*.md

      - name: 📦 设置 Node.js
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 🔧 安装依赖（加固版）
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: ./.github/actions/npm-install
        with:
          node-version: '20.x'

      - name: 🏗️ 构建应用
        if: steps.changed-files.outputs.any_changed == 'true'
        run: npm run build

      - name: 🔍 验证构建产物
        if: steps.changed-files.outputs.any_changed == 'true'
        shell: bash
        run: |
          if [ "$RUNNER_OS" = "Windows" ]; then
            dir dist\
            if not exist "dist\index.html" exit 1
            if not exist "dist\assets\" exit 1
          else
            ls -la dist/
            test -f dist/index.html
            test -d dist/assets/
          fi

      - name: 📦 Electron打包测试 (Windows专注)
        if: steps.changed-files.outputs.any_changed == 'true'
        shell: bash
        run: |
          # TODO: 配置Electron Builder后启用
          echo "Electron打包测试 - 待配置完善"

  # ==================== 依赖安全审计 ====================
  dependency-audit:
    name: Dependency Security Audit
    runs-on: windows-latest
    needs: quality-gates
    timeout-minutes: 10

    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 🔧 安装依赖（加固版）
        uses: ./.github/actions/npm-install

      - name: 🔍 Snyk安全扫描
        uses: snyk/actions/node@v0.4.0
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: 📊 License合规检查
        shell: bash
        run: |
          npx license-checker --summary
          # TODO: 配置许可证白名单检查

  # ==================== 可观测性验证 ====================
  observability-verification:
    name: Observability Verification
    runs-on: windows-latest
    needs: unit-tests-core
    timeout-minutes: 10

    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 🔧 安装依赖（加固版）
        uses: ./.github/actions/npm-install

      - name: 📊 可观测性配置验证
        uses: ./.github/actions/run-tests
        with:
          test-type: observability

      - name: 📈 生成可观测性报告
        shell: pwsh
        run: |
          # P0修复：Windows runner使用PowerShell目录创建替代Linux mkdir -p
          New-Item -ItemType Directory -Path "reports" -Force
          npm run test:observability > reports/observability-verification.json

      - name: 📋 上传可观测性报告
        uses: actions/upload-artifact@v4
        with:
          name: observability-report
          path: reports/
          retention-days: 14

  # ==================== 性能基准测试 ====================
  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: windows-latest
    needs: build-verification-core
    timeout-minutes: 15
    # 仅在代码改动时触发
    if: |
      contains(github.event.head_commit.message, '[skip-perf]') == false

    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 🔧 安装依赖（加固版）
        uses: ./.github/actions/npm-install

      - name: ⚡ 事件循环延迟基准
        shell: bash
        run: |
          node scripts/benchmarks/event-loop-latency.ts
          # TODO: 配置性能回归阈值检查

      - name: 📊 性能指标收集
        shell: bash
        run: |
          # TODO: 集成性能监控指标收集
          echo "性能指标收集 - 待完善"

  # ==================== 部署就绪检查 ====================
  deployment-readiness:
    name: Deployment Readiness Check
    runs-on: windows-latest
    needs:
      [
        build-verification-core,
        electron-security-gate,
        observability-verification,
      ]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 10

    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: ✅ 所有检查通过
        shell: bash
        run: |
          echo "🎉 所有质量门禁检查通过！"
          echo "✅ 代码质量检查: 通过"
          echo "✅ 安全扫描: 通过"
          echo "✅ 单元测试: 通过"
          echo "✅ E2E安全测试: 通过"
          echo "✅ 构建验证: 通过"
          echo "✅ 可观测性验证: 通过"
          echo ""
          echo "🚀 项目已就绪，可以部署！"

      - name: 📊 生成部署清单
        shell: bash
        run: |
          echo "部署清单 - $(date)" > deployment-checklist.md
          echo "- [x] 代码质量检查" >> deployment-checklist.md
          echo "- [x] 安全基线验证" >> deployment-checklist.md
          echo "- [x] 功能测试覆盖" >> deployment-checklist.md
          echo "- [x] 可观测性配置" >> deployment-checklist.md

      - name: 📋 上传部署清单
        uses: actions/upload-artifact@v4
        with:
          name: deployment-checklist
          path: deployment-checklist.md
          retention-days: 30
