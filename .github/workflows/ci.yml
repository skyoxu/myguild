name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # 每日晨检 - 每天UTC 02:00 (北京时间10:00)
    - cron: '0 2 * * *'

env:
  NODE_VERSION_MATRIX: '18.x, 20.x, 22.x'
  COVERAGE_THRESHOLD: 90

jobs:
  # ==================== 质量门禁阶段 ====================
  quality-gates:
    name: 质量门禁检查
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 🔧 安装依赖
        run: npm ci

      - name: 🔍 ESLint 检查
        run: npm run lint

      - name: 🏗️ TypeScript 编译检查
        run: npm run typecheck

      - name: 📊 可观测性门禁检查
        run: npm run ci:gate:sentry-up
        timeout-minutes: 2

  # ==================== 安全扫描阶段 ====================
  # 注意：安全扫描已完全迁移到统一门禁系统 (security-unified.yml)
  # CI工作流不再包含重复的安全检查jobs，避免状态检查冲突

  # ==================== 稳定名核心作业（必需检查）====================
  unit-tests-core:
    name: Unit Tests (ubuntu-latest, Node 20)
    runs-on: ubuntu-latest
    needs: quality-gates
    timeout-minutes: 15
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4
      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      - name: 🔧 安装依赖
        run: npm ci
      - name: 🧪 运行单元测试（覆盖率）
        run: npm run test:coverage
        env:
          NODE_ENV: test
      - name: 📤 上传覆盖率摘要
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-summary
          path: coverage/coverage-summary.json
          retention-days: 7

  coverage-gate:
    name: Coverage Gate
    runs-on: ubuntu-latest
    needs: unit-tests-core
    timeout-minutes: 5
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4
      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      - name: 🔧 安装依赖
        run: npm ci
      - name: 🔒 覆盖率门禁检查
        run: node scripts/ci/coverage-gate.js

  build-verification-core:
    name: Build Verification (ubuntu-latest)
    runs-on: ubuntu-latest
    needs: unit-tests-core
    timeout-minutes: 10
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4
      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      - name: 🔧 安装依赖
        run: npm ci
      - name: 🏗️ 构建应用
        run: npm run build
      - name: 🔍 验证构建产物
        run: |
          ls -la dist/
          test -f dist/index.html
          test -d dist/assets/

  release-health-gate:
    name: Release Health Gate
    runs-on: ubuntu-latest
    needs: [unit-tests-core, coverage-gate]
    timeout-minutes: 5
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4
      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      - name: 🔧 安装依赖
        run: npm ci
      - name: 🔍 验证发布健康度
        run: node scripts/release-health-gate.mjs
        env:
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT || 'bc660-desktop' }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SENTRY_ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'prod' || 'staging' }}
          SENTRY_RELEASE: ${{ github.sha }}
      - name: ⚠️ Fork PR降级为警告
        if: ${{ github.event.pull_request.head.repo.fork && failure() }}
        run: 'echo "Fork PR: skipping hard gate due to missing secrets" && exit 0'

  # ==================== 多平台单元测试扩展（非必需）====================
  unit-tests-extended:
    name: 单元测试扩展 (${{ matrix.os }}, Node ${{ matrix.node-version }})
    runs-on: ${{ matrix.os }}
    needs: quality-gates
    timeout-minutes: 20

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['18.x', '20.x', '22.x']

    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 设置 Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 🔧 安装依赖
        run: npm ci

      - name: 🧪 运行单元测试
        run: npm test
        env:
          NODE_ENV: test

  # ==================== E2E安全测试 ====================
  e2e-security-tests:
    name: E2E安全测试
    runs-on: ubuntu-latest
    needs: quality-gates
    timeout-minutes: 30

    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 🔧 安装依赖
        run: npm ci

      - name: 🖥️ 安装系统依赖 (Electron)
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb

      - name: 🛡️ 运行安全冒烟测试
        run: xvfb-run -a npm run test:e2e:security
        env:
          CI: true

      - name: 📋 上传E2E测试报告
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-security-report
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  # ==================== 构建验证扩展（非必需）====================
  build-verification-extended:
    name: 构建验证扩展 (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: unit-tests-extended
    timeout-minutes: 15

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 🔧 安装依赖
        run: npm ci

      - name: 🏗️ 构建应用
        run: npm run build

      - name: 🔍 验证构建产物
        run: |
          if [ "$RUNNER_OS" = "Windows" ]; then
            dir dist\
            if not exist "dist\index.html" exit 1
            if not exist "dist\assets\" exit 1
          else
            ls -la dist/
            test -f dist/index.html
            test -d dist/assets/
          fi

      - name: 📦 Electron打包测试 (仅Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          # TODO: 配置Electron Builder后启用
          echo "Electron打包测试 - 待配置完善"

  # ==================== 依赖安全审计 ====================
  dependency-audit:
    name: 依赖安全审计
    runs-on: ubuntu-latest
    needs: quality-gates
    timeout-minutes: 10

    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 🔧 安装依赖
        run: npm ci

      - name: 🔍 Snyk安全扫描
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: 📊 License合规检查
        run: |
          npx license-checker --summary
          # TODO: 配置许可证白名单检查

  # ==================== 可观测性验证 ====================
  observability-verification:
    name: 可观测性验证
    runs-on: ubuntu-latest
    needs: unit-tests
    timeout-minutes: 10

    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 🔧 安装依赖
        run: npm ci

      - name: 📊 可观测性配置验证
        run: npm run test:observability

      - name: 📈 生成可观测性报告
        run: |
          mkdir -p reports
          npm run test:observability > reports/observability-verification.json

      - name: 📋 上传可观测性报告
        uses: actions/upload-artifact@v4
        with:
          name: observability-report
          path: reports/
          retention-days: 7

  # ==================== 性能基准测试 ====================
  performance-benchmarks:
    name: 性能基准测试
    runs-on: ubuntu-latest
    needs: build-verification-core
    timeout-minutes: 15

    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 🔧 安装依赖
        run: npm ci

      - name: ⚡ 事件循环延迟基准
        run: |
          node scripts/benchmarks/event-loop-latency.ts
          # TODO: 配置性能回归阈值检查

      - name: 📊 性能指标收集
        run: |
          # TODO: 集成性能监控指标收集
          echo "性能指标收集 - 待完善"

  # ==================== 部署就绪检查 ====================
  deployment-readiness:
    name: 部署就绪检查
    runs-on: ubuntu-latest
    needs:
      [build-verification-core, e2e-security-tests, observability-verification]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 10

    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: ✅ 所有检查通过
        run: |
          echo "🎉 所有质量门禁检查通过！"
          echo "✅ 代码质量检查: 通过"
          echo "✅ 安全扫描: 通过"
          echo "✅ 单元测试: 通过"
          echo "✅ E2E安全测试: 通过"
          echo "✅ 构建验证: 通过"
          echo "✅ 可观测性验证: 通过"
          echo ""
          echo "🚀 项目已就绪，可以部署！"

      - name: 📊 生成部署清单
        run: |
          echo "部署清单 - $(date)" > deployment-checklist.md
          echo "- [x] 代码质量检查" >> deployment-checklist.md
          echo "- [x] 安全基线验证" >> deployment-checklist.md
          echo "- [x] 功能测试覆盖" >> deployment-checklist.md
          echo "- [x] 可观测性配置" >> deployment-checklist.md

      - name: 📋 上传部署清单
        uses: actions/upload-artifact@v4
        with:
          name: deployment-checklist
          path: deployment-checklist.md
          retention-days: 90

# ==================== 并发控制 ====================
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
