name: Release Preparation - 鍙戝竷鍑嗗

permissions:
  contents: write
  actions: read

defaults:
  run:
    shell: pwsh

on:
  workflow_dispatch:
    inputs:
      version:
        description: '鍙戝竷鐗堟湰鍙?(璇箟鍖栫増鏈?'
        required: true
        type: string
      artifact_path:
        description: '搴旂敤鏂囦欢璺緞'
        required: false
        type: string
        default: 'dist/app.exe'
      create_feeds:
        description: '鍒涘缓鎵€鏈夊钩鍙扮殑 feed 鏂囦欢'
        required: false
        type: boolean
        default: true

env:
  SENTRY_ORG: ${{ vars.SENTRY_ORG || 'your-org' }}
  SENTRY_PROJECT: ${{ vars.SENTRY_PROJECT || 'vitegame' }}

# ==================== 骞跺彂鎺у埗 ====================
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false # 鍙戝竷鍑嗗涓嶅彲涓柇

jobs:
  prepare:
    runs-on: windows-latest
    # P0淇锛歫ob绾у埆鐜鍙橀噺纭繚devDependencies姝ｇ‘瀹夎
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'
    timeout-minutes: 10
    permissions:
      contents: write

    steps:
      - name: Step
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Step
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Step
        uses: ./.github/actions/npm-install
        env:
          NPM_CONFIG_PRODUCTION: 'true'

      - name: Step
        shell: pwsh
        run: |
          # P0淇锛歐indows runner浣跨敤PowerShell鍖呯鐞嗘浛浠inux apt-get
          if (-not (Get-Command jq -ErrorAction SilentlyContinue)) {
            Write-Host "Installing jq tool..."
            if (Get-Command choco -ErrorAction SilentlyContinue) {
              choco install jq -y --no-progress
            } else {
              Write-Host "Chocolatey not available, trying winget..."
              winget install stedolan.jq --accept-source-agreements --accept-package-agreements
            }
          } else {
            Write-Host "jq already available"
          }

      - name: 'Validate version format'
        shell: bash
        run: |
          version="${{ inputs.version }}"
          if ! echo "$version" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$'; then
            echo "?Invalid version format:$version"
            echo "Expected semantic version (e.g., 1.2.3, 1.2.3-beta.1)"
            exit 1
          fi
          echo "?Version format valid:$version"

      - name: Step
        id: manifest
        shell: bash
        run: |
          artifact_path="${{ inputs.artifact_path }}"

          # Check if file exists (only in non-test mode)
          if [ -f "$artifact_path" ]; then
            echo "Adding ${{ inputs.version }} to manifest..."

            result=$(node scripts/release/manage-manifest.mjs add \
              --version="${{ inputs.version }}" \
              --path="$artifact_path" \
              --manifest="artifacts/manifest.json")

            echo "manifest_result=$result" >> "$GITHUB_OUTPUT"
            echo "Manifest updated successfully"
            echo "$result" | jq '.'
          else
            echo "Artifact not found: $artifact_path"
            echo "Creating test placeholder entry..."

            # Create test placeholder entry
            mkdir -p artifacts
            if [ ! -f "artifacts/manifest.json" ]; then
              echo '{}' > artifacts/manifest.json
            fi
            
            # Simulate adding version data
            cat > temp_version.json << EOF
          {
            "path": "$(basename "$artifact_path")",
            "sha512": "sha512-placeholder-hash-for-testing",
            "size": 52428800,
            "releaseDate": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)",
            "files": [
              {
                "url": "$(basename "$artifact_path")",
                "sha512": "sha512-placeholder-hash-for-testing", 
                "size": 52428800
              }
            ]
          }
          EOF
            
            # Merge to manifest - safe JSON file reading to avoid SC2086
            data_content=$(cat temp_version.json)
            jq --arg version "${{ inputs.version }}" \
               --argjson data "$data_content" \
               '.[$version] = $data' artifacts/manifest.json > temp_manifest.json
            mv temp_manifest.json artifacts/manifest.json
            rm temp_version.json
            
            echo "manifest_result={\"ok\":true,\"version\":\"${{ inputs.version }}\",\"test_mode\":true}" >> "$GITHUB_OUTPUT"
            echo "✅ Placeholder version entry created successfully"
          fi

      - name: Step
        if: inputs.create_feeds
        shell: bash
        run: |
          version="${{ inputs.version }}"

          echo "electron-updater feed ..."

          # 纭繚 dist 鐩綍瀛樺湪
          mkdir -p dist

          # 浠庢竻鍗曡幏鍙栫増鏈暟鎹?          version_data=$(jq -r --arg version "$version" '.[$version]' artifacts/manifest.json)

          if [ "$version_data" = "null" ]; then
            echo "❌ Version $version not found in manifest"
            exit 1
          fi

          # Extract version information
          path=$(echo "$version_data" | jq -r '.path')
          sha512=$(echo "$version_data" | jq -r '.sha512')
          size=$(echo "$version_data" | jq -r '.size')
          release_date=$(echo "$version_data" | jq -r '.releaseDate')

          # 鍒涘缓鍩虹 feed 鍐呭
          create_feed() {
            local platform=$1
            local feed_file="dist/latest${platform:+-$platform}.yml"
            
            cat > "$feed_file" << EOF
          version: $version
          files:
            - url: $path
              sha512: $sha512
              size: $size
          path: $path
          sha512: $sha512
          releaseDate: '$release_date'
          stagingPercentage: 0
          size: $size
          EOF
            
            echo "Created feed file: $feed_file"
          }

          # Create feeds for each platform
          create_feed ""        # latest.yml (Windows)
          # Windows-only: removed macOS/Linux feeds

          echo "Feed files created successfully"

      - name: Step
        run: |
          echo "Validating manifest..."
          node scripts/release/manage-manifest.mjs validate
          echo "Validation completed successfully"

      - name: Step
        shell: bash
        run: |
          # Ensure UTF-8 encoding output
          export LANG=C.UTF-8
          export LC_ALL=C.UTF-8
          # Use single redirection to optimize performance (fix SC2129)
          {
            echo "## Release Preparation Summary"
            echo ""
            echo "| Property | Value |"
            echo "|----------|-------|"
            echo "| Version | ${{ inputs.version }} |"
            echo "| Artifact Path | ${{ inputs.artifact_path }} |"
            echo "| Feed |${{ inputs.create_feeds && '✅ Yes' || '❌ No' }} |"
            echo ""
            echo "### 📋 Version Manifest Status"
            echo "\`\`\`json"
            node scripts/release/manage-manifest.mjs list | jq '.'
            echo "\`\`\`"
          } >> "$GITHUB_STEP_SUMMARY"

          if [ "${{ inputs.create_feeds }}" = "true" ]; then
            {
              echo ""
              echo "### 📁 Feed Files Created"
              echo "- \`dist/latest.yml\` (Windows)"
              echo "- \`dist/latest-mac.yml\` (macOS)"  
              echo "- \`dist/latest-linux.yml\` (Linux)"
            } >> "$GITHUB_STEP_SUMMARY"
          fi

          {
            echo ""
            echo "### 🔄 Next Steps"
            echo "1. Run **Release Ramp** workflow to begin gradual rollout"
            echo "2. Rollout: 5% → 25% → 50% → 100%"
            echo "3. Each stage will automatically perform health checks"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Step
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Check if there are changes
          if git diff --quiet && git diff --cached --quiet; then
            echo "🔵 No changes need to be committed"
            exit 0
          fi

          # Commit changes
          git add artifacts/manifest.json
          if [ "${{ inputs.create_feeds }}" = "true" ]; then
            git add dist/latest*.yml
          fi

          git commit -m "🚀 Release preparation: v${{ inputs.version }}" \
            -m "Version: ${{ inputs.version }}" \
            -m "Artifact: ${{ inputs.artifact_path }}" \
            -m "Feed files: ${{ inputs.create_feeds }}" \
            -m "" \
            -m "🤖 Generated by GitHub Actions" \
            -m "Workflow: ${{ github.workflow }}" \
            -m "Run: ${{ github.run_number }}"

          echo "✅ Changes committed successfully"

      - name: Step
        run: |
          echo "Validating manifest..."
          git push origin ${{ github.ref }}
          echo "Validation completed successfully"

