name: Release Preparation - 发布准备

on:
  workflow_dispatch:
    inputs:
      version:
        description: "发布版本号 (语义化版本)"
        required: true
        type: string
      artifact_path:
        description: "应用文件路径"
        required: false
        type: string
        default: "dist/app.exe"
      create_feeds:
        description: "创建所有平台的 feed 文件"
        required: false
        type: boolean
        default: true

env:
  SENTRY_ORG: ${{ vars.SENTRY_ORG || 'your-org' }}
  SENTRY_PROJECT: ${{ vars.SENTRY_PROJECT || 'vitegame' }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write
    
    steps:
      - name: "🚀 Checkout repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: "📦 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: "🔧 Install dependencies"
        run: npm ci --only=production
      
      - name: "✅ Validate version format"
        run: |
          version="${{ inputs.version }}"
          if ! echo "$version" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$'; then
            echo "❌ Invalid version format: $version"
            echo "Expected semantic version (e.g., 1.2.3, 1.2.3-beta.1)"
            exit 1
          fi
          echo "✅ Version format valid: $version"
      
      - name: "📋 Add version to manifest"
        id: manifest
        run: |
          artifact_path="${{ inputs.artifact_path }}"
          
          # 检查文件是否存在（仅在非测试模式下）
          if [ "${{ github.event_name }}" != "workflow_dispatch" ] || [ -f "$artifact_path" ]; then
            echo "📦 添加版本 ${{ inputs.version }} 到清单..."
            
            result=$(node scripts/release/manage-manifest.mjs add \
              --version="${{ inputs.version }}" \
              --path="$artifact_path" \
              --manifest="artifacts/manifest.json")
            
            echo "manifest_result=$result" >> $GITHUB_OUTPUT
            echo "✅ 版本已添加到清单"
            echo "$result" | jq '.'
          else
            echo "⚠️  应用文件不存在: $artifact_path"
            echo "创建占位清单条目用于测试..."
            
            # 创建测试占位条目
            mkdir -p artifacts
            if [ ! -f "artifacts/manifest.json" ]; then
              echo '{}' > artifacts/manifest.json
            fi
            
            # 模拟添加版本数据
            cat > temp_version.json << EOF
          {
            "path": "$(basename "$artifact_path")",
            "sha512": "sha512-placeholder-hash-for-testing",
            "size": 52428800,
            "releaseDate": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)",
            "files": [
              {
                "url": "$(basename "$artifact_path")",
                "sha512": "sha512-placeholder-hash-for-testing", 
                "size": 52428800
              }
            ]
          }
          EOF
            
            # 合并到清单
            jq --arg version "${{ inputs.version }}" \
               --argjson data "$(cat temp_version.json)" \
               '.[$version] = $data' artifacts/manifest.json > temp_manifest.json
            mv temp_manifest.json artifacts/manifest.json
            rm temp_version.json
            
            echo "manifest_result={\"ok\":true,\"version\":\"${{ inputs.version }}\",\"test_mode\":true}" >> $GITHUB_OUTPUT
            echo "✅ 占位版本条目已创建"
          fi
      
      - name: "📄 Create feed files"
        if: inputs.create_feeds
        run: |
          version="${{ inputs.version }}"
          artifact_name="$(basename "${{ inputs.artifact_path }}")"
          
          echo "📄 创建 electron-updater feed 文件..."
          
          # 确保 dist 目录存在
          mkdir -p dist
          
          # 从清单获取版本数据
          version_data=$(jq -r --arg version "$version" '.[$version]' artifacts/manifest.json)
          
          if [ "$version_data" = "null" ]; then
            echo "❌ 版本 $version 在清单中不存在"
            exit 1
          fi
          
          # 提取版本信息
          path=$(echo "$version_data" | jq -r '.path')
          sha512=$(echo "$version_data" | jq -r '.sha512')
          size=$(echo "$version_data" | jq -r '.size')
          release_date=$(echo "$version_data" | jq -r '.releaseDate')
          
          # 创建基础 feed 内容
          create_feed() {
            local platform=$1
            local feed_file="dist/latest${platform:+-$platform}.yml"
            
            cat > "$feed_file" << EOF
          version: $version
          files:
            - url: $path
              sha512: $sha512
              size: $size
          path: $path
          sha512: $sha512
          releaseDate: '$release_date'
          stagingPercentage: 0
          size: $size
          EOF
            
            echo "✅ 创建 $feed_file"
          }
          
          # 创建各平台 feed 文件
          create_feed ""        # latest.yml (Windows)
          create_feed "mac"     # latest-mac.yml
          create_feed "linux"   # latest-linux.yml
          
          echo "📄 所有 feed 文件创建完成"
      
      - name: "🔍 Validate manifest"
        run: |
          echo "🔍 验证版本清单格式..."
          node scripts/release/manage-manifest.mjs validate
          echo "✅ 清单验证通过"
      
      - name: "📊 Display preparation summary"
        run: |
          echo "## 📦 发布准备完成" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 项目 | 值 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| 版本 | \`${{ inputs.version }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 应用文件 | \`${{ inputs.artifact_path }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 创建 Feed 文件 | ${{ inputs.create_feeds && '✅ 是' || '❌ 否' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📋 版本清单状态" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          node scripts/release/manage-manifest.mjs list | jq '.' >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ inputs.create_feeds }}" = "true" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📄 创建的 Feed 文件" >> $GITHUB_STEP_SUMMARY
            echo "- \`dist/latest.yml\` (Windows)" >> $GITHUB_STEP_SUMMARY
            echo "- \`dist/latest-mac.yml\` (macOS)" >> $GITHUB_STEP_SUMMARY  
            echo "- \`dist/latest-linux.yml\` (Linux)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 下一步" >> $GITHUB_STEP_SUMMARY
          echo "1. 运行 **Release Ramp** 工作流开始渐进发布" >> $GITHUB_STEP_SUMMARY
          echo "2. 从 5% → 25% → 50% → 100% 逐步放量" >> $GITHUB_STEP_SUMMARY
          echo "3. 每个阶段都会自动进行健康度检查" >> $GITHUB_STEP_SUMMARY
      
      - name: "💾 Commit changes"
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # 检查是否有变更
          if git diff --quiet && git diff --cached --quiet; then
            echo "📝 无变更需要提交"
            exit 0
          fi
          
          # 提交变更
          git add artifacts/manifest.json
          if [ "${{ inputs.create_feeds }}" = "true" ]; then
            git add dist/latest*.yml
          fi
          
          git commit -m "📦 Release preparation: v${{ inputs.version }}" \
            -m "Version: ${{ inputs.version }}" \
            -m "Artifact: ${{ inputs.artifact_path }}" \
            -m "Feed files: ${{ inputs.create_feeds }}" \
            -m "" \
            -m "🤖 Generated by GitHub Actions" \
            -m "Workflow: ${{ github.workflow }}" \
            -m "Run: ${{ github.run_number }}"
          
          echo "✅ 变更已提交"
      
      - name: "🚀 Push changes"
        run: |
          echo "📤 推送变更到远程仓库..."
          git push origin ${{ github.ref }}
          echo "✅ 发布准备完成"