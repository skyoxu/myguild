name: Emergency Rollback - Á¥ßÊÄ•ÂõûÊªö

# ÊúÄÂ∞èÊùÉÈôêÂéüÂàô
permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      reason:
        description: 'ÂõûÊªöÂéüÂõ†'
        required: true
        type: string
        default: 'Emergency rollback requested'
      target_version:
        description: 'ÂõûÊªöÂà∞ÁöÑÁõÆÊ†áÁâàÊú¨ÔºàÁïôÁ©∫‰ΩøÁî®ÁéØÂ¢ÉÂèòÈáèÔºâ'
        required: false
        type: string
      feed_files:
        description: 'Ë¶ÅÂõûÊªöÁöÑ feed Êñá‰ª∂'
        required: false
        type: choice
        options:
          [
            'all',
            'dist/latest.yml',
            'dist/latest-mac.yml',
            'dist/latest-linux.yml',
          ]
        default: 'all'
      triggered_by:
        description: 'Ëß¶ÂèëËÄÖÔºàÂÜÖÈÉ®‰ΩøÁî®Ôºâ'
        required: false
        type: string
        default: 'manual'

env:
  PREV_GA_VERSION: ${{ inputs.target_version || vars.PREV_GA_VERSION || '0.0.9' }}
  WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}

# ==================== Âπ∂ÂèëÊéßÂà∂ ====================
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false # Á¥ßÊÄ•ÂõûÊªö‰∏çÂèØ‰∏≠Êñ≠

jobs:
  emergency_rollback:
    runs-on: windows-latest
    # P0‰øÆÂ§çÔºöjobÁ∫ßÂà´ÁéØÂ¢ÉÂèòÈáèÁ°Æ‰øùdevDependenciesÊ≠£Á°ÆÂÆâË£Ö
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'
    timeout-minutes: 10
    permissions:
      contents: write
      actions: write
    environment:
      name: production
      # ÂèØÈÄâÔºöÈúÄË¶ÅÊâπÂáÜÊâçËÉΩÊâßË°åÁ¥ßÊÄ•ÂõûÊªö

    steps:
      - name: 'üö® Emergency rollback initiated'
        run: |
          echo "üö®üö®üö® Á¥ßÊÄ•ÂõûÊªöÂ∑≤ÂêØÂä® üö®üö®üö®"
          echo "üìã ÂõûÊªö‰ø°ÊÅØ:"
          echo "  - ÂéüÂõ†: ${{ inputs.reason }}"
          echo "  - ÁõÆÊ†áÁâàÊú¨: $PREV_GA_VERSION"
          echo "  - Feed Êñá‰ª∂: ${{ inputs.feed_files }}"
          echo "  - Ëß¶ÂèëËÄÖ: ${{ inputs.triggered_by }}"

      - name: 'üöÄ Checkout repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'üì¶ Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 'üîß Install dependencies'
        uses: ./.github/actions/npm-install
        env:
          NPM_CONFIG_PRODUCTION: 'true'

      - name: 'üõ†Ô∏è Install system tools'
        shell: pwsh
        run: |
          # P0‰øÆÂ§çÔºöWindows runner‰ΩøÁî®PowerShellÂåÖÁÆ°ÁêÜÊõø‰ª£Linux apt-get
          if (-not (Get-Command jq -ErrorAction SilentlyContinue)) {
            Write-Host "Installing jq tool..."
            if (Get-Command choco -ErrorAction SilentlyContinue) {
              choco install jq -y --no-progress
            } else {
              Write-Host "Chocolatey not available, trying winget..."
              winget install stedolan.jq --accept-source-agreements --accept-package-agreements
            }
          } else {
            Write-Host "jq already available"
          }

      - name: 'üîç Pre-rollback validation'
        run: |
          echo "üîç È™åËØÅÂõûÊªöÂâçÊèêÊù°‰ª∂..."

          # È™åËØÅÁâàÊú¨Ê∏ÖÂçï
          if [ ! -f "artifacts/manifest.json" ]; then
            echo "‚ùå ÁâàÊú¨Ê∏ÖÂçïÊñá‰ª∂‰∏çÂ≠òÂú®"
            exit 1
          fi

          # È™åËØÅÁõÆÊ†áÁâàÊú¨Âú®Ê∏ÖÂçï‰∏≠Â≠òÂú®
          if ! jq -e --arg version "$PREV_GA_VERSION" '.[$version]' artifacts/manifest.json > /dev/null; then
            echo "‚ùå ÁõÆÊ†áÁâàÊú¨ $PREV_GA_VERSION ‰∏çÂú®ÁâàÊú¨Ê∏ÖÂçï‰∏≠"
            echo "ÂèØÁî®ÁâàÊú¨:"
            jq -r 'keys[]' artifacts/manifest.json
            exit 1
          fi

          echo "‚úÖ ÂõûÊªöÂâçÈ™åËØÅÈÄöËøá"
          echo "üì¶ ÁõÆÊ†áÁâàÊú¨: $PREV_GA_VERSION"

      - name: 'üö® Execute rollback for all feeds'
        if: inputs.feed_files == 'all'
        id: rollback_all
        run: |
          echo "üö® ÂØπÊâÄÊúâ feed Êñá‰ª∂ÊâßË°åÁ¥ßÊÄ•ÂõûÊªö..."

          rollback_results="[]"

          for feed_file in "dist/latest.yml" "dist/latest-mac.yml" "dist/latest-linux.yml"; do
            if [ -f "$feed_file" ]; then
              echo "üîÑ ÂõûÊªö $feed_file..."
              
              set +e
              result=$(node scripts/release/execute-rollback.mjs \
                --feed="$feed_file" \
                --previous-version="$PREV_GA_VERSION" \
                --manifest="artifacts/manifest.json" \
                --reason="${{ inputs.reason }}" \
                $([ -n "$WEBHOOK_URL" ] && echo "--notify"))
              rollback_exit_code=$?
              set -e
              
              if [ $rollback_exit_code -eq 0 ]; then
                echo "‚úÖ $feed_file ÂõûÊªöÊàêÂäü"
                rollback_results=$(echo "$rollback_results" | jq --argjson item "{\"feed\": \"$feed_file\", \"success\": true, \"result\": $result}" '. + [$item]')
              else
                echo "‚ùå $feed_file ÂõûÊªöÂ§±Ë¥• (ÈÄÄÂá∫Á†Å: $rollback_exit_code)"
                rollback_results=$(echo "$rollback_results" | jq --argjson item "{\"feed\": \"$feed_file\", \"success\": false, \"error\": \"Exit code $rollback_exit_code\"}" '. + [$item]')
              fi
            else
              echo "‚è≠Ô∏è $feed_file ‰∏çÂ≠òÂú®ÔºåË∑≥Ëøá"
              rollback_results=$(echo "$rollback_results" | jq --argjson item "{\"feed\": \"$feed_file\", \"success\": true, \"skipped\": true}" '. + [$item]')
            fi
          done

          echo "rollback_results=$rollback_results" >> $GITHUB_OUTPUT
          echo "üö® ÊâÄÊúâ feed Êñá‰ª∂ÂõûÊªöÊìç‰ΩúÂÆåÊàê"

      - name: 'üö® Execute rollback for single feed'
        if: inputs.feed_files != 'all'
        id: rollback_single
        run: |
          feed_file="${{ inputs.feed_files }}"
          echo "üö® ÂØπ $feed_file ÊâßË°åÁ¥ßÊÄ•ÂõûÊªö..."

          if [ ! -f "$feed_file" ]; then
            echo "‚ùå Feed Êñá‰ª∂‰∏çÂ≠òÂú®: $feed_file"
            exit 1
          fi

          result=$(node scripts/release/execute-rollback.mjs \
            --feed="$feed_file" \
            --previous-version="$PREV_GA_VERSION" \
            --manifest="artifacts/manifest.json" \
            --reason="${{ inputs.reason }}" \
            $([ -n "$WEBHOOK_URL" ] && echo "--notify"))

          echo "rollback_result=$result" >> $GITHUB_OUTPUT
          echo "‚úÖ $feed_file Á¥ßÊÄ•ÂõûÊªöÂÆåÊàê"

      - name: 'üõë Stop all running release workflows'
        run: |
          echo "üõë ÂÅúÊ≠¢ÊâÄÊúâÊ≠£Âú®ËøêË°åÁöÑÂèëÂ∏ÉÁõ∏ÂÖ≥Â∑•‰ΩúÊµÅ..."

          # Ëé∑ÂèñÂΩìÂâçËøêË°åÁöÑÂ∑•‰ΩúÊµÅ
          running_workflows=$(gh run list \
            --repo ${{ github.repository }} \
            --status in_progress \
            --workflow "Release Ramp" \
            --json databaseId,headBranch \
            --jq '.[].databaseId')

          if [ -n "$running_workflows" ]; then
            echo "ÂèëÁé∞Ê≠£Âú®ËøêË°åÁöÑÂèëÂ∏ÉÂ∑•‰ΩúÊµÅÔºåÊ≠£Âú®ÂèñÊ∂à..."
            for run_id in $running_workflows; do
              echo "ÂèñÊ∂àÂ∑•‰ΩúÊµÅËøêË°å: $run_id"
              gh run cancel $run_id --repo ${{ github.repository }} || echo "ÂèñÊ∂àÂ§±Ë¥• (ÈùûÂÖ≥ÈîÆ)"
            done
          else
            echo "Êó†Ê≠£Âú®ËøêË°åÁöÑÂèëÂ∏ÉÂ∑•‰ΩúÊµÅ"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 'üìß Send emergency notification'
        if: always()
        env:
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
        run: |
          if [ -z "$WEBHOOK_URL" ]; then
            echo "‚ö†Ô∏è  WEBHOOK_URL Êú™ÈÖçÁΩÆÔºåË∑≥ËøáÈÄöÁü•"
            exit 0
          fi

          echo "üìß ÂèëÈÄÅÁ¥ßÊÄ•ÂõûÊªöÈÄöÁü•..."

          # ÊûÑÂª∫ÈÄöÁü•Ê∂àÊÅØ
          if [ "${{ steps.rollback_all.outcome }}" = "success" ] || [ "${{ steps.rollback_single.outcome }}" = "success" ]; then
            status="üö® Emergency Rollback Completed"
            color="warning"
            message="Emergency rollback to version $PREV_GA_VERSION has been executed successfully."
          else
            status="üö® Emergency Rollback Failed"
            color="danger"
            message="Emergency rollback attempt failed. Manual intervention required."
          fi

          curl -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d "{
              \"text\": \"$status\",
              \"attachments\": [{
                \"color\": \"$color\",
                \"fields\": [
                  {\"title\": \"Target Version\", \"value\": \"$PREV_GA_VERSION\", \"short\": true},
                  {\"title\": \"Feed Files\", \"value\": \"${{ inputs.feed_files }}\", \"short\": true},
                  {\"title\": \"Triggered By\", \"value\": \"${{ inputs.triggered_by }}\", \"short\": true},
                  {\"title\": \"Repository\", \"value\": \"${{ github.repository }}\", \"short\": true},
                  {\"title\": \"Reason\", \"value\": \"${{ inputs.reason }}\", \"short\": false}
                ],
                \"text\": \"$message\"
              }]
            }" || echo "Webhook notification failed (non-critical)"

      - name: 'üíæ Commit rollback changes'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Ê£ÄÊü•ÊòØÂê¶ÊúâÂèòÊõ¥
          if git diff --quiet; then
            echo "üìù Êó†ÂèòÊõ¥ÈúÄË¶ÅÊèê‰∫§"
            exit 0
          fi

          # Êèê‰∫§Á¥ßÊÄ•ÂõûÊªöÂèòÊõ¥
          git add dist/latest*.yml 2>/dev/null || true

          if ! git diff --cached --quiet; then
            git commit -m "üö® EMERGENCY ROLLBACK: v$PREV_GA_VERSION" \
              -m "Reason: ${{ inputs.reason }}" \
              -m "Triggered by: ${{ inputs.triggered_by }}" \
              -m "Feed files: ${{ inputs.feed_files }}" \
              -m "" \
              -m "‚ö†Ô∏è  CRITICAL: Production rollback executed" \
              -m "ü§ñ Automated emergency response" \
              -m "Workflow: ${{ github.workflow }}" \
              -m "Run: ${{ github.run_number }}"
            
            echo "‚úÖ Á¥ßÊÄ•ÂõûÊªöÂèòÊõ¥Â∑≤Êèê‰∫§"
          fi

      - name: 'üöÄ Push emergency changes'
        run: |
          echo "üì§ Êé®ÈÄÅÁ¥ßÊÄ•ÂõûÊªöÂèòÊõ¥..."
          git push origin ${{ github.ref }}
          echo "‚úÖ Á¥ßÊÄ•ÂõûÊªöÂÆåÊàêÂπ∂Â∑≤Êé®ÈÄÅ"

      - name: 'üìã Emergency rollback summary'
        if: always()
        shell: bash
        run: |
          # Á°Æ‰øùUTF-8ÁºñÁ†ÅËæìÂá∫
          export LANG=C.UTF-8
          export LC_ALL=C.UTF-8

          # ‰ΩøÁî®heredocÊ®°Âºè‰ª•Á°Æ‰øùWindowsÂÖºÂÆπUTF-8ÁºñÁ†Å
          cat >> "$GITHUB_STEP_SUMMARY" << 'EOF'
          ## üö® Á¥ßÊÄ•ÂõûÊªöÊâßË°åÊä•Âëä

          **‚ö†Ô∏è  ËøôÊòØ‰∏Ä‰∏™Á¥ßÊÄ•ÂõûÊªöÊìç‰Ωú**

          | È°πÁõÆ | ÂÄº |
          |------|-----|
          EOF
          echo "| ÂõûÊªöÂéüÂõ† | ${{ inputs.reason }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ÁõÆÊ†áÁâàÊú¨ | \`$PREV_GA_VERSION\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Feed Êñá‰ª∂ | ${{ inputs.feed_files }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Ëß¶ÂèëËÄÖ | ${{ inputs.triggered_by }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ÊâßË°åÊó∂Èó¥ | $(date -u +%Y-%m-%dT%H:%M:%S.000Z) |" >> $GITHUB_STEP_SUMMARY

          # ÂõûÊªöÁªìÊûú
          if [ "${{ steps.rollback_all.outcome }}" = "success" ]; then
            cat >> "$GITHUB_STEP_SUMMARY" << 'MD'

### üìä ÊâπÈáèÂõûÊªöÁªìÊûú
```json
MD
            echo '${{ steps.rollback_all.outputs.rollback_results }}' | jq '.' >> $GITHUB_STEP_SUMMARY
            cat >> "$GITHUB_STEP_SUMMARY" << 'MD'
```
MD
          elif [ "${{ steps.rollback_single.outcome }}" = "success" ]; then
            cat >> "$GITHUB_STEP_SUMMARY" << 'MD'

### üìä ÂõûÊªöÁªìÊûú
```json
MD
            echo '${{ steps.rollback_single.outputs.rollback_result }}' | jq '.' >> $GITHUB_STEP_SUMMARY
            cat >> "$GITHUB_STEP_SUMMARY" << 'MD'
```
MD
          fi

          cat >> "$GITHUB_STEP_SUMMARY" << 'EOF'

### üéØ ÂêéÁª≠Êìç‰ΩúÂª∫ËÆÆ
1. üîç **Á´ãÂç≥Ë∞ÉÊü•** ÂØºËá¥ÂõûÊªöÁöÑÊ†πÊú¨ÂéüÂõ†
2. üìä **ÁõëÊéßÊåáÊ†á** Á°ÆËÆ§ÂõûÊªöÂêéÁ≥ªÁªüÁ®≥ÂÆöÊÄß
3. üì¢ **ÈÄöÁü•Âõ¢Èòü** ÂõûÊªöÊÉÖÂÜµÂíåÂΩ±ÂìçËåÉÂõ¥
4. üîß **‰øÆÂ§çÈóÆÈ¢ò** Âú®ÈáçÊñ∞ÂèëÂ∏ÉÂâçËß£ÂÜ≥Ê†πÊú¨ÂéüÂõ†
5. üìù **‰∫ãÂêéÂàÜÊûê** Êõ¥Êñ∞ÂèëÂ∏ÉÊµÅÁ®ã‰ª•Èò≤Ê≠¢Á±ª‰ººÈóÆÈ¢ò
          EOF

          if [ "${{ inputs.triggered_by }}" = "monitor" ]; then
            cat >> "$GITHUB_STEP_SUMMARY" << 'EOF'

‚ö° **Ê≥®ÊÑè**: Ê≠§ÂõûÊªöÁî±Ëá™Âä®ÁõëÊéßÁ≥ªÁªüËß¶Âèë
            EOF
          fi
