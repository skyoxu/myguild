name: Emergency Rollback

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Rollback reason'
        required: true
        type: string
        default: 'Emergency rollback requested'
      target_version:
        description: 'Target version for rollback'
        required: false
        type: string
      feed_files:
        description: 'Feed files to rollback'
        required: false
        type: choice
        options:
          [
            'all',
            'dist/latest.yml',
            'dist/latest-mac.yml',
            'dist/latest-linux.yml',
          ]
        default: 'all'
      triggered_by:
        description: 'Triggered by'
        required: false
        type: string
        default: 'manual'

env:
  PREV_GA_VERSION: ${{ inputs.target_version || vars.PREV_GA_VERSION || '0.0.9' }}
  WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}

# Concurrency control to prevent conflicts
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false # Prevent emergency rollback cancellation

jobs:
  emergency_rollback:
    runs-on: windows-latest
    # Install dev dependencies for this job to access necessary scripts
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'
    timeout-minutes: 10
    permissions:
      contents: write
      actions: write
    environment:
      name: production
      # Production environment protection for emergency rollback

    steps:
      - name: 'Emergency rollback initiated'
        run: |
          echo "=== Emergency rollback initiated ==="
          echo "Details:"
          echo "  - Reason: ${{ inputs.reason }}"
          echo "  - Target version: $PREV_GA_VERSION"
          echo "  - Feed files: ${{ inputs.feed_files }}"
          echo "  - Triggered by: ${{ inputs.triggered_by }}"

      - name: 'Checkout repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 'Install dependencies'
        uses: ./.github/actions/npm-install
        env:
          NPM_CONFIG_PRODUCTION: 'true'

      - name: 'Install system tools'
        shell: pwsh
        run: |
          # Install jq tool on Windows runner using PowerShell instead of Linux apt-get
          if (-not (Get-Command jq -ErrorAction SilentlyContinue)) {
            Write-Host "Installing jq tool..."
            if (Get-Command choco -ErrorAction SilentlyContinue) {
              choco install jq -y --no-progress
            } else {
              Write-Host "Chocolatey not available, trying winget..."
              winget install stedolan.jq --accept-source-agreements --accept-package-agreements
            }
          } else {
            Write-Host "jq already available"
          }

      - name: 'Pre-rollback validation'
        shell: bash
        run: |
          echo "Validating rollback prerequisites..."

          # Check manifest file exists
          if [ ! -f "artifacts/manifest.json" ]; then
            echo "Error: Manifest file does not exist"
            exit 1
          fi

          # Check target version exists in manifest
          if ! jq -e --arg version "$PREV_GA_VERSION" '.[$version]' artifacts/manifest.json > /dev/null; then
            echo "Error: Target version $PREV_GA_VERSION not found in manifest"
            echo "Available versions:"
            jq -r 'keys[]' artifacts/manifest.json
            exit 1
          fi

          echo "Validation completed successfully"
          echo "Target version: $PREV_GA_VERSION"

      - name: 'Execute rollback for all feeds'
        if: inputs.feed_files == 'all'
        id: rollback_all
        shell: bash
        run: |
          echo "Executing rollback for all feed files..."

          rollback_results="[]"

          for feed_file in "dist/latest.yml" "dist/latest-mac.yml" "dist/latest-linux.yml"; do
            if [ -f "$feed_file" ]; then
              echo "Processing $feed_file..."
              
              set +e
              result=$(node scripts/release/execute-rollback.mjs \
                --feed="$feed_file" \
                --previous-version="$PREV_GA_VERSION" \
                --manifest="artifacts/manifest.json" \
                --reason="${{ inputs.reason }}" \
                "$([ -n "$WEBHOOK_URL" ] && echo "--notify")")
              rollback_exit_code=$?
              set -e
              
              if [ "$rollback_exit_code" -eq 0 ]; then
                echo "Successfully rolled back $feed_file"
                rollback_results=$(echo "$rollback_results" | jq --argjson item "{\"feed\": \"$feed_file\", \"success\": true, \"result\": $result}" '. + [$item]')
              else
                echo "Failed to rollback $feed_file (exit code: $rollback_exit_code)"
                rollback_results=$(echo "$rollback_results" | jq --argjson item "{\"feed\": \"$feed_file\", \"success\": false, \"error\": \"Exit code $rollback_exit_code\"}" '. + [$item]')
              fi
            else
              echo "Warning: $feed_file does not exist, skipping"
              rollback_results=$(echo "$rollback_results" | jq --argjson item "{\"feed\": \"$feed_file\", \"success\": true, \"skipped\": true}" '. + [$item]')
            fi
          done

          echo "rollback_results=$rollback_results" >> $GITHUB_OUTPUT
          echo "All feed files processed successfully"

      - name: 'Execute rollback for single feed'
        if: inputs.feed_files != 'all'
        id: rollback_single
        shell: bash
        run: |
          feed_file="${{ inputs.feed_files }}"
          echo "Executing rollback for $feed_file..."

          if [ ! -f "$feed_file" ]; then
            echo "Error: Feed file does not exist: $feed_file"
            exit 1
          fi

          result=$(node scripts/release/execute-rollback.mjs \
            --feed="$feed_file" \
            --previous-version="$PREV_GA_VERSION" \
            --manifest="artifacts/manifest.json" \
            --reason="${{ inputs.reason }}" \
            "$([ -n "$WEBHOOK_URL" ] && echo "--notify")")

          echo "rollback_result=$result" >> $GITHUB_OUTPUT
          echo "Successfully rolled back $feed_file"

      - name: 'Stop all running release workflows'
        shell: bash
        run: |
          echo "Stopping all running release workflows..."

          # Find running release workflows
          running_workflows=$(gh run list \
            --repo "${{ github.repository }}" \
            --status in_progress \
            --workflow "Release Ramp" \
            --json databaseId,headBranch \
            --jq '.[].databaseId')

          if [ -n "$running_workflows" ]; then
            echo "Found running release workflows, cancelling..."
            for run_id in $running_workflows; do
              echo "Cancelling workflow run: $run_id"
              gh run cancel "$run_id" --repo "${{ github.repository }}" || echo "Failed to cancel (non-critical)"
            done
          else
            echo "No running release workflows found"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Send emergency notification'
        if: always()
        env:
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
        shell: bash
        run: |
          if [ -z "$WEBHOOK_URL" ]; then
            echo "Warning: WEBHOOK_URL not configured, skipping notification"
            exit 0
          fi

          echo "Sending emergency notification..."

          # Determine notification status
          if [ "${{ steps.rollback_all.outcome }}" = "success" ] || [ "${{ steps.rollback_single.outcome }}" = "success" ]; then
            status="Emergency Rollback Completed"
            color="warning"
            message="Emergency rollback to version $PREV_GA_VERSION has been executed successfully."
          else
            status="Emergency Rollback Failed"
            color="danger"
            message="Emergency rollback attempt failed. Manual intervention required."
          fi

          curl -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d "{
              \"text\": \"$status\",
              \"attachments\": [{
                \"color\": \"$color\",
                \"fields\": [
                  {\"title\": \"Target Version\", \"value\": \"$PREV_GA_VERSION\", \"short\": true},
                  {\"title\": \"Feed Files\", \"value\": \"${{ inputs.feed_files }}\", \"short\": true},
                  {\"title\": \"Triggered By\", \"value\": \"${{ inputs.triggered_by }}\", \"short\": true},
                  {\"title\": \"Repository\", \"value\": \"${{ github.repository }}\", \"short\": true},
                  {\"title\": \"Reason\", \"value\": \"${{ inputs.reason }}\", \"short\": false}
                ],
                \"text\": \"$message\"
              }]
            }" || echo "Webhook notification failed (non-critical)"

      - name: 'Commit rollback changes'
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Check if there are changes to commit
          if git diff --quiet; then
            echo "No changes to commit"
            exit 0
          fi

          # Add rollback changes
          git add dist/latest*.yml 2>/dev/null || true

          if ! git diff --cached --quiet; then
            git commit -m "EMERGENCY ROLLBACK: v$PREV_GA_VERSION" \
              -m "Reason: ${{ inputs.reason }}" \
              -m "Triggered by: ${{ inputs.triggered_by }}" \
              -m "Feed files: ${{ inputs.feed_files }}" \
              -m "" \
              -m "Warning: CRITICAL: Production rollback executed" \
              -m "Alert: Automated emergency response" \
              -m "Workflow: ${{ github.workflow }}" \
              -m "Run: ${{ github.run_number }}"
            
            echo "Successfully committed rollback changes"
          fi

      - name: 'Push emergency changes'
        shell: bash
        run: |
          echo "Pushing emergency changes..."
          git push origin ${{ github.ref }}
          echo "Successfully pushed rollback changes"

      - name: Rollback summary
        if: always()
        shell: bash
        run: |
          summary_file="${GITHUB_STEP_SUMMARY}"
          {
            echo "## Emergency Rollback Summary"
            echo ""
            echo "- **Target Version**: ${{ inputs.target_version || env.PREV_GA_VERSION }}"
            echo "- **Requested By**: ${{ github.actor }}"
            echo ""
            echo "### Execution Steps"
            echo "1. Validated prerequisites successfully"
            echo "2. Executed rollback operations"
            echo "3. Committed rollback changes"
          } >> "${summary_file}"

          # Add rollback results
          if [ "${{ steps.rollback_all.outcome }}" = "success" ]; then
            {
              echo ''
              echo '### All Feed Files Results'
              echo '```json'
            } >> "$GITHUB_STEP_SUMMARY"
            {
              echo '${{ steps.rollback_all.outputs.rollback_results }}' | jq .
              echo '```'
            } >> "$GITHUB_STEP_SUMMARY"
          elif [ "${{ steps.rollback_single.outcome }}" = "success" ]; then
            {
              echo ''
              echo '### Single Feed Results'
              echo '```json'
            } >> "$GITHUB_STEP_SUMMARY"
            {
              echo '${{ steps.rollback_single.outputs.rollback_result }}' | jq .
              echo '```'
            } >> "$GITHUB_STEP_SUMMARY"
          fi

          {
            echo ""
            echo "### Next Steps"
            echo "1. Monitor system stability and performance"
            echo "2. Analyze root cause of the issue"
            echo "3. Prepare hotfix or new release as needed"
            echo "4. Update incident documentation"
            echo "5. Review and improve emergency response procedures"
          } >> "$GITHUB_STEP_SUMMARY"

          if [ "${{ inputs.triggered_by }}" = "monitor" ]; then
            {
              echo ""
              echo "Note: This rollback was triggered automatically by monitoring systems"
            } >> "$GITHUB_STEP_SUMMARY"
          fi