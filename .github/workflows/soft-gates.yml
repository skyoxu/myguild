name: Soft Gates (Quality Feedback)

# 最小权限原则
permissions:
  contents: read
  actions: read

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'electron/**'
      - 'tests/**'
      - 'scripts/**'
      - 'package.json'
      - 'package-lock.json'
      - 'tsconfig.json'
      - 'vite.config.ts'
      - 'vitest.config.ts'
      - '.github/workflows/soft-gates.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'electron/**'
      - 'tests/**'
      - 'scripts/**'
      - 'package.json'
      - 'package-lock.json'
      - 'tsconfig.json'
      - 'vite.config.ts'
      - 'vitest.config.ts'
      - '.github/workflows/soft-gates.yml'

  # 支持手动触发
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'

jobs:
  # 软门禁守护自检
  soft-gate-guardian:
    name: 🛡️ 软门禁守护检查
    runs-on: ubuntu-latest
    # P0修复：job级别环境变量确保devDependencies正确安装
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'
    timeout-minutes: 3

    steps:
      - name: Checkout代码
        uses: actions/checkout@v4

      - name: 🔍 Actionlint 工作流语法检查
        uses: rhysd/actionlint-action@v1
        with:
          fail-on-error: true

  quality-gate-check:
    name: 📊 软门禁质量检查
    runs-on: ubuntu-latest
    # P0修复：job级别环境变量确保devDependencies正确安装
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'
    timeout-minutes: 20
    needs: soft-gate-guardian

    # 软门禁job需要权限创建checks和PR评论
    permissions:
      checks: write
      issues: write # PR评论需要issues权限
      contents: read

    # 软门禁永远不应该失败（即使有问题也返回成功）
    continue-on-error: false

    steps:
      - name: Checkout代码
        uses: actions/checkout@v4

      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 安装jq工具
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: 安装依赖
        run: npm ci

      - name: 确保日志目录存在
        run: mkdir -p logs

      - name: 执行软门禁检查
        id: soft-gates
        run: |
          echo "🚦 开始执行软门禁质量检查..."

          # 执行软门禁脚本（永不失败）
          node scripts/soft-gate-reporter.js || {
            echo "⚠️ 软门禁脚本执行异常，但不阻塞流程"
            echo "soft-gate-score=50" >> $GITHUB_OUTPUT
            echo "soft-gate-status=neutral" >> $GITHUB_OUTPUT
            echo "soft-gate-title=软门禁执行异常" >> $GITHUB_OUTPUT
            echo "soft-gate-summary=执行过程中遇到问题，请检查日志" >> $GITHUB_OUTPUT
            exit 0
          }

          echo "✅ 软门禁检查完成"

      - name: 读取软门禁输出
        id: read-outputs
        run: |
          # 如果GITHUB_OUTPUT中没有软门禁结果，设置默认值
          if ! grep -q "soft-gate-score=" $GITHUB_OUTPUT 2>/dev/null; then
            echo "soft-gate-score=75" >> $GITHUB_OUTPUT
            echo "soft-gate-status=neutral" >> $GITHUB_OUTPUT
            echo "soft-gate-title=质量评分: 75/100" >> $GITHUB_OUTPUT
            echo "soft-gate-summary=软门禁检查完成" >> $GITHUB_OUTPUT
            echo "soft-gate-details=所有质量检查项已执行完成" >> $GITHUB_OUTPUT
          fi

      - name: 上传软门禁报告
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: soft-gate-reports
          path: logs/soft-gate-report.json
          retention-days: 30

      - name: 创建中性状态检查
        uses: actions/github-script@v7
        if: always()
        continue-on-error: true # 软门禁不应阻断，checks创建失败也要继续
        with:
          script: |
            // 读取软门禁结果
            const fs = require('fs');
            let softGateData;

            try {
              if (fs.existsSync('logs/soft-gate-report.json')) {
                const reportContent = fs.readFileSync('logs/soft-gate-report.json', 'utf8');
                softGateData = JSON.parse(reportContent);
              }
            } catch (error) {
              console.log('无法读取软门禁报告，使用默认值');
            }

            // 设置默认值
            const score = softGateData?.overallScore || 75;
            const title = `质量评分: ${score}/100`;
            const summary = softGateData ? 
              `共执行${softGateData.summary?.totalGates || 0}项质量检查` : 
              '软门禁检查完成';

            // 构建详细描述
            let details = '';
            if (softGateData?.feedback) {
              details = softGateData.feedback.map(f => f.message).join('\n');
            }
            if (softGateData?.recommendations && softGateData.recommendations.length > 0) {
              details += '\n\n**改进建议:**\n' + softGateData.recommendations.join('\n');
            }

            // 创建中性状态（软门禁特色：提供反馈但不阻塞）
            const { data: checkRun } = await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Soft Gates Quality Check',
              head_sha: context.sha,
              status: 'completed',
              conclusion: 'neutral', // 关键：始终为neutral，不阻塞合并
              output: {
                title: title,
                summary: summary,
                text: details || '质量检查完成，详细信息请查看报告。'
              }
            });

            console.log(`创建中性状态检查: ${checkRun.html_url}`);

            // 如果是PR，添加评论（容错处理API限流）
            if (context.payload.pull_request) {
              try {
                const commentBody = `
            ## 📊 软门禁质量评分报告

            **总体评分**: ${score}/100 ⭐

            ${summary}

            ${details ? '### 详细反馈\n' + details : ''}

            ---

            > 💡 **说明**: 软门禁提供质量反馈但不阻塞合并。建议在合并前考虑改进建议。
            > 
            > 📋 [查看详细报告](${context.payload.repository.html_url}/actions/runs/${context.runId}#artifacts)
            `;
                
                await github.rest.issues.createComment({
                  issue_number: context.payload.pull_request.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: commentBody
                });
                console.log(`✅ PR评论创建成功: #${context.payload.pull_request.number}`);
              } catch (error) {
                console.log(`⚠️ PR评论创建失败（API限流或权限问题），但不影响软门禁流程: ${error.message}`);
                // 软门禁：评论失败不应阻断流程
              }
            }

      - name: 输出到GitHub Step Summary
        if: always()
        run: |
          # 确保UTF-8编码输出
          export LANG=C.UTF-8
          export LC_ALL=C.UTF-8
          echo "## 📊 软门禁质量检查结果" >> $GITHUB_STEP_SUMMARY

          if [ -f "logs/soft-gate-report.json" ]; then
            # 提取关键信息
            overall_score=$(jq -r '.overallScore // 75' logs/soft-gate-report.json)
            total_gates=$(jq -r '.summary.totalGates // 0' logs/soft-gate-report.json)
            success_count=$(jq -r '.summary.successCount // 0' logs/soft-gate-report.json)
            warning_count=$(jq -r '.summary.warningCount // 0' logs/soft-gate-report.json)
            error_count=$(jq -r '.summary.errorCount // 0' logs/soft-gate-report.json)
            
            echo "### 🎯 质量评分: ${overall_score}/100" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| 检查项目 | 数量 |" >> $GITHUB_STEP_SUMMARY
            echo "|---------|------|" >> $GITHUB_STEP_SUMMARY
            echo "| 总检查数 | $total_gates |" >> $GITHUB_STEP_SUMMARY
            echo "| 成功 | $success_count |" >> $GITHUB_STEP_SUMMARY
            echo "| 警告 | $warning_count |" >> $GITHUB_STEP_SUMMARY
            echo "| 错误 | $error_count |" >> $GITHUB_STEP_SUMMARY
            
            # 显示详细反馈
            if [ "$warning_count" -gt 0 ] || [ "$error_count" -gt 0 ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### 📝 反馈详情" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              
              # 提取反馈信息
              jq -r '.feedback[]?.message // empty' logs/soft-gate-report.json | while read -r feedback; do
                echo "- $feedback" >> $GITHUB_STEP_SUMMARY
              done
            fi
            
            # 显示改进建议
            recommendations=$(jq -r '.recommendations // [] | length' logs/soft-gate-report.json)
            if [ "$recommendations" -gt 0 ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### 💡 改进建议" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              
              jq -r '.recommendations[] // empty' logs/soft-gate-report.json | while read -r rec; do
                echo "- $rec" >> $GITHUB_STEP_SUMMARY
              done
            fi
            
          else
            echo "### ⚠️ 无法生成详细报告" >> $GITHUB_STEP_SUMMARY
            echo "软门禁检查完成，但报告文件缺失。" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*💡 软门禁提供质量反馈但不阻塞合并 - 基于ADR-0005质量门禁标准*" >> $GITHUB_STEP_SUMMARY

      - name: 软门禁永远成功
        if: always()
        run: |
          echo "✅ 软门禁检查完成"
          echo "📊 质量评分已生成并通过中性状态反馈"
          echo "🚀 软门禁不阻塞流程，构建继续"
          exit 0

# ==================== 并发控制 ====================
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
