name: PR Status Gatekeeper - Windows CI
# Windows CI gatekeeper workflow

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  GATEKEEPER_TIMEOUT: 5

permissions:
  contents: read
  actions: read

# ==================== Concurrency Control ====================
concurrency:
  group: gatekeeper-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ==================== Main Gatekeeper Job ====================
  # Primary job for GitHub Actions status check
  windows-ci-gatekeeper:
    name: Windows CI Status Check
    runs-on: ubuntu-latest # Using Ubuntu runner for efficiency
    timeout-minutes: 30 # Reasonable timeout for CI checks

    # Only run on non-draft PRs
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for "Unified Security Gate" check
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const ref = context.ref;
            const target = 'Unified Security Gate';
            const timeoutMs = 10 * 60 * 1000;
            const start = Date.now();
            const sleep = ms => new Promise(r => setTimeout(r, ms));
            while (Date.now() - start < timeoutMs) {
              const { data } = await github.rest.checks.listForRef({ owner, repo, ref });
              const cr = data.check_runs.find(c => c.name === target);
              core.info(`Waiting for check: ${target} (found=${!!cr && cr.status}/${cr?.conclusion || 'pending'})`);
              if (cr && ['success','neutral','skipped'].includes(cr.conclusion)) return;
              if (cr && ['failure','timed_out','cancelled','action_required'].includes(cr.conclusion)) {
                core.setFailed(`${target} concluded: ${cr.conclusion}`);
                return;
              }
              await sleep(30000);
            }
            core.setFailed(`Timeout waiting for ${target}`);

      - name: Generate PR summary
        run: |
          cat >> "$GITHUB_STEP_SUMMARY" << 'EOF'
          ## PR Status Summary
          ### Windows CI Status
          - **Status**: Windows-focused CI (Build and Test)
          - **Environment**: Windows CI with security gates

          ### Details
          - **Focus**: Windows-focused CI
          - **Security**: Unified security gate validation
          - **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - **Priority**: P2 - Critical CI validation
          ---
          *This gatekeeper ensures Windows CI completion before PR merge*
          EOF

  # ==================== Health Check Job ====================
  workflow-health-check:
    name: Workflow Health Check
    runs-on: ubuntu-latest # Using Ubuntu runner for health check
    timeout-minutes: 2

    steps:
      - name: Health status report
        run: |
          cat >> "$GITHUB_STEP_SUMMARY" << 'EOF'
          ## Workflow Health Status
          - **Version**: v1.0
          - **Health Check Time**: $(date -u)
          - **Priority**: P2 - Critical validation
          EOF