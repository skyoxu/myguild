name: Security Gate (Unified)

# 最小权限原则
permissions:
  contents: read
  actions: read
  security-events: write
  pull-requests: write
  issues: write
  id-token: write

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'electron/**'
      - 'scripts/**'
      - 'package.json'
      - 'package-lock.json'
      - 'tsconfig*.json'
      - 'vite.config.ts'
      - '.github/workflows/security-unified.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'electron/**'
      - 'scripts/**'
      - 'package.json'
      - 'package-lock.json'
      - 'tsconfig*.json'
      - 'vite.config.ts'

  # 支持手动触发
  workflow_dispatch:

# 并发控制：相同分支只运行一个实例
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20.x'

jobs:
  # 阶段1：静态安全扫描（快速，并行执行）
  # 兼容性：保持与现有分支保护规则兼容的job名称
  security-scan:
    name: 📊 静态安全扫描（统一）
    runs-on: windows-latest
    # P0修复：job级别环境变量确保devDependencies正确安装
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'
    timeout-minutes: 10

    outputs:
      scan-status: ${{ steps.static-scan.outputs.status }}
      critical-count: ${{ steps.static-scan.outputs.critical-count }}
      high-count: ${{ steps.static-scan.outputs.high-count }}

    steps:
      - name: Checkout代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 安装依赖
        uses: ./.github/actions/npm-install

      - name: 安装jq工具
        shell: pwsh
        run: |
          # P0修复：Windows runner使用PowerShell包管理替代Linux apt-get
          if (-not (Get-Command jq -ErrorAction SilentlyContinue)) {
            Write-Host "Installing jq tool..."
            if (Get-Command choco -ErrorAction SilentlyContinue) {
              choco install jq -y --no-progress
            } else {
              Write-Host "Chocolatey not available, trying winget..."
              winget install stedolan.jq --accept-source-agreements --accept-package-agreements
            }
          } else {
            Write-Host "jq already available"
          }

      - name: 安装静态安全扫描工具
        run: |
          npm install -g @doyensec/electronegativity@1.10.3
          npm install -g snyk
          npm install -g audit-ci

      - name: 执行Electronegativity扫描
        id: electronegativity
        shell: bash
        run: |
          echo "🔍 运行Electronegativity安全扫描..."
          electronegativity --input . --output electronegativity-scan.csv --verbose false --electron-version 37.0.0 || echo "⚠️ 扫描完成但有警告"

          if [ -f electronegativity-scan.csv ]; then
            echo "✅ Electronegativity扫描完成"
            echo "electronegativity-status=success" >> "$GITHUB_OUTPUT"
          else
            echo "❌ Electronegativity扫描失败"
            echo "electronegativity-status=failed" >> "$GITHUB_OUTPUT"
          fi

      - name: 执行npm audit
        id: npm-audit
        shell: bash
        run: |
          echo "🔍 运行npm audit..."
          npm audit --audit-level high --json > npm-audit-results.json || true

          if [ -f npm-audit-results.json ]; then
            echo "✅ npm audit完成"
            echo "npm-audit-status=success" >> "$GITHUB_OUTPUT"
          else
            echo "❌ npm audit失败"
            echo "npm-audit-status=failed" >> "$GITHUB_OUTPUT"
          fi

      - name: 执行Snyk扫描（如果有Token）
        id: snyk-scan
        shell: bash
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          if [ -n "$SNYK_TOKEN" ]; then
            echo "🔍 运行Snyk扫描..."
            snyk test --json > snyk-results.json || true
            snyk monitor || true
            echo "✅ Snyk扫描完成"
            echo "snyk-status=success" >> "$GITHUB_OUTPUT"
          else
            echo "⚠️ 跳过Snyk扫描（无SNYK_TOKEN）"
            echo "snyk-status=skipped" >> "$GITHUB_OUTPUT"
          fi

      - name: 安装TruffleHog工具（Windows原生）
        shell: pwsh
        run: |
          Write-Host "Installing TruffleHog via Chocolatey..."
          choco install trufflehog -y --no-progress
          trufflehog --version
          Write-Host "✅ TruffleHog安装完成"

      - name: 检查秘钥泄露（Windows原生）
        shell: pwsh
        run: |
          Write-Host "🔍 运行TruffleHog秘钥扫描..."
          
          # PR场景：使用git增量扫描（更快更准）
          if ($env:GITHUB_EVENT_NAME -eq "pull_request") {
            Write-Host "PR模式：执行增量git扫描（base: ${{ github.event.pull_request.base.sha }} -> head: ${{ github.sha }}）"
            # 使用PowerShell调用bash来执行git命令（避免Windows路径问题）
            bash -c "trufflehog git '${{ github.event.pull_request.base.sha }}' '${{ github.sha }}' --results=verified,unknown --only-verified --fail --json" | Out-File -FilePath "trufflehog-pr.json" -Encoding UTF8
            $scanFile = "trufflehog-pr.json"
          } else {
            Write-Host "主分支模式：执行全量filesystem扫描"
            # 1) 降噪：使用排除列表跳过二进制文件和构建产物
            # 2) 正确失败条件：只因已验证密钥而失败，未验证密钥仅作告警
            trufflehog filesystem . `
              --results=verified,unknown `
              --only-verified `
              --fail `
              --json | Out-File -FilePath "trufflehog-scan.json" -Encoding UTF8
            $scanFile = "trufflehog-scan.json"
          }
          
          # 严格按照退出码处理
          $code = $LASTEXITCODE
          if ($code -eq 0) {
            Write-Host "✅ 未发现已验证的密钥"
          } elseif ($code -eq 183) {
            Write-Host "❌ 发现已验证密钥，详见 $scanFile"
            # 输出发现的内容用于调试
            if (Test-Path $scanFile) {
              $content = Get-Content $scanFile -Raw
              if ($content -and $content.Trim() -ne "") {
                Write-Host "🚨 检测到已验证的秘钥泄露"
              }
            }
            exit 1
          } else {
            Write-Host "❌ TruffleHog 扫描发生错误（exit $code）"
            exit $code
          }

      - name: 汇总静态扫描结果
        id: static-scan
        shell: bash
        continue-on-error: false
        run: |
          echo "📊 汇总静态安全扫描结果..."

          CRITICAL_COUNT=0
          HIGH_COUNT=0

          # 处理Electronegativity结果（修正：第2列是severity，处理引号）
          if [ -f electronegativity-scan.csv ]; then
            ELECTRO_CRITICAL=$(awk -F',' 'NR>1 && $2=="\"CRITICAL\"" {count++} END {print count+0}' electronegativity-scan.csv)
            ELECTRO_HIGH=$(awk -F',' 'NR>1 && $2=="\"HIGH\"" {count++} END {print count+0}' electronegativity-scan.csv)
            CRITICAL_COUNT=$((CRITICAL_COUNT + ELECTRO_CRITICAL))
            HIGH_COUNT=$((HIGH_COUNT + ELECTRO_HIGH))
            echo "Electronegativity - Critical: $ELECTRO_CRITICAL, High: $ELECTRO_HIGH"
          fi

          # 处理npm audit结果
          if [ -f npm-audit-results.json ]; then
            NPM_CRITICAL=$(jq '.metadata.vulnerabilities.critical // 0' npm-audit-results.json 2>/dev/null || echo "0")
            NPM_HIGH=$(jq '.metadata.vulnerabilities.high // 0' npm-audit-results.json 2>/dev/null || echo "0")
            CRITICAL_COUNT=$((CRITICAL_COUNT + NPM_CRITICAL))
            HIGH_COUNT=$((HIGH_COUNT + NPM_HIGH))
            echo "npm audit - Critical: $NPM_CRITICAL, High: $NPM_HIGH"
          fi

          # 处理Snyk结果
          if [ -f snyk-results.json ]; then
            SNYK_CRITICAL=$(jq '[.vulnerabilities[] | select(.severity == "critical")] | length' snyk-results.json 2>/dev/null || echo "0")
            SNYK_HIGH=$(jq '[.vulnerabilities[] | select(.severity == "high")] | length' snyk-results.json 2>/dev/null || echo "0")
            CRITICAL_COUNT=$((CRITICAL_COUNT + SNYK_CRITICAL))
            HIGH_COUNT=$((HIGH_COUNT + SNYK_HIGH))
            echo "Snyk - Critical: $SNYK_CRITICAL, High: $SNYK_HIGH"
          fi

          echo "📊 静态扫描汇总："
          echo "  Critical总计: $CRITICAL_COUNT"
          echo "  High总计: $HIGH_COUNT"

          # 输出结果
          echo "critical-count=$CRITICAL_COUNT" >> "$GITHUB_OUTPUT"
          echo "high-count=$HIGH_COUNT" >> "$GITHUB_OUTPUT"

          # ADR-0002 硬失败逻辑：Critical=0, High≤3
          if [ $CRITICAL_COUNT -gt 0 ]; then
            echo "status=failed" >> "$GITHUB_OUTPUT"
            echo "❌ [硬失败] 发现 $CRITICAL_COUNT 个Critical级别安全问题，根据ADR-0002必须为0"
            echo "🚨 门禁将强制失败，禁止合并"
            exit 1
          elif [ $HIGH_COUNT -gt 3 ]; then
            echo "status=failed" >> "$GITHUB_OUTPUT"
            echo "❌ [硬失败] 发现 $HIGH_COUNT 个High级别安全问题，根据ADR-0002最大允许3个"
            echo "🚨 门禁将强制失败，禁止合并"
            exit 1
          else
            echo "status=pass" >> "$GITHUB_OUTPUT"
            echo "✅ 静态安全扫描通过ADR-0002基线要求"
          fi

      - name: 上传静态扫描报告
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: static-security-reports
          path: |
            electronegativity-scan.csv
            npm-audit-results.json
            snyk-results.json
            trufflehog-scan.json
            trufflehog-pr.json
          retention-days: 30

  # 阶段2：E2E安全测试（仅在静态扫描通过且critical问题为0时运行）
  e2e-security-test:
    name: 🧪 E2E安全测试
    runs-on: windows-latest
    # P0修复：job级别环境变量确保devDependencies正确安装
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'
    needs: security-scan
    if: needs.security-scan.outputs.critical-count == '0'
    timeout-minutes: 15

    outputs:
      e2e-status: ${{ steps.e2e-test.outputs.status }}

    steps:
      - name: Checkout代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 安装依赖
        uses: ./.github/actions/npm-install

      - name: 安装Playwright浏览器
        run: npx playwright install --with-deps

      - name: 构建Electron应用
        run: |
          npm run build
          npm run build:electron

      - name: 执行E2E安全测试
        id: e2e-test
        shell: bash
        run: |
          echo "🧪 开始E2E安全测试..."
          if npm run test:e2e:security; then
            echo "✅ E2E安全测试通过"
            echo "status=pass" >> "$GITHUB_OUTPUT"
          else
            echo "❌ E2E安全测试失败"
            echo "status=failed" >> "$GITHUB_OUTPUT"
          fi
        env:
          CI: true

      - name: 上传E2E测试报告
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-security-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  # 阶段3：统一安全门禁决策
  unified-security-gate:
    name: 🚦 统一安全门禁
    runs-on: windows-latest
    # P0修复：job级别环境变量确保devDependencies正确安装
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'
    needs: [security-scan, e2e-security-test]
    if: always()

    # 此作业需要创建Issue的权限
    permissions:
      contents: read
      issues: write
      actions: read

    steps:
      - name: Checkout代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 安装依赖
        uses: ./.github/actions/npm-install

      - name: 确保日志目录存在
        shell: bash
        run: mkdir -p logs

      - name: 执行统一安全门禁检查
        continue-on-error: false
        shell: bash
        run: |
          echo "🔒 开始执行统一安全门禁检查..."

          # ADR-0002 硬失败检查：静态扫描必须通过
          if [ "${{ needs.security-scan.result }}" != "success" ]; then
            echo "❌ [硬失败] 静态安全扫描未通过，违反ADR-0002安全基线"
            echo "🚨 Critical或High安全问题阻止合并"
            exit 1
          fi

          # 使用我们的安全门禁包装脚本
          if ! node scripts/security-gate-wrapper.js; then
            echo "❌ [硬失败] 安全门禁包装脚本检查失败"
            exit 1
          fi
        env:
          STATIC_SCAN_STATUS: ${{ needs.security-scan.outputs.scan-status }}
          CRITICAL_COUNT: ${{ needs.security-scan.outputs.critical-count }}
          HIGH_COUNT: ${{ needs.security-scan.outputs.high-count }}
          E2E_STATUS: ${{ needs.e2e-security-test.outputs.e2e-status }}

      - name: 下载所有安全报告
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: 生成统一安全报告
        shell: bash
        run: |
          echo "📊 生成统一安全门禁报告..."

          # 创建包含所有结果的综合报告
          cat > logs/unified-security-report.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "git_sha": "$GITHUB_SHA",
            "git_ref": "$GITHUB_REF_NAME",
            "workflow_run": "$GITHUB_RUN_ID",
            "static_scan": {
              "status": "${{ needs.security-scan.outputs.scan-status }}",
              "critical_count": ${{ needs.security-scan.outputs.critical-count }},
              "high_count": ${{ needs.security-scan.outputs.high-count }}
            },
            "e2e_test": {
              "status": "${{ needs.e2e-security-test.outputs.e2e-status }}",
              "executed": "${{ needs.e2e-security-test.result != 'skipped' }}"
            },
            "overall_status": "$([ "${{ needs.security-scan.outputs.critical-count }}" = "0" ] && [ "${{ needs.e2e-security-test.outputs.e2e-status }}" != "failed" ] && echo "PASS" || echo "FAIL")"
          }
          EOF

      - name: 上传统一安全报告
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unified-security-report
          path: |
            logs/security-gate-report.json
            logs/unified-security-report.json
          retention-days: 30

      - name: 安全门禁结果摘要
        shell: bash
        run: |
          # 确保UTF-8编码输出
          export LANG=C.UTF-8
          export LC_ALL=C.UTF-8

          # 生成安全门禁结果摘要
          scan_result="${{ needs.security-scan.result }}"
          e2e_status="${{ needs.e2e-security-test.outputs.e2e-status }}"
          critical_count="${{ needs.security-scan.outputs.critical-count }}"
          high_count="${{ needs.security-scan.outputs.high-count }}"
          
          # 确定结果状态和消息
          if [ "$scan_result" != "success" ]; then
            result_title="### ❌ 安全门禁硬失败"
            {
              echo "**ADR-0002违反**: 静态安全扫描未通过基线要求"
              echo "- Critical安全问题: ${critical_count}个（要求: 0个）"
              echo "- High安全问题: ${high_count}个（要求: ≤3个）"
              echo ""
              echo "🚨 **此PR被硬性阻止合并，必须修复所有安全问题**"
            } > /tmp/result_msg.txt
            result_message=$(cat /tmp/result_msg.txt)
            exit_code=1
          elif [ "$e2e_status" = "failed" ]; then
            result_title="### ❌ 安全门禁硬失败"
            {
              echo "**ADR-0002违反**: E2E安全测试失败"
              echo "请检查Electron安全配置："
              echo "- nodeIntegration=false ✓"
              echo "- contextIsolation=true ✓"
              echo "- sandbox=true ✓"
              echo ""
              echo "🚨 **此PR被硬性阻止合并，必须修复Electron安全配置**"
            } > /tmp/result_msg.txt
            result_message=$(cat /tmp/result_msg.txt)
            exit_code=1
          else
            result_title="### ✅ 安全门禁通过"
            {
              echo "**ADR-0002合规**: 所有安全检查均已通过，符合严格安全基线要求"
              echo "- Critical安全问题: 0个 ✅"
              echo "- High安全问题: ${high_count}个 (≤3) ✅"
              echo "- E2E安全测试: 通过 ✅"
            } > /tmp/result_msg.txt
            result_message=$(cat /tmp/result_msg.txt)
            exit_code=0
          fi
          
          # 一次性写入所有内容到Summary
          {
            echo "## 🔒 统一安全门禁结果"
            echo ""
            echo "### 📊 检查摘要"
            echo "| 检查项目 | 状态 | 结果 |"
            echo "|---------|------|------|"
            echo "| 静态安全扫描 | ${{ needs.security-scan.outputs.scan-status }} | Critical: ${critical_count}, High: ${high_count} |"
            echo "| E2E安全测试 | ${e2e_status} | ${{ needs.e2e-security-test.result != 'skipped' && '执行完成' || '跳过（存在Critical问题）' }} |"
            echo ""
            echo "$result_title"
            echo "$result_message"
          } >> "$GITHUB_STEP_SUMMARY"
          
          # ADR-0002 强制硬失败决策
          if [ "$exit_code" -eq 1 ]; then
            exit 1
          fi

      - name: 失败时创建Issue
        uses: actions/github-script@v7
        if: failure()
        with:
          script: |
            const title = `🔒 统一安全门禁失败 - ${context.payload.head_commit?.message || context.payload.pull_request?.title || 'Security Check'}`;
            const body = `
            ## 🚨 统一安全门禁失败报告

            **提交**: ${context.sha}
            **分支**: ${context.ref}
            **工作流**: ${context.workflow}
            **运行ID**: ${context.runId}

            ### 📊 检查结果
            - **静态扫描状态**: ${{ needs.security-scan.outputs.scan-status }}
            - **Critical问题**: ${{ needs.security-scan.outputs.critical-count }}个
            - **High问题**: ${{ needs.security-scan.outputs.high-count }}个
            - **E2E测试状态**: ${{ needs.e2e-security-test.outputs.e2e-status }}

            ### 📋 需要检查的项目
            - [ ] 修复所有Critical级别安全问题
            - [ ] 检查Electron安全配置（nodeIntegration=false, contextIsolation=true）
            - [ ] 验证CSP安全策略
            - [ ] 检查IPC通道安全性
            - [ ] 验证预加载脚本安全性

            ### 🔗 相关链接
            - [查看详细日志](${context.payload.repository.html_url}/actions/runs/${context.runId})
            - [下载安全报告](${context.payload.repository.html_url}/actions/runs/${context.runId}#artifacts)

            ### ⚠️ 注意事项
            **安全门禁失败意味着应用存在安全风险，请立即修复后再发布！**

            > 此Issue由GitHub Actions自动创建 - 基于ADR-0002统一安全门禁标准
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'bug', 'urgent', 'P0']
            });
