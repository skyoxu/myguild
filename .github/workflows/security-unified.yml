name: Security Gate (Unified)

# Minimal permissions principle
permissions:
  contents: read
  actions: read
  security-events: write
  pull-requests: write
  issues: write
  id-token: write

defaults:
  run:
    shell: pwsh

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'electron/**'
      - 'scripts/**'
      - 'package.json'
      - 'package-lock.json'
      - 'tsconfig*.json'
      - 'vite.config.ts'
      - '.github/workflows/security-unified.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'electron/**'
      - 'scripts/**'
      - 'package.json'
      - 'package-lock.json'
      - 'tsconfig*.json'
      - 'vite.config.ts'

  # Support manual trigger
  workflow_dispatch:

# Concurrency control: only one instance per branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20.x'

jobs:
  # Stage 1: Static Security Scan (fast, parallel execution)
  # Compatibility: Keep job names compatible with existing branch protection rules
  security-scan:
    name: Static Security Scan (Unified)
    runs-on: windows-latest
    # P0 fix: job-level env vars ensure devDependencies install correctly
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'
      E2E_SECURITY_TIMEOUT_MS: 300000
    timeout-minutes: 15

    outputs:
      scan-status: ${{ steps.static-scan.outputs.status }}
      critical-count: ${{ steps.static-scan.outputs.critical-count }}
      high-count: ${{ steps.static-scan.outputs.high-count }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate E2E timeout config (skip if empty)
        run: |
          $raw = $env:E2E_SECURITY_TIMEOUT_MS
          if ([string]::IsNullOrWhiteSpace($raw)) {
            Write-Host "[config-check] E2E_SECURITY_TIMEOUT_MS not set, skipping validation"
            exit 0
          }
          $val = 0
          if (-not [int]::TryParse($raw, [ref]$val)) {
            Write-Host "[config-check] E2E_SECURITY_TIMEOUT_MS is not a valid integer: $raw, using default"
            exit 0
          }
          if ($val -lt 60000 -or $val -gt 900000) {
            Write-Host "[config-check] E2E_SECURITY_TIMEOUT_MS out of range [60000,900000]: $val, using default"
            exit 0
          }
          Write-Host "[config-check] E2E_SECURITY_TIMEOUT_MS=$val (valid)"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        uses: ./.github/actions/npm-install

      - name: Install jq tool
        shell: pwsh
        run: |
          # P0 fix: Windows runner uses PowerShell package management instead of Linux apt-get
          if (-not (Get-Command jq -ErrorAction SilentlyContinue)) {
            Write-Host "Installing jq tool..."
            if (Get-Command choco -ErrorAction SilentlyContinue) {
              choco install jq -y --no-progress
            } else {
              Write-Host "Chocolatey not available, trying winget..."
              winget install stedolan.jq --accept-source-agreements --accept-package-agreements
            }
          } else {
            Write-Host "jq already available"
          }

      - name: Install static security scan tools
        run: |
          npm install -g @doyensec/electronegativity@1.10.3
          npm install -g snyk
          npm install -g audit-ci

      - name: Run Electronegativity scan
        id: electronegativity
        shell: bash
        run: |
          echo "Running Electronegativity security scan..."
          electronegativity --input . --output electronegativity-scan.csv --verbose false --electron-version 37.0.0 || echo "Scan completed but with warnings"

          if [ -f electronegativity-scan.csv ]; then
            echo "Electronegativity scan completed"
            echo "electronegativity-status=success" >> "$GITHUB_OUTPUT"
          else
            echo "Electronegativity scan failed"
            echo "electronegativity-status=failed" >> "$GITHUB_OUTPUT"
          fi

      - name: Run npm audit
        id: npm-audit
        shell: bash
        run: |
          echo "Running npm audit..."
          npm audit --audit-level high --json > npm-audit-results.json || true

          if [ -f npm-audit-results.json ]; then
            echo "npm audit completed"
            echo "npm-audit-status=success" >> "$GITHUB_OUTPUT"
          else
            echo "npm audit failed"
            echo "npm-audit-status=failed" >> "$GITHUB_OUTPUT"
          fi

      - name: Run Snyk scan (if token available)
        id: snyk-scan
        shell: bash
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          if [ -n "$SNYK_TOKEN" ]; then
            echo "Running Snyk scan..."
            snyk test --json > snyk-results.json || true
            snyk monitor || true
            echo "Snyk scan completed"
            echo "snyk-status=success" >> "$GITHUB_OUTPUT"
          else
            echo "Skipping Snyk scan (no SNYK_TOKEN)"
            echo "snyk-status=skipped" >> "$GITHUB_OUTPUT"
          fi

      - name: Install TruffleHog tool (Windows native)
        shell: pwsh
        run: |
          Write-Host "Installing TruffleHog via Chocolatey..."
          choco install trufflehog -y --no-progress
          trufflehog --version
          Write-Host "TruffleHog installation completed"

      - name: Check for secret leaks (Windows native)
        shell: pwsh
        run: |
          Write-Host "Running TruffleHog secret scan..."
          
          # PR scenario: use git incremental scan (faster and more accurate)
          if ($env:GITHUB_EVENT_NAME -eq "pull_request") {
            Write-Host "PR mode: performing incremental git scan (base: ${{ github.event.pull_request.base.sha }} -> head: ${{ github.sha }})"
            # Windows-only: invoke TruffleHog directly without bash wrapper
            trufflehog git ${{ github.event.pull_request.base.sha }} ${{ github.sha }} --only-verified --fail --json | Out-File -FilePath "trufflehog-pr.json" -Encoding UTF8
            $scanFile = "trufflehog-pr.json"
          } else {
            Write-Host "Main branch mode: performing full filesystem scan"
            # 1) Reduce noise: use exclusion list to skip binary files and build artifacts
            # 2) Fail only on verified secrets
            trufflehog filesystem . `
              --exclude-paths .trufflehog-exclude.txt `
              --only-verified `
              --fail `
              --json | Out-File -FilePath "trufflehog-scan.json" -Encoding UTF8
            $scanFile = "trufflehog-scan.json"
          }
          
          # Strict exit code handling
          $code = $LASTEXITCODE
          if ($code -eq 0) {
            Write-Host "No verified secrets found"
          } elseif ($code -eq 183) {
            Write-Host "Verified secrets found, see$scanFile"
            # Output found content for debugging
            if (Test-Path $scanFile) {
              $content = Get-Content $scanFile -Raw
              if ($content -and $content.Trim() -ne "") {
                Write-Host "Detected verified secret leaks"
              }
            }
            exit 1
          } else {
            Write-Host "TruffleHog scan error (exit$code)"
            exit $code
          }

      - name: Aggregate static scan results
        id: static-scan
        run: node scripts/ci/static-security-summary.mjs

      - name: Upload static scan reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: static-security-reports
          path: |
            electronegativity-scan.csv
            npm-audit-results.json
            snyk-results.json
            trufflehog-scan.json
            trufflehog-pr.json
          if-no-files-found: warn
          retention-days: 30

  # Stage 2: Build and Package Application (separate from tests for artifact reuse)
  build-and-package:
    name: Build & Package
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'
    needs: security-scan
    if: needs.security-scan.outputs.critical-count == '0'
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        uses: ./.github/actions/npm-install

      - name: Build Electron application
        shell: bash  # Keep original shell: bash to ensure compatibility
        run: |
          # Clean platform-specific dependencies to avoid Sharp conflicts
          rm -rf "node_modules/@img/sharp-darwin-"* || true
          rm -rf "node_modules/@img/sharp-linux-"* || true
          
          # Build application
          npm run build
          npx tsc -p electron
          npx electron-builder --dir
          
          # Adapt artifact path for GitHub Actions compatibility
          # electron-builder outputs to release/${version}/win-unpacked/
          # GitHub Actions expects dist/win-unpacked/
          ACTUAL_OUTPUT=$(find release -name "win-unpacked" -type d | head -1)
          if [ -n "$ACTUAL_OUTPUT" ]; then
            echo "Found electron-builder output:$ACTUAL_OUTPUT"
            mkdir -p dist/win-unpacked
            cp -r "$ACTUAL_OUTPUT"/* dist/win-unpacked/
            echo "Adapted artifact path for GitHub Actions: dist/win-unpacked/"
          else
            echo "electron-builder output not found in release/ directory"
            find release -type f -name "*.exe" || true
            exit 1
          fi

      - name: Upload application artifact
        uses: actions/upload-artifact@v4
        with:
          name: electron-app-windows
          # Following citest/ciinfo.md rules, use standard output path
          path: dist/win-unpacked/
          if-no-files-found: error
          retention-days: 1  # Short-term artifact, only for current workflow

  # Stage 3: E2E Security Tests (downloads pre-built artifact)
  e2e-security-test-sharded:
    name: E2E Security Tests (Shard ${{ matrix.shard }})
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    needs: build-and-package
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3, 4]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate E2E timeout config (skip if empty)
        run: |
          $raw = $env:E2E_SECURITY_TIMEOUT_MS
          if ([string]::IsNullOrWhiteSpace($raw)) {
            Write-Host "[config-check] E2E_SECURITY_TIMEOUT_MS not set, skipping validation"
            exit 0
          }
          $val = 0
          if (-not [int]::TryParse($raw, [ref]$val)) {
            Write-Host "[config-check] E2E_SECURITY_TIMEOUT_MS is not a valid integer: $raw, using default"
            exit 0
          }
          if ($val -lt 60000 -or $val -gt 900000) {
            Write-Host "[config-check] E2E_SECURITY_TIMEOUT_MS out of range [60000,900000]: $val, using default"
            exit 0
          }
          Write-Host "[config-check] E2E_SECURITY_TIMEOUT_MS=$val (valid)"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dev dependencies (for Playwright)
        uses: ./.github/actions/npm-install

      - name: Install Playwright browsers
        run: npx playwright install

      - name: Download pre-built application
        uses: actions/download-artifact@v4
        with:
          name: electron-app-windows
          path: dist/win-unpacked/
        continue-on-error: true

      - name: Verify and set Electron entry path
        run: |
          # electron-builder uses asar; verify executable instead of main.js
          # Windows: ViteGame Studio.exe
          # macOS: ViteGame Studio.app/Contents/MacOS/ViteGame Studio
          # Linux: ViteGame Studio (AppImage/deb)
          node scripts/ci/set-electron-env.mjs

      - name: Run E2E security tests (PR Smoke, sharded)
        if: github.event_name == 'pull_request'
        run: >-
          node scripts/ci/run-tests.mjs
          --test-type security
          --shard "${{ matrix.shard }}/4"
          --grep "@smoke"
      - name: Run E2E security tests (Full, sharded)
        if: github.event_name != 'pull_request'
        run: >-
          node scripts/ci/run-tests.mjs
          --test-type security
          --shard "${{ matrix.shard }}/4"

      - name: Collect Playwright traces to logs/
        if: always()
        run: npm run collect:traces

      - name: Upload Playwright traces (logs/playwright-traces)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-traces-shard-${{ matrix.shard }}
          path: logs/playwright-traces/
          if-no-files-found: warn
          retention-days: 30

      - name: Upload E2E test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-security-test-results-shard-${{ matrix.shard }}
          path: |
            test-results/
            playwright-report/
          if-no-files-found: warn
          retention-days: 30

  # Stage 3: Aggregate E2E shards
  e2e-security-aggregate:
    name: E2E Security Aggregate
    runs-on: windows-latest
    needs: [e2e-security-test-sharded]
    outputs:
      e2e-status: ${{ steps.set.outputs.e2e_status }}
    steps:
      - name: Set aggregated E2E status
        id: set
        shell: bash
        run: |
          if [ "${{ needs.e2e-security-test-sharded.result }}" != "success" ]; then
            echo "e2e_status=failed" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "e2e_status=pass" >> "$GITHUB_OUTPUT"

  # Stage 4: Unified Security Gate Decision
  unified-security-gate:
    name: Unified Security Gate
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    # P0 fix: job-level env vars ensure devDependencies install correctly
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'
    needs: [security-scan, e2e-security-aggregate]
    if: always()

    # This job needs permissions to create Issues
    permissions:
      contents: read
      issues: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        uses: ./.github/actions/npm-install

      - name: Ensure logs directory exists
        shell: bash
        run: mkdir -p logs

      - name: Execute unified security gate check
        continue-on-error: false
        shell: bash
        run: |
          echo "Starting unified security gate check..."

          # ADR-0002 hard failure check: static scan must pass
          if [ "${{ needs.security-scan.result }}" != "success" ]; then
            echo "[Hard Failure] Static security scan failed, violates ADR-0002 security baseline"
            exit 1
          fi

          # Do NOT rerun E2E here. Use previous job outputs.
          if [ "${{ needs.e2e-security-aggregate.outputs.e2e-status }}" = "failed" ]; then
            echo "[Hard Failure] E2E security tests failed (from previous job outputs)"
            exit 1
          fi

          echo "Unified security gate pre-checks passed (static scan + E2E outputs)"

      - name: Download E2E results (merged)
        uses: actions/download-artifact@v4
        with:
          pattern: e2e-security-test-results-shard-*
          merge-multiple: true
          path: artifacts/e2e-results

      - name: Download Playwright traces (merged)
        uses: actions/download-artifact@v4
        with:
          pattern: playwright-traces-shard-*
          merge-multiple: true
          path: artifacts/playwright-traces

      - name: Download static scan reports
        uses: actions/download-artifact@v4
        with:
          name: static-security-reports
          path: artifacts/static

      - name: Generate unified security report
        run: node scripts/ci/generate-unified-security-report.mjs
        env:
          CRITICAL_COUNT: ${{ needs.security-scan.outputs.critical-count }}
          HIGH_COUNT: ${{ needs.security-scan.outputs.high-count }}
          SCAN_STATUS: ${{ needs.security-scan.outputs.scan-status }}
          E2E_STATUS: ${{ needs.e2e-security-aggregate.outputs.e2e-status }}
          E2E_EXECUTED: ${{ needs.e2e-security-aggregate.result != 'skipped' }}
          GIT_SHA: ${{ github.sha }}
          GIT_REF: ${{ github.ref_name }}
          RUN_ID: ${{ github.run_id }}

      - name: Upload unified security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unified-security-report
          path: |
            logs/security-gate-report.json
            logs/unified-security-report.json
            logs/
          if-no-files-found: warn
          retention-days: 30

      - name: E2E Gate Mode Notice (Top)
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            {
              echo "## Security Notice"
              echo "This PR uses a SOFT gate for E2E security checks (non-blocking)."
              echo "Please review smoke results and fix before merging to main where HARD gate applies."
              echo ""
            } >> "$GITHUB_STEP_SUMMARY"
          else
            {
              echo "## Security Notice"
              echo "This branch uses a HARD gate for E2E security checks (blocking on failure)."
              echo ""
            } >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Security gate results summary
        shell: bash
        run: |
          # Ensure UTF-8 encoding output
          export LANG=C.UTF-8
          export LC_ALL=C.UTF-8

          # Generate security gate results summary
          scan_result="${{ needs.security-scan.result }}"
          e2e_status="${{ needs.e2e-security-aggregate.outputs.e2e-status }}"
          critical_count="${{ needs.security-scan.outputs.critical-count }}"
          high_count="${{ needs.security-scan.outputs.high-count }}"
          
          # Determine result status and message
          if [ "$scan_result" != "success" ]; then
            result_title="### Security Gate Hard Failure"
            {
              echo "**ADR-0002 Violation**: Static security scan failed baseline requirements"
              echo "- Critical security issues: ${critical_count} (required: 0)"
              echo "- High security issues:${high_count}(required: 3)"
              echo ""
              echo "**This PR is hard-blocked from merging, must fix all security issues**"
            } > /tmp/result_msg.txt
            result_message=$(cat /tmp/result_msg.txt)
            exit_code=1
          elif [ "$e2e_status" = "failed" ]; then
            result_title="### Security Gate Hard Failure"
            {
              echo "**ADR-0002 Violation**: E2E security tests failed"
              echo "Please check Electron security configuration:"
              echo "- nodeIntegration=false"
              echo "- contextIsolation=true"
              echo "- sandbox=true"
              echo ""
              echo "**This PR is hard-blocked from merging, must fix Electron security config**"
            } > /tmp/result_msg.txt
            result_message=$(cat /tmp/result_msg.txt)
            exit_code=1
          else
            result_title="### Security Gate Passed"
            {
              echo "**ADR-0002 Compliant**: All security checks passed, meets strict security baseline requirements"
              echo "- Critical security issues: 0"
              echo "- High security issues:${high_count}(3)"
              echo "- E2E security tests: Passed"
            } > /tmp/result_msg.txt
            result_message=$(cat /tmp/result_msg.txt)
            exit_code=0
          fi
          
          # Write all content to Summary at once
          {
            echo "## Unified Security Gate Results"
            echo ""
            echo "### Check Summary"
            echo "| Check Item | Status | Result |"
            echo "|---------|------|------|"
            echo "| Static Security Scan | ${{ needs.security-scan.outputs.scan-status }} | Critical: ${critical_count}, High: ${high_count} |"
            echo "| E2E Security Tests | ${e2e_status} | ${{ needs.e2e-security-aggregate.result != 'skipped' && 'Executed' || 'Skipped (Critical issues exist)' }} |"
            gate_label=$([ "${{ github.event_name }}" = "pull_request" ] && echo "Soft" || echo "Hard")
            echo "| E2E Gate | ${gate_label} | Mode: PR=Soft / Main=Hard |"
            echo ""
            echo "$result_title"
            echo "$result_message"
          } >> "$GITHUB_STEP_SUMMARY"
          
          # ADR-0002 mandatory hard failure decision
          if [ "$exit_code" -eq 1 ]; then
            exit 1
          fi

      - name: Create Issue on failure
        uses: actions/github-script@v7
        if: failure() && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false)
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // Fix: limit title length to avoid GitHub API 256-char search limit
            const rawTitle = context.payload.head_commit?.message ||
                           context.payload.pull_request?.title ||
                           'Security Check';
            const truncatedTitle = rawTitle.length > 100 ? 
                                 rawTitle.substring(0, 97) + '...' : rawTitle;
            const title = `Unified Security Gate Failure - ${truncatedTitle}`;

            const body = `
            ## Unified Security Gate Failure Report

            **Commit**: ${context.sha}
            **Branch**: ${context.ref}
            **Workflow**: ${context.workflow}
            **Run ID**: ${context.runId}

            ### Check Results
            - **Static scan status**: ${{ needs.security-scan.outputs.scan-status }}
            - **Critical issues**: ${{ needs.security-scan.outputs.critical-count }}
            - **High issues**: ${{ needs.security-scan.outputs.high-count }}
            - **E2E test status**: ${{ needs.e2e-security-aggregate.outputs.e2e-status }}

            ### Items to check
            - [ ] Fix all Critical-level security issues
            - [ ] Check Electron security config (nodeIntegration=false, contextIsolation=true)
            - [ ] Verify CSP security policy
            - [ ] Check IPC channel security
            - [ ] Verify preload script security

            ### Related links
            - [View detailed logs](${context.payload.repository.html_url}/actions/runs/${context.runId})
            - [Download security reports](${context.payload.repository.html_url}/actions/runs/${context.runId}#artifacts)

            ### Notice
            **Security gate failure means the application has security risks, please fix immediately before release!**

            > This Issue was auto-created by GitHub Actions - based on ADR-0002 unified security gate standards
            `;

            // 1) First ensure labels exist (labels must pre-exist in repository)
            const wantedLabels = ['security', 'bug', 'urgent', 'P0'];
            const existing = await github.paginate(
              github.rest.issues.listLabelsForRepo,
              { owner, repo, per_page: 100 }
            );
            const existingLabelNames = new Set(existing.map(l => l.name));
            
            for (const labelName of wantedLabels) {
              if (!existingLabelNames.has(labelName)) {
                try {
                  await github.rest.issues.createLabel({
                    owner,
                    repo,
                    name: labelName,
                    color: labelName === 'security' ? 'ff0000' : 
                           labelName === 'bug' ? 'd73a4a' :
                           labelName === 'urgent' ? 'b60205' : '000000'
                  });
                } catch (error) {
                  console.log(`Note: Cannot create label ${labelName}: ${error.message}`);
                }
              }
            }

            // 2) Fix: avoid duplicate Issues, use simplest query string to prevent GitHub API limits
            try {
              // Use shortest query to avoid 256-char limit
              const simpleQuery = `repo:${owner}/${repo} is:open label:security`;
              console.log(`Search query: ${simpleQuery}`);
              
              const { data: search } = await github.rest.search.issuesAndPullRequests({
                q: simpleQuery,
                sort: 'updated',
                order: 'desc',
                per_page: 1
              });

              if (search.total_count > 0) {
                const issue_number = search.items[0].number;
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number,
                  body: `### New security gate failure\n\n**Time**: ${new Date().toISOString()}\n**Commit**: ${context.sha.substring(0, 8)}\n**Branch**: ${context.ref.replace('refs/heads/', '')}\n\nFor details see [run logs](${context.payload.repository.html_url}/actions/runs/${context.runId})`
                });
                console.log(`Added comment to existing Issue #${issue_number}`);
              } else {
                const newIssue = await github.rest.issues.create({
                  owner,
                  repo,
                  title,
                  body,
                  labels: wantedLabels
                });
                console.log(`Created new security Issue #${newIssue.data.number}`);
              }
            } catch (searchError) {
              console.log(`Issue search failed, creating new Issue directly: ${searchError.message}`);
              // If search fails, create new Issue directly to avoid blocking
              try {
                const newIssue = await github.rest.issues.create({
                  owner,
                  repo,
                  title,
                  body,
                  labels: wantedLabels
                });
                console.log(`Created new security Issue #${newIssue.data.number}`);
              } catch (createError) {
                console.error(`Issue creation also failed: ${createError.message}`);
                // Log error but don't block workflow
              }
            }
