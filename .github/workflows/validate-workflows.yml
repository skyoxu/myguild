name: Validate Workflows & Guards

on:
  pull_request:
    branches: [main, develop]
    paths:
      - '.github/workflows/**'
      - 'scripts/ci/workflow-consistency-check.mjs'
  push:
    branches: [main]
    paths:
      - '.github/workflows/**'
      - 'scripts/ci/workflow-consistency-check.mjs'

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  actionlint:
    name: Lint workflow YAML (actionlint)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run actionlint
        uses: raven-actions/actionlint@v2

  needs-guard:
    name: Check jobs/needs consistency
    runs-on: ubuntu-latest
    needs: actionlint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Run needsâŠ†jobs guard
        run: node scripts/ci/workflow-consistency-check.mjs

  shell-guard:
    name: Enforce Windows-only shell policy
    runs-on: ubuntu-latest
    needs: actionlint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Check pwsh defaults on Windows jobs and POSIX test misuse
        shell: bash
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const path = require('path');

          function listFiles(dir) {
            let res = [];
            for (const entry of fs.readdirSync(dir, { withFileTypes: true })) {
              const p = path.join(dir, entry.name);
              if (entry.isDirectory()) res = res.concat(listFiles(p));
              else if (p.endsWith('.yml') || p.endsWith('.yaml')) res.push(p);
            }
            return res;
          }

          const root = '.github/workflows';
          if (!fs.existsSync(root)) process.exit(0);
          const files = listFiles(root);
          const failures = [];

          for (const file of files) {
            const content = fs.readFileSync(file, 'utf8');

            // Check Windows jobs have pwsh defaults near the job definition
            const reWin = /runs-on:\s*windows-latest/g;
            let m;
            while ((m = reWin.exec(content))) {
              const region = content.slice(m.index, m.index + 2000);
              const hasPwshDefault = /defaults:\s*[\r\n]+\s*run:\s*[\r\n]+\s*shell:\s*pwsh/i.test(region);
              if (!hasPwshDefault) {
                failures.push(`${file}: windows-latest job missing defaults.run.shell: pwsh`);
              }
            }

            // Build simple step index to map lines -> nearest step header and its shell
            const lines = content.split(/\r?\n/);
            const steps = [];
            for (let i = 0; i < lines.length; i++) {
              const l = lines[i];
              if (/^-\s*name:\s*/.test(l.trim())) {
                // look ahead for an explicit shell for this step
                let hasBash = false;
                for (let j = i; j < Math.min(lines.length, i + 20); j++) {
                  if (/^\s*shell:\s*bash\b/i.test(lines[j])) { hasBash = true; break; }
                  if (/^-\s*name:\s*/.test(lines[j].trim()) && j !== i) break; // next step
                }
                steps.push({ start: i, hasBash });
              }
            }
            function stepHasBashForLine(idx) {
              let s = null;
              for (const st of steps) {
                if (st.start <= idx) s = st; else break;
              }
              return s ? s.hasBash : false;
            }

            // Detect POSIX test syntax and ensure the containing step declares shell: bash
            for (let i = 0; i < lines.length; i++) {
              const line = lines[i];
              const trimmed = line.trim();
              if (/^if:\s*/.test(trimmed)) continue; // YAML condition
              if (/(^|\s)if\s*\[|^\s*\[\[/.test(line)) {
                if (!stepHasBashForLine(i)) {
                  failures.push(`${file}:${i+1}: POSIX test syntax without step-level shell: bash`);
                }
              }
            }
          }

          if (failures.length) {
            console.error('Shell policy violations found:');
            for (const f of failures) console.error(' - ' + f);
            process.exit(1);
          } else {
            console.log('Shell guard passed: Windows-only + pwsh policy compliant.');
          }
          NODE
