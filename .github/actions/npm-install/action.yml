name: 'Hardened npm Install'
description: 'Unified npm installation with enhanced reliability for CI/CD systems'
author: 'CI/CD Team'

inputs:
  working-directory:
    description: 'Working directory'
    required: false
    default: '.'
  node-version:
    description: 'Node.js version'
    required: false
    default: '20.x'

# Outputs removed to avoid referencing non-existent step IDs
# Use npm --version and node --version if version info is needed

runs:
  using: 'composite'
  steps:
    - name: Validate Node.js environment
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "Validating Node.js environment setup..."

        # Verify Node.js is available and version
        if ! command -v node >/dev/null 2>&1; then
          echo "❌ ERROR: Node.js not found. Please ensure actions/setup-node@v4 runs before this action."
          exit 1
        fi

        node_version=$(node --version)
        echo "✅ Node.js version: $node_version"

        # Verify npm is available
        if ! command -v npm >/dev/null 2>&1; then
          echo "❌ ERROR: npm not found. Node.js installation may be incomplete."
          exit 1
        fi

        npm_version=$(npm --version)
        echo "✅ npm version: $npm_version"

    - name: Validate environment variables
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "Validating critical environment variables..."
        echo "NODE_ENV: ${NODE_ENV:-not set}"
        echo "NPM_CONFIG_PRODUCTION: ${NPM_CONFIG_PRODUCTION:-not set}"

        # Validate devDependencies installation environment
        if [ "${NODE_ENV}" != "development" ] || [ "${NPM_CONFIG_PRODUCTION}" != "false" ]; then
          echo "WARNING: Environment variables may prevent devDependencies installation"
          echo "  Recommended: NODE_ENV=development, NPM_CONFIG_PRODUCTION=false"
        fi

    - name: Hardened npm install with ESM support
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        # Cross-platform bash compatibility enforced - explicit bash mode
        set -euo pipefail

        echo "Starting npm installation..."
        echo "Platform: $(uname -s), Runner: $RUNNER_OS"
        echo "Using project-level .npmrc config (network retries, caching, etc.)"

        # Show current npm config for debugging
        echo "Current npm configuration:"
        npm config list | grep -E "(fetch-retries|registry|fund|audit)" || true

        # ESM project special handling: ensure 52 devDependencies are correctly installed
        echo "Detected ESM project, installing large dependency collection..."

        # Set ESM-friendly npm environment variables
        export NPM_CONFIG_MAXSOCKETS="8"
        export NPM_CONFIG_FUND="false"
        export NPM_CONFIG_AUDIT="false"
        export NPM_CONFIG_PROGRESS="false"

        install_success=false

        # Cross-platform timeout function (handles differences between GNU/BSD timeout)
        run_with_timeout() {
          local timeout_seconds=$1
          shift
          
          # Use GitHub Actions timeout for cross-platform compatibility
          if command -v timeout >/dev/null 2>&1; then
            # GNU/Linux timeout (most GitHub runners)
            timeout "${timeout_seconds}" "$@"
          else
            # Fallback for systems without timeout
            echo "WARNING: timeout command not available, running without timeout limit"
            "$@"
          fi
        }

        # Enhanced installation logic: 4 retries with progressive strategy
        for i in 1 2 3 4; do 
          echo "Attempt $i for dependency installation (ESM + 52 devDeps)..."
          
          if [ "$i" -eq 1 ]; then
            # First attempt: standard installation, 8-minute timeout
            if run_with_timeout 480 npm ci 2>&1 | tee npm_install.log; then
              install_success=true
            fi
          elif [ "$i" -eq 2 ]; then
            # Second attempt: increased timeout and network optimization
            echo "Increasing timeout for large dependency packages..."
            if run_with_timeout 720 npm ci --maxsockets=5 2>&1 | tee npm_install.log; then
              install_success=true
            fi
          elif [ "$i" -eq 3 ]; then
            # Third attempt: serial installation mode
            echo "Using serial installation mode (prevent network congestion)..."
            if run_with_timeout 900 npm ci --maxsockets=1 2>&1 | tee npm_install.log; then
              install_success=true
            fi
          else
            # Final attempt: extended timeout (npm ci, no lock changes)
            echo "Final attempt with extended timeout (npm ci, no lock changes)..."
            if run_with_timeout 900 npm ci 2>&1 | tee npm_install.log; then
              install_success=true
            fi
          fi
          
          if [ "$install_success" = "true" ]; then
            echo "SUCCESS: Attempt $i succeeded"
            
            # ESM project enhanced verification
            verification_errors=0
            
            # Cross-platform array handling: Verify critical devDependencies tools
            # Define tools as space-separated string to avoid bash array compatibility issues
            dev_tools_list="eslint tsc vitest playwright"
            
            for tool in $dev_tools_list; do
              # Enhanced check: node_modules/.bin first, then npm list verification
              if [ -f "node_modules/.bin/$tool" ] || [ -f "node_modules/.bin/${tool}.cmd" ]; then
                echo "SUCCESS: $tool (dev dependency) available in node_modules/.bin/"
              elif npm list "$tool" >/dev/null 2>&1; then
                echo "SUCCESS: $tool (dev dependency) found via npm list"
              else
                echo "WARNING: $tool not available in node_modules or npm registry"
                verification_errors=$((verification_errors + 1))
              fi
            done
            
            # Verify rollup native platform package on Linux x64
            if [ "$(uname -s)" = "Linux" ] && [ "$(uname -m)" = "x86_64" ]; then
              echo "Verifying Rollup native platform package for Linux x64..."
              if node -e "require('@rollup/rollup-linux-x64-gnu'); console.log('rollup native ok')" 2>/dev/null; then
                echo "SUCCESS: @rollup/rollup-linux-x64-gnu platform package verified"
              else
                echo "ERROR: missing @rollup/rollup-linux-x64-gnu platform package"
                echo "This indicates optionalDependencies installation failure"
                verification_errors=$((verification_errors + 1))
              fi
            fi
            
            # Cross-platform node_modules structure verification
            if [ -d "node_modules" ] && [ -d "node_modules/.bin" ]; then
              # Cross-platform directory counting (avoid GNU-specific options)
              if command -v find >/dev/null 2>&1; then
                node_count=$(find node_modules -maxdepth 1 -type d 2>/dev/null | wc -l || echo "0")
              else
                node_count=$(ls -1d node_modules/*/ 2>/dev/null | wc -l || echo "0")
              fi
              
              # Cross-platform size calculation
              if command -v du >/dev/null 2>&1; then
                node_modules_size=$(du -sh node_modules 2>/dev/null | cut -f1 || echo "unknown")
              else
                node_modules_size="calculated"
              fi
              
              echo "SUCCESS: node_modules verification passed ($node_count packages, size: $node_modules_size)"
            else
              echo "ERROR: node_modules directory verification failed"
              verification_errors=$((verification_errors + 1))
            fi
            
            # Verify package.json type: module (cross-platform grep)
            if grep -q '"type".*:.*"module"' package.json 2>/dev/null; then
              echo "SUCCESS: ESM module system verification passed"
            fi
            
            if [ "$verification_errors" -eq 0 ]; then
              echo "COMPLETE SUCCESS: ESM project installation and verification fully successful!"
            else
              echo "WARNING: Found $verification_errors verification issues, but installation succeeded"
            fi
            
            exit 0
          fi
          
          # Failure handling
          if [ "$i" -lt 4 ]; then
            wait_time=$((i * 15))
            echo "FAILED: Attempt $i failed, waiting ${wait_time} seconds before retry..."
            
            # Show error log snippet (cross-platform tail)
            if [ -f npm_install.log ]; then
              echo "Error log snippet:"
              if command -v tail >/dev/null 2>&1; then
                tail -10 npm_install.log 2>/dev/null || true
              else
                echo "Last lines of npm_install.log:"
                sed -n '$-9,$p' npm_install.log 2>/dev/null || true
              fi
            fi
            
            sleep "$wait_time"
          fi
        done

        # All attempts failed
        echo "CRITICAL FAILURE: All 4 ESM installation attempts failed!"
        if [ -f npm_install.log ]; then
          echo "Complete error log:"
          cat npm_install.log 2>/dev/null || echo "Could not read log file"
        fi
        exit 1

branding:
  icon: 'download'
  color: 'green'
