name: 'Hardened npm Install'
description: 'Unified npm installation with enhanced reliability for CI/CD systems'
author: 'CI/CD Team'

inputs:
  working-directory:
    description: 'Working directory'
    required: false
    default: '.'
  node-version:
    description: 'Node.js version'
    required: false
    default: '20.x'

# Outputs removed to avoid referencing non-existent step IDs
# Use npm --version and node --version if version info is needed

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js with ESM support
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: 'npm'
    - name: Validate environment variables
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "Validating critical environment variables..."
        echo "NODE_ENV: ${NODE_ENV:-not set}"
        echo "NPM_CONFIG_PRODUCTION: ${NPM_CONFIG_PRODUCTION:-not set}"

        # Validate devDependencies installation environment
        if [ "${NODE_ENV}" != "development" ] || [ "${NPM_CONFIG_PRODUCTION}" != "false" ]; then
          echo "WARNING: Environment variables may prevent devDependencies installation"
          echo "  Recommended: NODE_ENV=development, NPM_CONFIG_PRODUCTION=false"
        fi

    - name: Hardened npm install with ESM support
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "Starting npm installation..."
        echo "Using project-level .npmrc config (network retries, caching, etc.)"

        # Show current npm config for debugging
        echo "Current npm configuration:"
        npm config list | grep -E "(fetch-retries|registry|fund|audit)" || true

        # ESM project special handling: ensure 52 devDependencies are correctly installed
        echo "Detected ESM project, installing large dependency collection..."

        # Set ESM-friendly npm environment variables
        export NPM_CONFIG_MAXSOCKETS="8"
        export NPM_CONFIG_FUND="false"
        export NPM_CONFIG_AUDIT="false"
        export NPM_CONFIG_PROGRESS="false"

        install_success=false

        # Enhanced installation logic: 4 retries with progressive strategy
        for i in 1 2 3 4; do 
          echo "Attempt $i for dependency installation (ESM + 52 devDeps)..."
          
          if [ $i -eq 1 ]; then
            # First attempt: standard installation, 8-minute timeout
            if timeout 480 npm ci --no-optional 2>&1 | tee npm_install.log; then
              install_success=true
            fi
          elif [ $i -eq 2 ]; then
            # Second attempt: increased timeout and network optimization
            echo "Increasing timeout for large dependency packages..."
            if timeout 720 npm ci --maxsockets=5 --no-optional 2>&1 | tee npm_install.log; then
              install_success=true
            fi
          elif [ $i -eq 3 ]; then
            # Third attempt: serial installation mode
            echo "Using serial installation mode (prevent network congestion)..."
            if timeout 900 npm ci --maxsockets=1 --no-optional 2>&1 | tee npm_install.log; then
              install_success=true
            fi
          else
            # Final attempt: complete reinstallation
            echo "Cleaning all caches and files, reinstalling..."
            rm -rf node_modules package-lock.json
            npm cache clean --force 2>/dev/null || true
            if timeout 900 npm install --no-optional 2>&1 | tee npm_install.log; then
              install_success=true
            fi
          fi
          
          if [ "$install_success" = true ]; then
            echo "SUCCESS: Attempt $i succeeded"
            
            # ESM project enhanced verification
            verification_errors=0
            
            # Verify critical devDependencies tools
            dev_tools=("eslint" "tsc" "vitest" "playwright")
            for tool in "${dev_tools[@]}"; do
              if command -v "$tool" > /dev/null 2>&1; then
                echo "SUCCESS: $tool (dev dependency) available"
              else
                echo "WARNING: $tool not available"
                ((verification_errors++))
              fi
            done
            
            # Verify node_modules structure
            if [ -d "node_modules" ] && [ -d "node_modules/.bin" ]; then
              node_count=$(find node_modules -maxdepth 1 -type d | wc -l 2>/dev/null || echo "0")
              node_modules_size=$(du -sh node_modules 2>/dev/null | cut -f1 || echo "unknown")
              echo "SUCCESS: node_modules verification passed ($node_count packages, size: $node_modules_size)"
            else
              echo "ERROR: node_modules directory verification failed"
              ((verification_errors++))
            fi
            
            # Verify package.json type: module
            if grep -q '"type".*:.*"module"' package.json 2>/dev/null; then
              echo "SUCCESS: ESM module system verification passed"
            fi
            
            if [ $verification_errors -eq 0 ]; then
              echo "COMPLETE SUCCESS: ESM project installation and verification fully successful!"
            else
              echo "WARNING: Found $verification_errors verification issues, but installation succeeded"
            fi
            
            exit 0
          fi
          
          # Failure handling
          if [ $i -lt 4 ]; then
            wait_time=$((i * 15))
            echo "FAILED: Attempt $i failed, waiting ${wait_time} seconds before retry..."
            
            # Show error log snippet
            if [ -f npm_install.log ]; then
              echo "Error log snippet:"
              tail -10 npm_install.log || true
            fi
            
            sleep $wait_time
          fi
        done

        # All attempts failed
        echo "CRITICAL FAILURE: All 4 ESM installation attempts failed!"
        if [ -f npm_install.log ]; then
          echo "Complete error log:"
          cat npm_install.log
        fi
        exit 1

branding:
  icon: 'download'
  color: 'green'
