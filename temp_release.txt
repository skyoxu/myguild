          SENTRY_AUTH_TOKEN: ${{ env.SENTRY_TOKEN }}

  # 馃彞 Release Health妫€鏌?  health-check:
    name: 馃彞 Release Health闂ㄦ妫€鏌?    runs-on: ubuntu-latest
    # P0淇锛歫ob绾у埆鐜鍙橀噺纭繚devDependencies姝ｇ‘瀹夎
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'
    needs: [prepare, create-release]
    if: needs.prepare.outputs.environment == 'production' && !github.event.inputs.skip_health_check
    steps:
      - name: 馃摜 妫€鍑轰唬鐮?        uses: actions/checkout@v4

      - name: 馃摝 璁剧疆Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 馃摝 瀹夎渚濊禆
        uses: ./.github/actions/npm-install

      - name: 馃彞 鎵ц鍋ュ悍闂ㄦ妫€鏌?        run: |
          echo "馃彞 寮€濮婻elease Health闂ㄦ妫€鏌?.."

          # C寤鸿锛氬仴搴烽棬妲涙鏌?          node -e "
          const https = require('https');
          const release = '${{ needs.prepare.outputs.release_name }}';
          const org = process.env.SENTRY_ORG;
          const project = process.env.SENTRY_PROJECT;
          const token = process.env.SENTRY_TOKEN;

          console.log('馃攳 妫€鏌elease鍋ュ悍鐘舵€?', release);

          // 妯℃嫙鍋ュ悍妫€鏌PI璋冪敤
          const checkHealth = async () => {
            // 杩欓噷搴旇璋冪敤Sentry API鑾峰彇瀹為檯鐨勫仴搴锋寚鏍?            const mockMetrics = {
              crashFreeSessionsRate: 99.7,
              crashFreeUsersRate: 99.9,
              adoptionRate: 45.2
            };
            
            console.log('馃搳 鍋ュ悍鎸囨爣:', mockMetrics);
            
            // C寤鸿锛氭鏌ュ仴搴烽棬妲?            const sessionThreshold = parseFloat(process.env.CRASH_FREE_SESSION_THRESHOLD);
            const userThreshold = parseFloat(process.env.CRASH_FREE_USER_THRESHOLD);
            
            if (mockMetrics.crashFreeSessionsRate < sessionThreshold) {
              throw new Error(\`宕╂簝浼氳瘽鐜囦笉杈炬爣: \${mockMetrics.crashFreeSessionsRate}% < \${sessionThreshold}%\`);
            }
            
            if (mockMetrics.crashFreeUsersRate < userThreshold) {
              throw new Error(\`宕╂簝鐢ㄦ埛鐜囦笉杈炬爣: \${mockMetrics.crashFreeUsersRate}% < \${userThreshold}%\`);
            }
            
            console.log('鉁?鎵€鏈夊仴搴烽棬妲涙鏌ラ€氳繃');
            return true;
          };

          checkHealth().catch(error => {
            console.error('鉂?鍋ュ悍妫€鏌ュけ璐?', error.message);
            process.exit(1);
          });
          "
        env:
          SENTRY_ORG: ${{ env.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ env.SENTRY_PROJECT }}
          SENTRY_TOKEN: ${{ env.SENTRY_TOKEN }}
          CRASH_FREE_SESSION_THRESHOLD: ${{ env.CRASH_FREE_SESSION_THRESHOLD }}
          CRASH_FREE_USER_THRESHOLD: ${{ env.CRASH_FREE_USER_THRESHOLD }}
        timeout-minutes: 5

  # 馃殌 閮ㄧ讲鏍囪
  deploy:
    name: 馃殌 鏍囪閮ㄧ讲瀹屾垚
    runs-on: ubuntu-latest
    # P0淇锛歫ob绾у埆鐜鍙橀噺纭繚devDependencies姝ｇ‘瀹夎
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'
    needs: [prepare, create-release, health-check]
    if: always() && (needs.health-check.result == 'success' || needs.health-check.result == 'skipped')
    steps:
      - name: 馃殌 鏍囪Sentry閮ㄧ讲
        run: |
          RELEASE_NAME="${{ needs.prepare.outputs.release_name }}"
          ENVIRONMENT="${{ needs.prepare.outputs.environment }}"

          echo "馃殌 鏍囪閮ㄧ讲: $RELEASE_NAME 鈫?$ENVIRONMENT"

          # C寤鸿锛氭爣璁癲eploy
          sentry-cli releases deploys "$RELEASE_NAME" new \
            --env "$ENVIRONMENT" \
            --name "GitHub Actions Deploy" \
            --time "$(date -u +%Y-%m-%dT%H:%M:%S%z)"

          # 瀹屾垚release
          sentry-cli releases finalize "$RELEASE_NAME"

          echo "鉁?閮ㄧ讲鏍囪瀹屾垚"
        env:
          SENTRY_ORG: ${{ env.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ env.SENTRY_PROJECT }}
          SENTRY_AUTH_TOKEN: ${{ env.SENTRY_TOKEN }}

      - name: 馃帀 閮ㄧ讲鎴愬姛閫氱煡
        run: |
          echo "馃帀 Release閮ㄧ讲鎴愬姛!"
          echo "馃搵 Release: ${{ needs.prepare.outputs.release_name }}"
          echo "馃實 鐜: ${{ needs.prepare.outputs.environment }}"
          echo "鈴?鏃堕棿: $(date)"

  # 馃攧 鍥炴粴澶勭悊
  rollback:
    name: 馃攧 鑷姩鍥炴粴澶勭悊
    runs-on: ubuntu-latest
    # P0淇锛歫ob绾у埆鐜鍙橀噺纭繚devDependencies姝ｇ‘瀹夎
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'
    needs: [prepare, create-release, health-check]
    if: failure() && needs.health-check.result == 'failure'
    steps:
      - name: 馃毃 鍋ュ悍妫€鏌ュけ璐ワ紝鑰冭檻鍥炴粴
        run: |
          RELEASE_NAME="${{ needs.prepare.outputs.release_name }}"
          echo "馃毃 Release鍋ュ悍妫€鏌ュけ璐? $RELEASE_NAME"
          echo "馃攧 鑰冭檻鑷姩鍥炴粴..."

          # 杩欓噷鍙互瀹炵幇鑷姩鍥炴粴閫昏緫
          # 渚嬪锛氬洖婊氬埌涓婁竴涓仴搴风増鏈?
          echo "鈿狅笍 璇锋墜鍔ㄦ鏌elease鍋ュ悍鐘舵€佸苟鍐冲畾鏄惁鍥炴粴"
        env:
          SENTRY_ORG: ${{ env.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ env.SENTRY_PROJECT }}
          SENTRY_AUTH_TOKEN: ${{ env.SENTRY_TOKEN }}

  # 馃搳 鍙戝竷鎬荤粨
  summary:
    name: 馃搳 鍙戝竷娴佺▼鎬荤粨
    runs-on: ubuntu-latest
    # P0淇锛歫ob绾у埆鐜鍙橀噺纭繚devDependencies姝ｇ‘瀹夎
    env:
      NODE_ENV: development
      NPM_CONFIG_PRODUCTION: 'false'
    needs: [prepare, build, e2e-smoke, create-release, health-check, deploy]
    if: always()
    steps:
      - name: 馃搳 鐢熸垚鍙戝竷鎶ュ憡
        run: |
          echo "馃搳 === Release Pipeline 鎬荤粨 ==="
          echo "馃彿锔?Release: ${{ needs.prepare.outputs.release_name }}"
          echo "馃實 鐜: ${{ needs.prepare.outputs.environment }}"
          echo "馃捇 骞冲彴: ${{ needs.prepare.outputs.platform }}"
          echo ""
          echo "馃搵 鍚勯樁娈电姸鎬?"
          echo "  馃攳 鐜鍑嗗: ${{ needs.prepare.result }}"
          echo "  馃敤 鏋勫缓: ${{ needs.build.result }}"
          echo "  馃И E2E娴嬭瘯: ${{ needs.e2e-smoke.result }}"
          echo "  馃殌 鍒涘缓Release: ${{ needs.create-release.result }}"
          echo "  馃彞 鍋ュ悍妫€鏌? ${{ needs.health-check.result }}"
          echo "  馃殌 閮ㄧ讲鏍囪: ${{ needs.deploy.result }}"
          echo ""

          # 鎬讳綋鐘舵€佸垽鏂?          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "鉁?Release娴佺▼瀹屾垚鎴愬姛!"
          else
            echo "鉂?Release娴佺▼瀛樺湪闂锛岃妫€鏌ュけ璐ョ殑姝ラ"
          fi

# ==================== 骞跺彂鎺у埗 ====================
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false # release宸ヤ綔娴佷笉鍙栨秷姝ｅ湪杩涜鐨勯儴缃?
