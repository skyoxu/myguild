{
  "permissions": {
    "allow": [
      "Bash(set GITHUB_REF=refs/heads/feature/test)",
      "Bash(git push:*)",
      "mcp__zen-mcp-server__thinkdeep",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "Bash(npx actionlint:*)",
      "mcp__brave-search__brave_web_search",
      "Bash(npx:*)",
      "Bash(git add:*)",
      "WebFetch(domain:github.com)",
      "Bash(npm run lint)",
      "Bash(npm install:*)",
      "Bash(git commit:*)",
      "Bash(echo \"EXIT_CODE: $?\")",
      "Bash(git rm:*)",
      "Bash(npm run lint:*)",
      "Bash(npm run test:*)",
      "Bash(npm test)",
      "Bash(gh repo view:*)",
      "Bash(find:*)",
      "mcp__zen-mcp-server__chat",
      "Bash(node:*)",
      "Bash(for:*)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(grep:*)",
      "Bash(done)",
      "Read(//c//**)",
      "Bash(git checkout:*)",
      "Bash(npm run format:*)",
      "Bash(gh api:*)",
      "Bash(cat:*)",
      "Bash(Select-String:*)",
      "Bash(powershell:*)",
      "Bash(sed:*)",
      "mcp__zen-mcp-server__debug",
      "Bash(gh run list:*)",
      "Bash(actionlint:*)",
      "Bash(rg:*)",
      "Bash(curl:*)",
      "Bash(go install:*)",
      "Bash(py -m pip list:*)",
      "Bash(py:*)",
      "Bash(npm run overlay:gen:*)",
      "Bash(npm run overlay:check:*)",
      "Bash(git config:*)",
      "Bash(npm config:*)",
      "Bash(git reset:*)",
      "Bash(.actionlint.exe .github/workflows/release-emergency-rollback.yml)",
      "Bash(./actionlint.exe:*)",
      "Bash(npm test:*)",
      "Bash(git diff:*)",
      "Bash(__NEW_LINE__ echo \"测试 lint:src 命令（严格检查src目录）：\")",
      "Bash(echo:*)",
      "Bash(__NEW_LINE__ echo \"测试 lint:tests 命令（放宽检查tests目录）：\")",
      "Bash(__NEW_LINE__ echo \"测试完整 lint 命令（组合检查）：\")",
      "Bash(awk:*)",
      "Bash(ESLINT_MAX_WARNINGS=50 node scripts/eslint-baseline-gate.mjs)",
      "Bash(where trufflehog)",
      "Bash(pwsh:*)",
      "Bash([ -f \".trufflehog-exclude.txt\" ])",
      "Bash(trufflehog:*)",
      "Bash(npm run typecheck:*)",
      "Bash(npm run build:*)",
      "Bash(gh workflow:*)",
      "Bash(npm audit:*)",
      "Bash(npm run prettier:check:*)",
      "Bash(npm run:*)",
      "mcp__zen-mcp-server__challenge",
      "Bash(shellcheck:*)",
      "Bash(where shellcheck)",
      "Bash(where actionlint)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "Bash(sync)",
      "Bash(npm ls:*)",
      "Bash(timeout:*)",
      "Bash(cross-env:*)",
      "Bash(set CI=true)",
      "Bash(taskkill:*)",
      "Bash(tsc:*)",
      "Bash(dir dist)",
      "Bash(dir dist-electron)",
      "mcp__zen-mcp-server__consensus",
      "Bash(do echo \"修复 $file\")",
      "Bash(git restore:*)",
      "Bash(ELECTRON_ENABLE_LOGGING=1 DEBUG=electron* npx playwright test tests/e2e/security/session-ready.spec.ts --project=electron-security-audit)",
      "Bash(git fetch:*)",
      "Bash(dir C:buildgamevitegamedist)",
      "Bash(dir C:buildgamevitegamesrchooks)",
      "Bash(vitest:*)",
      "Bash(gh run view:*)",
      "Bash(bash:*)",
      "Bash(dir \"C:\\buildgame\\vitegame\\scripts\\ci\" /b)",
      "Bash(choco install:*)",
      "Bash(winget install:*)",
      "Read(//c/Program Files/**)",
      "Read(//c/Users/**)",
      "Bash(\"/c/Users/weiruan/AppData/Local/Microsoft/WinGet/Packages/koalaman.shellcheck_Microsoft.Winget.Source_8wekyb3d8bbwe/shellcheck.exe\" --version)",
      "Bash(export PATH=\"$PATH:/c/Users/weiruan/AppData/Local/Microsoft/WinGet/Packages/koalaman.shellcheck_Microsoft.Winget.Source_8wekyb3d8bbwe\")",
      "Bash(chmod:*)",
      "Bash(./scripts/ci/verify-shellcheck-fixes.sh:*)",
      "Bash(where.exe shellcheck:*)",
      "Bash(winget list:*)",
      "Bash(dir \"C:\\Users\\weiruan\\AppData\\Local\\Microsoft\\WinGet\\Packages\\koalaman.shellcheck_Microsoft.Winget.Source_8wekyb3d8bbwe\" /b)",
      "Bash(git show:*)",
      "WebFetch(domain:api.github.com)",
      "Bash(\"/c/Users/weiruan/AppData/Local/Microsoft/WinGet/Packages/koalaman.shellcheck_Microsoft.Winget.Source_8wekyb3d8bbwe/shellcheck.exe\" .github/workflows/branch-protection-encoding-guard.yml)",
      "Bash(git mv:*)",
      "Bash(git pull:*)",
      "Bash(dir test-resultsartifactssmoke-perf--smoke-Perf-Smoke-Suite-smoke-App-renders-electron-smoke-tests)",
      "Bash(dir:*)",
      "Bash(set VITE_E2E_SMOKE=true)",
      "Bash(set ELECTRON_ENABLE_LOGGING=1)",
      "Bash(del nul)",
      "Bash(GITHUB_ACTIONS=true GITHUB_EVENT_NAME=pull_request node scripts/ci/coverage-config.cjs)",
      "Bash(playwright test:*)",
      "Bash($env:CI = \"true\")",
      "Bash(do echo \"第$i次测试:\")",
      "Bash(set GITHUB_ACTIONS=true)",
      "Bash(set GITHUB_EVENT_NAME=pull_request)",
      "Bash(set GITHUB_WORKFLOW=\"CI\")",
      "Bash(set SENTRY_ENVIRONMENT=ci)",
      "Bash(set NODE_ENV=test)",
      "Bash(certutil:*)",
      "Bash(md5sum:*)",
      "mcp__filesystem__read_text_file",
      "Bash(if exist \"node_modules\\.cache\" rmdir /S /Q \"node_modules\\.cache\")",
      "Bash(if exist \".e2e-build-cache\" rmdir /S /Q \".e2e-build-cache\")",
      "Bash(if exist \"test-results\" rmdir /S /Q \"test-results\")",
      "Bash(if exist \"playwright-report\" rmdir /S /Q \"playwright-report\")",
      "Bash(del test-dom-debug.mjs)",
      "Read(//c/**)",
      "Bash(npm uninstall:*)",
      "Bash(if [ -f \".env.cache-bust\" ])",
      "Bash(then echo \"✅ .env.cache-bust file exists\")",
      "Bash(else echo \"❌ .env.cache-bust file not found\")",
      "Bash(fi)",
      "Bash(if [ -d \"node_modules/.cache\" ])",
      "Bash(if [ -d \"test-results\" ])",
      "Bash(then rm -rf \"test-results\")",
      "Bash(if [ -d \"playwright-report\" ])",
      "Bash(then rm -rf \"playwright-report\")",
      "Bash(if [ -d \"$TEMP/playwright-transform-cache\" ])",
      "Bash(then rm -rf \"$TEMP/playwright-transform-cache\")",
      "Bash(else echo \"TEMP 缓存不存在\")",
      "Bash(ELECTRON_ENABLE_LOGGING=1 DEBUG=electron* npx playwright test tests/e2e/smoke/electron-launch-demo.spec.ts --project=electron-smoke-tests --reporter=line --timeout=30000 --max-failures=1)",
      "Bash(do cp \"$f\" \"$f%.js.cjs\")",
      "Bash(if exist \"node_modules\" rmdir /S /Q \"node_modules\")",
      "Bash(if exist \"package-lock.json\" del \"package-lock.json\")",
      "Bash(git branch:*)",
      "Bash(git remote:*)",
      "Bash(git check-ignore:*)",
      "Bash(while IFS= read -r line)",
      "Bash(yamllint:*)",
      "Bash(do echo \"=== 检查 $file ===\")",
      "Bash(Get-ChildItem .github/workflows/*.yml)",
      "Bash(Select-Object -First 2 })",
      "Bash(while read file)",
      "Bash(xxd:*)",
      "Bash(head:*)",
      "Bash(set SECURITY_TEST_MODE=true)",
      "Bash(.actionlint.exe .github/workflows/validate-workflows.yml)",
      "Bash(git tag:*)",
      "Bash(Get-Content \"C:\\buildgame\\vitegame\\.github\\workflows\\release-emergency-rollback.yml\")",
      "Bash(.actionlint.exe:*)",
      "Bash(gh auth:*)",
      "Bash(git rev-parse:*)",
      "Bash(\"C:\\Users\\weiruan\\AppData\\Local\\Microsoft\\WinGet\\Packages\\rhysd.actionlint_Microsoft.Winget.Source_8wekyb3d8bbwe\\actionlint.exe\" .github/workflows/pr-performance-check.yml)",
      "mcp__zen-mcp-server__codereview",
      "Bash(git clone:*)",
      "Bash(docker:*)",
      "Bash(set FAISS_PATH=./faiss_storage)",
      "Bash(set OPENAI_API_KEY=sk-test-key-placeholder)",
      "Bash(set USER=claude-user)",
      "Bash(set USER=default_user)",
      "mcp__zen-mcp-server__secaudit",
      "Bash(netstat:*)",
      "Bash(tasklist)",
      "Bash(pip install:*)",
      "Bash(start https://github.com/skyoxu/myguild/pull/new/test/pr-gatekeeper-fix)",
      "Bash(git merge:*)",
      "Bash(start https://github.com/skyoxu/myguild/pull/new/test/trigger-performance-check)",
      "Bash(where python)",
      "Bash(tasklist:*)",
      "Bash(wmic process:*)",
      "Bash(cmd /c:*)",
      "Bash(where mem0)",
      "Bash(npm search:*)",
      "Bash(where py)",
      "WebSearch",
      "Bash(gh pr create:*)",
      "WebFetch(domain:docs.trufflesecurity.com)",
      "Bash(start https://github.com/skyoxu/myguild/actions)",
      "Bash(set)",
      "Bash(gh pr list:*)",
      "Bash(set GITHUB_SHA=09249683f7ab1c37023c90c4faa6a95a98b64c29)",
      "Bash(start https://github.com/skyoxu/myguild/compare/main...test/trigger-performance-check)",
      "Bash(ping:*)",
      "Bash(start Docker_Desktop_Installer.exe)",
      "WebFetch(domain:docs.mem0.ai)",
      "Bash(pipx install:*)",
      "Bash(mem0-mcp-for-pm:*)",
      "Bash(uv pip install:*)",
      "Bash(uv venv:*)",
      "Bash(.venvScriptsactivate)",
      "Bash(.venvScriptsactivate.bat)",
      "Bash(uv sync:*)",
      "Bash(uv:*)",
      "Bash(set UV_HTTP_TIMEOUT=120)",
      "Bash(set TRANSPORT=stdio)",
      "Bash(start \"https://github.com/skyoxu/myguild/actions/workflows/release-prepare.yml\")",
      "Bash(start \"https://github.com/skyoxu/myguild/actions/workflows/release-ramp.yml\")",
      "Bash(\"C:\\Users\\weiruan\\AppData\\Local\\Microsoft\\WinGet\\Packages\\rhysd.actionlint_Microsoft.Winget.Source_8wekyb3d8bbwe\\actionlint.exe\" .github/workflows/staged-release.yml)",
      "Bash(start https://github.com/skyoxu/myguild/actions/workflows/staged-release.yml)",
      "Bash(VERSION=0.1.1 node scripts/ci/create-electron-feeds.mjs)",
      "Bash(FEED_FILE=dist/latest.yml STAGE=5 node scripts/ci/release-ramp-patch-staging.mjs)"
    ],
    "deny": [],
    "ask": [],
    "additionalDirectories": ["C:\\c\\buildgame"]
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "zen-mcp-server",
    "sequential-thinking",
    "context7",
    "filesystem",
    "task-master-ai",
    "serena",
    "brave-search",
    "mem0"
  ]
}
