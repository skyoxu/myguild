<testsuites id="" name="" tests="30" failures="1" skipped="11" errors="0" time="48.162729999999996">
<testsuite name="smoke\electron-launch-demo.spec.ts" timestamp="2025-08-31T12:13:42.568Z" hostname="electron-smoke-tests" tests="8" failures="0" skipped="0" time="35.474" errors="0">
<testcase name="Electron应用基础功能 › 应用启动和窗口创建" classname="smoke\electron-launch-demo.spec.ts" time="5.215">
<system-out>
<![CDATA[🚀 开始启动 Electron 应用...
✅ Electron 应用启动成功，耗时: 1338ms
🪟 等待主窗口创建...
✅ 主窗口创建成功，耗时: 1550ms，重试次数: 0
viewportSize() 返回 undefined，跳过尺寸验证
]]>
</system-out>
</testcase>
<testcase name="Electron应用基础功能 › 安全基线验证 - 上下文隔离" classname="smoke\electron-launch-demo.spec.ts" time="4.338">
<system-out>
<![CDATA[🔒 开始安全基线验证测试...
🪟 等待主窗口创建(安全测试)...
ℹ️ 未检测到contextBridge API，请确认是否需要IPC通信
]]>
</system-out>
</testcase>
<testcase name="Electron应用基础功能 › CSP策略生效验证" classname="smoke\electron-launch-demo.spec.ts" time="4.319">
<system-out>
<![CDATA[🛡️ 开始CSP策略验证测试...
🪟 等待主窗口创建(CSP测试)...
]]>
</system-out>
</testcase>
<testcase name="Electron应用基础功能 › 主进程和渲染进程分离" classname="smoke\electron-launch-demo.spec.ts" time="4.252">
<system-out>
<![CDATA[⚙️ 开始进程分离验证测试...
🪟 等待主窗口创建(进程分离测试)...
]]>
</system-out>
</testcase>
<testcase name="性能和响应性验证 › 应用启动时间测试" classname="smoke\electron-launch-demo.spec.ts" time="4.272">
<system-out>
<![CDATA[⏱️ 开始启动时间性能测试...
🪟 等待主窗口创建(性能测试)...
应用启动时间: 2630ms
]]>
</system-out>
</testcase>
<testcase name="性能和响应性验证 › 窗口响应性测试" classname="smoke\electron-launch-demo.spec.ts" time="4.309">
<system-out>
<![CDATA[🎯 开始窗口响应性测试...
🪟 等待主窗口创建(响应性测试)...
ℹ️ 跳过UI交互测试（无可交互元素）
]]>
</system-out>
</testcase>
<testcase name="错误处理和稳定性 › 应用意外退出恢复" classname="smoke\electron-launch-demo.spec.ts" time="4.524">
<system-out>
<![CDATA[🔄 开始应用稳定性测试...
🪟 等待主窗口创建(稳定性测试)...
]]>
</system-out>
</testcase>
<testcase name="错误处理和稳定性 › 内存泄漏基础检查" classname="smoke\electron-launch-demo.spec.ts" time="4.245">
<system-out>
<![CDATA[🧠 开始内存泄漏检查测试...
🪟 等待主窗口创建(内存测试)...
内存使用情况: { used: [33m12700000[39m, total: [33m14300000[39m, limit: [33m3760000000[39m }
]]>
</system-out>
</testcase>
</testsuite>
<testsuite name="smoke.electron.spec.ts" timestamp="2025-08-31T12:13:42.568Z" hostname="electron-smoke-tests" tests="11" failures="1" skipped="0" time="4.815" errors="0">
<testcase name="07章 Electron 基线验证 › 应用启动并显示主窗口" classname="smoke.electron.spec.ts" time="1.32">
<system-out>
<![CDATA[✅ 应用启动正常，标题: "Vite + React + TS"
]]>
</system-out>
</testcase>
<testcase name="07章 Electron 基线验证 › 安全基线：Node.js 全局变量隔离" classname="smoke.electron.spec.ts" time="0.012">
</testcase>
<testcase name="07章 Electron 基线验证 › 安全基线：CSP 策略验证" classname="smoke.electron.spec.ts" time="0.012">
<failure message="smoke.electron.spec.ts:84:3 安全基线：CSP 策略验证" type="FAILURE">
<![CDATA[  [electron-smoke-tests] › smoke.electron.spec.ts:84:3 › 07章 Electron 基线验证 › 安全基线：CSP 策略验证 ─────────

    Error: expect(received).toContain(expected) // indexOf

    Expected substring: "default-src 'none'"
    Received string:    "default-src 'self'; script-src 'self'; style-src 'self'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https://sentry.io; object-src 'none'; base-uri 'self'; form-action 'self'; frame-ancestors 'none';"

      94 |
      95 |     // 验证严格的CSP指令（更安全的 'none' 默认策略）
    > 96 |     expect(cspContent).toContain("default-src 'none'"); // 更严格的策略
         |                        ^
      97 |     expect(cspContent).toContain("script-src 'self'");
      98 |     expect(cspContent).toContain("style-src 'self'");
      99 |
        at C:\buildgame\vitegame\tests\e2e\smoke.electron.spec.ts:96:24

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ..\..\test-results\artifacts\smoke.electron-07章-Electron-基线验证-安全基线：CSP-策略验证-electron-smoke-tests\test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ..\..\test-results\artifacts\smoke.electron-07章-Electron-基线验证-安全基线：CSP-策略验证-electron-smoke-tests\error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|artifacts\smoke.electron-07章-Electron-基线验证-安全基线：CSP-策略验证-electron-smoke-tests\test-failed-1.png]]

[[ATTACHMENT|artifacts\smoke.electron-07章-Electron-基线验证-安全基线：CSP-策略验证-electron-smoke-tests\error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="07章 Electron 基线验证 › 预加载脚本：白名单 API 验证" classname="smoke.electron.spec.ts" time="1.316">
<system-out>
<![CDATA[🔍 暴露的 API 键: []
🔍 全部window键(前20个): [
  [32m'window'[39m,      [32m'self'[39m,
  [32m'document'[39m,    [32m'name'[39m,
  [32m'location'[39m,    [32m'customElements'[39m,
  [32m'history'[39m,     [32m'navigation'[39m,
  [32m'locationbar'[39m, [32m'menubar'[39m,
  [32m'personalbar'[39m, [32m'scrollbars'[39m,
  [32m'statusbar'[39m,   [32m'toolbar'[39m,
  [32m'status'[39m,      [32m'closed'[39m,
  [32m'frames'[39m,      [32m'length'[39m,
  [32m'top'[39m,         [32m'opener'[39m
]
🔍 electronAPI类型: undefined
🔍 electronAPI内容: [90mundefined[39m
🔍 customAPI状态: [33mfalse[39m
🔍 customAPI内容: [90mundefined[39m
📋 沙盒模式安全性优先，预加载API功能降级是可接受的权衡
]]>
</system-out>
<system-err>
<![CDATA[⚠️ 沙盒模式下预加载脚本功能受限，这是Electron的已知限制
]]>
</system-err>
</testcase>
<testcase name="07章 Electron 基线验证 › 窗口属性：安全配置验证" classname="smoke.electron.spec.ts" time="0.015">
<system-out>
<![CDATA[✅ 安全三开关硬断言验证通过 - 主进程侧确认
📋 安全配置详情: {
  nodeIntegration: [33mfalse[39m,
  contextIsolation: [33mtrue[39m,
  sandbox: [33mtrue[39m,
  webSecurity: [33mtrue[39m
}
]]>
</system-out>
</testcase>
<testcase name="07章 Electron 基线验证 › 基本交互：应用响应性测试" classname="smoke.electron.spec.ts" time="0.102">
<system-out>
<![CDATA[✅ 交互响应时间: 100ms
]]>
</system-out>
</testcase>
<testcase name="07章 Electron 基线验证 › 内存使用：基线检查" classname="smoke.electron.spec.ts" time="0.006">
<system-out>
<![CDATA[📊 JS 堆内存使用: 12.11 MB
]]>
</system-out>
</testcase>
<testcase name="07章 Electron 基线验证 › 错误处理：未捕获异常检测" classname="smoke.electron.spec.ts" time="2.012">
</testcase>
<testcase name="07章 Electron 基线验证 › 应用关闭：清理验证" classname="smoke.electron.spec.ts" time="0.005">
<system-out>
<![CDATA[✅ 应用状态检查通过: { isReady: [33mtrue[39m, isPackaged: [33mfalse[39m, windowCount: [33m1[39m }
]]>
</system-out>
</testcase>
<testcase name="07章 构建产物验证 › 构建产物：文件完整性检查" classname="smoke.electron.spec.ts" time="0.01">
<system-out>
<![CDATA[📁 构建产物验证: {
  appName: [32m'Electron'[39m,
  appVersion: [32m'37.2.4'[39m,
  isReady: [33mtrue[39m,
  isPackaged: [33mfalse[39m,
  processVersion: [32m'37.2.4'[39m,
  nodeVersion: [32m'22.17.1'[39m,
  platform: [32m'win32'[39m,
  arch: [32m'x64'[39m,
  nodeEnv: [32m'test'[39m,
  checkedAt: [32m'2025-08-31T12:14:30.234Z'[39m
}
]]>
</system-out>
</testcase>
<testcase name="07章 构建产物验证 › 版本信息：应用元数据验证" classname="smoke.electron.spec.ts" time="0.005">
<system-out>
<![CDATA[📦 应用信息: { version: [32m'37.2.4'[39m, name: [32m'Electron'[39m, ready: [33mtrue[39m }
]]>
</system-out>
</testcase>
</testsuite>
<testsuite name="smoke.electron.spec.ts" timestamp="2025-08-31T12:13:42.568Z" hostname="electron-full-e2e" tests="11" failures="0" skipped="11" time="0" errors="0">
<testcase name="07章 Electron 基线验证 › 应用启动并显示主窗口" classname="smoke.electron.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="07章 Electron 基线验证 › 安全基线：Node.js 全局变量隔离" classname="smoke.electron.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="07章 Electron 基线验证 › 安全基线：CSP 策略验证" classname="smoke.electron.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="07章 Electron 基线验证 › 预加载脚本：白名单 API 验证" classname="smoke.electron.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="07章 Electron 基线验证 › 窗口属性：安全配置验证" classname="smoke.electron.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="07章 Electron 基线验证 › 基本交互：应用响应性测试" classname="smoke.electron.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="07章 Electron 基线验证 › 内存使用：基线检查" classname="smoke.electron.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="07章 Electron 基线验证 › 错误处理：未捕获异常检测" classname="smoke.electron.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="07章 Electron 基线验证 › 应用关闭：清理验证" classname="smoke.electron.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="07章 构建产物验证 › 构建产物：文件完整性检查" classname="smoke.electron.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="07章 构建产物验证 › 版本信息：应用元数据验证" classname="smoke.electron.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
</testsuites>