1) 构建应用：ReferenceError: window is not defined

根因：这组性能测试文件现在是 ESM（.mjs）并在 Node 环境里跑；但你的全局 src/test-setup.ts 在加载时无条件触碰了 window.matchMedia，Node 环境没有 window，因此直接抛错。Vitest 支持文件级指定环境，以及按 glob 选择不同环境；也可以在 setup 里用 typeof window !== 'undefined' 做“环境感知”保护。
vitest.dev
+1

修法一（最小改动，推荐）

仅让这份性能测试在 Node 环境跑，并让 test-setup.ts 在 有 window 才执行补丁。

A. 给该测试文件头部加指令：

// src/tests/docs-scorer-performance.test.mjs
// @vitest-environment node
// （其余不变）


Vitest 的 @vitest-environment 控制注释能对单个文件指定环境。
vitest.dev

B. 修改 src/test-setup.ts，只在存在 window 时才 mock：

// src/test-setup.ts
import { vi } from 'vitest';

const g: any = globalThis;
if (typeof g.window !== 'undefined') {
  Object.defineProperty(g.window, 'matchMedia', {
    writable: true,
    value: vi.fn().mockImplementation((query: string) => ({
      matches: false, media: query,
      addListener: vi.fn(), removeListener: vi.fn(),
      addEventListener: vi.fn(), removeEventListener: vi.fn(), dispatchEvent: vi.fn(),
    })),
  });
}

修法二（如果该测试确实需要 DOM）

把它切到 jsdom 环境（仅这份文件）：

// @vitest-environment jsdom


或在 vitest.config.ts 为不同文件模式指定环境（例如 DOM 测试走 jsdom，性能/Node 工具测试走 node）：

import { defineConfig } from 'vitest/config';
export default defineConfig({
  test: {
    setupFiles: ['src/test-setup.ts'],
    // 针对不同测试文件的环境匹配（Vitest 官方提供）
    environmentMatchGlobs: [
      ['**/*.dom.test.*', 'jsdom'],
      ['**/*.browser.test.*', 'jsdom'],
      ['**/*.performance.test.*', 'node'],
    ],
  },
});


（文件级指令与 environmentMatchGlobs 均为 Vitest 官方支持；配置项写在 Vitest/Vite config 的 test 下。）
vitest.dev
+1

2) 标记部署完成：Release not found

根因：你直接执行了“标记部署”，但对应的 Release 尚未创建/可见，或 Release 名称不一致（例如运行时 SDK 用 app@0.1.1+windows，而 CLI 的 new 步骤用的不是同一个字符串），或者 CLI 没拿到 SENTRY_ORG / SENTRY_PROJECT / SENTRY_AUTH_TOKEN。Sentry 的标准流程是：先创建并（可选）finalize release →（可选）关联 commits / 上传 sourcemaps → 再创建 deploy。文档明确 deploy 命令为 sentry-cli deploys new --release "$VERSION" -e ENV（新版 CLI），并可用 -t <秒数> 传持续时间。
docs.sentry.io

一次跑通的最小步骤（Bash；Windows 机也可 shell: bash）
# 0) 环境变量（GitHub Actions 里通常来自 secrets）
export SENTRY_AUTH_TOKEN="${{ secrets.SENTRY_AUTH_TOKEN }}"
export SENTRY_ORG="your-org"
export SENTRY_PROJECT="your-project"

VERSION="app@0.1.1+windows"  # 必须与 SDK runtime release 一致

# 1) 创建 Release（必要）
sentry-cli releases new "$VERSION" -p "$SENTRY_PROJECT"

# 2) 关联 commits（推荐）
sentry-cli releases set-commits "$VERSION" --auto

# 3) 上传 sourcemaps（如果前端/Electron 渲染进程需要）
sentry-cli sourcemaps upload --release "$VERSION" --dist windows "dist"

# 4) Finalize（可选，但常用）
sentry-cli releases finalize "$VERSION"

# 5) 创建 Deploy（新版推荐语法）
start=$(date -u +%s)
# ... 你的部署动作 ...
end=$(date -u +%s)
sentry-cli deploys new --release "$VERSION" -e production -t $((end-start))


要点：

releases new/set-commits/sourcemaps upload/releases finalize/deploys new 的顺序与用法均见官方文档（包含 -t 传秒数、-e 传环境）。
docs.sentry.io

Sentry CLI 需要 SENTRY_AUTH_TOKEN、SENTRY_ORG、SENTRY_PROJECT 才能正确关联到你的项目/组织。
docs.sentry.io

如果你必须在 PowerShell 下跑（Windows 默认 shell）
$env:SENTRY_AUTH_TOKEN = "${{ secrets.SENTRY_AUTH_TOKEN }}"
$env:SENTRY_ORG = "your-org"
$env:SENTRY_PROJECT = "your-project"
$VERSION = "app@0.1.1+windows"

sentry-cli releases new $VERSION -p $env:SENTRY_PROJECT
sentry-cli releases set-commits $VERSION --auto
sentry-cli sourcemaps upload --release $VERSION --dist windows "dist"
sentry-cli releases finalize $VERSION

$start = [int][double]((Get-Date).ToUniversalTime() - (Get-Date "1970-01-01Z")).TotalSeconds
$end = $start  # 或部署完成后再取一次
sentry-cli deploys new --release $VERSION -e production -t ($end - $start)


小提醒：Sentry 推荐在部署前通知（create/finalize）Release；若未提前创建，首次上报事件也会自动创建一个 release，但这常与 CI 命名不匹配，容易出现“找不到 release”的报错。
docs.sentry.io

你可以直接落地到 CI 的最小改动

测试（Vitest）

在 docs-scorer-performance.test.mjs 顶部加 // @vitest-environment node；

把 src/test-setup.ts 改为“只有存在 window 才 mock”的写法（上面给了片段）；

（可选）在 vitest.config.ts 用 environmentMatchGlobs 按 glob 指定环境，或全局 environment: 'node' + 给 DOM 测试文件加 // @vitest-environment jsdom。
vitest.dev
+1

Sentry（Release→Deploy）

在“标记部署完成”之前插入四步：releases new → set-commits → sourcemaps upload → releases finalize；

改用 sentry-cli deploys new --release "$VERSION" -e production -t <秒数>（不要传 ISO 时间串）；并确保 VERSION 与 SDK runtime 一致；环境变量三件套已注入。
docs.sentry.io

这些修改应用后，当前两处都会转绿：

测试不再在 Node 环境访问 window；

Sentry 会先有同名 Release，再去创建 Deploy，不会“Release not found”。