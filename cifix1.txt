这批报错都是 ShellCheck 的风格/稳健性提醒（不是 YAML 语法了），解决思路很集中：

SC2129：多次 >> file 追加 → 用 一次重定向的分组：{ cmd1; cmd2; } >> "$file"（效率更好，也更“actionlint 友好”）
shellcheck.net
Stack Overflow
Ask Ubuntu

SC2086：所有变量都 加双引号，防止通配/拆词（globbing & word splitting）
shellcheck.net

向运行摘要输出 Markdown：统一写到 $GITHUB_STEP_SUMMARY，并把多条输出放进一次分组里（可搭配 heredoc）
GitHub Docs
The GitHub Blog

下面给你三处“可直接替换”的 run 块模板（把原来的多次 echo >> "$GITHUB_STEP_SUMMARY" 换掉即可），并顺手把 SC2086 一起消了。
1) .github/workflows/release-emergency-rollback.yml（行 286 的 step）
- name: Rollback summary
  if: always()
  shell: bash
  run: |
    summary_file="${GITHUB_STEP_SUMMARY}"
    {
      echo "## 回滚结果总结"
      echo ""
      echo "- **目标版本**: ${{ inputs.rollback_to }}"
      echo "- **回滚窗口**: ${{ inputs.window }}"
      echo "- **触发人**: ${{ github.actor }}"
      echo ""
      echo "### 后续动作清单"
      echo "1. 🔍 立即调查根因"
      echo "2. 🧪 补充回归用例"
      echo "3. 📝 输出复盘记录"
    } >> "${summary_file}"


说明：把 多次追加合并成一次 { …; } >> file，ShellCheck 就不会再报 SC2129；所有变量均已双引号包裹，避免 SC2086。$GITHUB_STEP_SUMMARY 是官方支持的 Job Summary 文件，原生渲染 Markdown。
shellcheck.net
+1
GitHub Docs

2) .github/workflows/release-ramp.yml（行 288 的 step）
- name: Ramp summary
  shell: bash
  run: |
    summary_file="${GITHUB_STEP_SUMMARY}"
    {
      echo "## 分阶段发布结果"
      echo ""
      echo "- **目标阶段**: ${{ inputs.stage }}%"
      echo "- **变更窗口**: ${{ inputs.window }}"
      echo "- **触发人**: ${{ github.actor }}"
    } >> "${summary_file}"


说明：同样用 分组一次重定向 代替多次 >>；表达式由 Actions 先展开，再作为字面传给 Bash，是官方推荐的用法。
GitHub Docs

3) .github/workflows/staged-release.yml（行 406 的 step）

你这里既有 SC2129 又有多处 SC2086。用 heredoc + 一次性重定向最干净：

- name: Generate staged plan & attach summary
  shell: bash
  run: |
    summary_file="${GITHUB_STEP_SUMMARY}"

    # 生成发布计划文件（示例）
    cat <<'PLAN' > release-plan.md
    | 阶段 | 流量 | 条件 |
    |---|---|---|
    | 10% | 10min | 无告警 |
    | 25% | 20min | 无告警 |
    | 50% | 30min | 无告警 |
    PLAN

    {
      echo "## 分阶段发布计划"
      cat "release-plan.md"
      echo ""
      echo "> 触发人: ${{ github.actor }} | 运行: ${{ github.run_id }}"
    } >> "${summary_file}"


关键点：

heredoc 开始/结束标记同列，整段在 run: | 中；这样 YAML 与 Shell 都正确。

所有变量（包括 summary_file、文件名等）一律加双引号，清空 SC2086。

用 { …; } >> "${summary_file}" 一次重定向清空 SC2129。

Job Summary 的使用是官方支持的最佳实践。
GitHub Docs
+1

为什么这就能一次过？

SC2129 官方解释：与其每行都 >> file，把命令分组后一次性重定向，开销更低也更清晰；此规则属风格级，可修可忽略，但修掉最省心。
shellcheck.net

SC2086 官方解释：双引号可避免通配与拆词；若你确实需要有意拆词，请用数组或显式 read -ra。
shellcheck.net
Stack Overflow

Job Summary：GitHub 原生支持，将 Markdown 追加到 "$GITHUB_STEP_SUMMARY" 即可在运行摘要页渲染；多步可反复追加。
GitHub Docs
TIL

小贴士（可选增强）

在这些 step 的开头加一行：set -Eeuo pipefail 提升脚本稳健性（若这样做，注意空变量需要默认值或提前赋值）。

如果你仍有 其他 step 在一行一行 >> "$GITHUB_STEP_SUMMARY"，同样改成 { …; } >> "$GITHUB_STEP_SUMMARY" 即可一网打尽 SC2129